
LR1121DVK1TBKS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb30  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002210  0800bcc0  0800bcc0  0001bcc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ded0  0800ded0  000201f8  2**0
                  CONTENTS
  4 .ARM          00000000  0800ded0  0800ded0  000201f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ded0  0800ded0  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ded0  0800ded0  0001ded0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ded4  0800ded4  0001ded4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f8  20000000  0800ded8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a70  200001f8  0800e0d0  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c68  0800e0d0  00020c68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002acfb  00000000  00000000  0002026b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005ce6  00000000  00000000  0004af66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000028b0  00000000  00000000  00050c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001eed  00000000  00000000  00053500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000093d8  00000000  00000000  000553ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002a5f9  00000000  00000000  0005e7c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011a008  00000000  00000000  00088dbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000bb04  00000000  00000000  001a2dc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001ae8cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bca8 	.word	0x0800bca8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	0800bca8 	.word	0x0800bca8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a04      	ldr	r2, [pc, #16]	; (8000bc8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d101      	bne.n	8000bbe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bba:	f000 f99f 	bl	8000efc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40012c00 	.word	0x40012c00

08000bcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd0:	b672      	cpsid	i
}
 8000bd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <Error_Handler+0x8>
	...

08000bd8 <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b085      	sub	sp, #20
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  __IO uint32_t *reg = (__IO uint32_t *)(uint32_t)(RCC_BASE + 0x88U + (I2CxSource >> 24U));
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	0e1a      	lsrs	r2, r3, #24
 8000be4:	4b0f      	ldr	r3, [pc, #60]	; (8000c24 <LL_RCC_SetI2CClockSource+0x4c>)
 8000be6:	4413      	add	r3, r2
 8000be8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(*reg, 3UL << ((I2CxSource & 0x001F0000U) >> 16U), ((I2CxSource & 0x000000FFU) << ((I2CxSource & 0x001F0000U) >> 16U)));
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	0c1b      	lsrs	r3, r3, #16
 8000bf2:	f003 031f 	and.w	r3, r3, #31
 8000bf6:	2103      	movs	r1, #3
 8000bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bfc:	43db      	mvns	r3, r3
 8000bfe:	401a      	ands	r2, r3
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	b2d9      	uxtb	r1, r3
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	0c1b      	lsrs	r3, r3, #16
 8000c08:	f003 031f 	and.w	r3, r3, #31
 8000c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c10:	431a      	orrs	r2, r3
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	601a      	str	r2, [r3, #0]
}
 8000c16:	bf00      	nop
 8000c18:	3714      	adds	r7, #20
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	40021088 	.word	0x40021088

08000c28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b08a      	sub	sp, #40	; 0x28
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c30:	f107 0314 	add.w	r3, r7, #20
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]
 8000c3e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a19      	ldr	r2, [pc, #100]	; (8000cac <HAL_I2C_MspInit+0x84>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d12c      	bne.n	8000ca4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
    LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_PCLK1);
 8000c4a:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 8000c4e:	f7ff ffc3 	bl	8000bd8 <LL_RCC_SetI2CClockSource>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c52:	4b17      	ldr	r3, [pc, #92]	; (8000cb0 <HAL_I2C_MspInit+0x88>)
 8000c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c56:	4a16      	ldr	r2, [pc, #88]	; (8000cb0 <HAL_I2C_MspInit+0x88>)
 8000c58:	f043 0302 	orr.w	r3, r3, #2
 8000c5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c5e:	4b14      	ldr	r3, [pc, #80]	; (8000cb0 <HAL_I2C_MspInit+0x88>)
 8000c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c62:	f003 0302 	and.w	r3, r3, #2
 8000c66:	613b      	str	r3, [r7, #16]
 8000c68:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c6a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c70:	2312      	movs	r3, #18
 8000c72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c74:	2301      	movs	r3, #1
 8000c76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c78:	2303      	movs	r3, #3
 8000c7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c7c:	2304      	movs	r3, #4
 8000c7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c80:	f107 0314 	add.w	r3, r7, #20
 8000c84:	4619      	mov	r1, r3
 8000c86:	480b      	ldr	r0, [pc, #44]	; (8000cb4 <HAL_I2C_MspInit+0x8c>)
 8000c88:	f000 f958 	bl	8000f3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c8c:	4b08      	ldr	r3, [pc, #32]	; (8000cb0 <HAL_I2C_MspInit+0x88>)
 8000c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c90:	4a07      	ldr	r2, [pc, #28]	; (8000cb0 <HAL_I2C_MspInit+0x88>)
 8000c92:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c96:	6593      	str	r3, [r2, #88]	; 0x58
 8000c98:	4b05      	ldr	r3, [pc, #20]	; (8000cb0 <HAL_I2C_MspInit+0x88>)
 8000c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000ca4:	bf00      	nop
 8000ca6:	3728      	adds	r7, #40	; 0x28
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	40005400 	.word	0x40005400
 8000cb0:	40021000 	.word	0x40021000
 8000cb4:	48000400 	.word	0x48000400

08000cb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cbc:	e7fe      	b.n	8000cbc <NMI_Handler+0x4>

08000cbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cc2:	e7fe      	b.n	8000cc2 <HardFault_Handler+0x4>

08000cc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc8:	e7fe      	b.n	8000cc8 <MemManage_Handler+0x4>

08000cca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cce:	e7fe      	b.n	8000cce <BusFault_Handler+0x4>

08000cd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd4:	e7fe      	b.n	8000cd4 <UsageFault_Handler+0x4>

08000cd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr

08000ce4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ce8:	4802      	ldr	r0, [pc, #8]	; (8000cf4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000cea:	f001 f8ea 	bl	8001ec2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000214 	.word	0x20000214

08000cf8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  return 1;
 8000cfc:	2301      	movs	r3, #1
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <_kill>:

int _kill(int pid, int sig)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000d12:	f008 ff21 	bl	8009b58 <__errno>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2216      	movs	r2, #22
 8000d1a:	601a      	str	r2, [r3, #0]
  return -1;
 8000d1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <_exit>:

void _exit (int status)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000d30:	f04f 31ff 	mov.w	r1, #4294967295
 8000d34:	6878      	ldr	r0, [r7, #4]
 8000d36:	f7ff ffe7 	bl	8000d08 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000d3a:	e7fe      	b.n	8000d3a <_exit+0x12>

08000d3c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b086      	sub	sp, #24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	60f8      	str	r0, [r7, #12]
 8000d44:	60b9      	str	r1, [r7, #8]
 8000d46:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d48:	2300      	movs	r3, #0
 8000d4a:	617b      	str	r3, [r7, #20]
 8000d4c:	e00a      	b.n	8000d64 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d4e:	f3af 8000 	nop.w
 8000d52:	4601      	mov	r1, r0
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	1c5a      	adds	r2, r3, #1
 8000d58:	60ba      	str	r2, [r7, #8]
 8000d5a:	b2ca      	uxtb	r2, r1
 8000d5c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	3301      	adds	r3, #1
 8000d62:	617b      	str	r3, [r7, #20]
 8000d64:	697a      	ldr	r2, [r7, #20]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	dbf0      	blt.n	8000d4e <_read+0x12>
  }

  return len;
 8000d6c:	687b      	ldr	r3, [r7, #4]
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3718      	adds	r7, #24
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b086      	sub	sp, #24
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	60f8      	str	r0, [r7, #12]
 8000d7e:	60b9      	str	r1, [r7, #8]
 8000d80:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d82:	2300      	movs	r3, #0
 8000d84:	617b      	str	r3, [r7, #20]
 8000d86:	e009      	b.n	8000d9c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	1c5a      	adds	r2, r3, #1
 8000d8c:	60ba      	str	r2, [r7, #8]
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	617b      	str	r3, [r7, #20]
 8000d9c:	697a      	ldr	r2, [r7, #20]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	dbf1      	blt.n	8000d88 <_write+0x12>
  }
  return len;
 8000da4:	687b      	ldr	r3, [r7, #4]
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3718      	adds	r7, #24
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}

08000dae <_close>:

int _close(int file)
{
 8000dae:	b480      	push	{r7}
 8000db0:	b083      	sub	sp, #12
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000db6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr

08000dc6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	b083      	sub	sp, #12
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
 8000dce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dd6:	605a      	str	r2, [r3, #4]
  return 0;
 8000dd8:	2300      	movs	r3, #0
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr

08000de6 <_isatty>:

int _isatty(int file)
{
 8000de6:	b480      	push	{r7}
 8000de8:	b083      	sub	sp, #12
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000dee:	2301      	movs	r3, #1
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr

08000dfc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b085      	sub	sp, #20
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	60b9      	str	r1, [r7, #8]
 8000e06:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e08:	2300      	movs	r3, #0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3714      	adds	r7, #20
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
	...

08000e18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e20:	4a14      	ldr	r2, [pc, #80]	; (8000e74 <_sbrk+0x5c>)
 8000e22:	4b15      	ldr	r3, [pc, #84]	; (8000e78 <_sbrk+0x60>)
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e2c:	4b13      	ldr	r3, [pc, #76]	; (8000e7c <_sbrk+0x64>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d102      	bne.n	8000e3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e34:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <_sbrk+0x64>)
 8000e36:	4a12      	ldr	r2, [pc, #72]	; (8000e80 <_sbrk+0x68>)
 8000e38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e3a:	4b10      	ldr	r3, [pc, #64]	; (8000e7c <_sbrk+0x64>)
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4413      	add	r3, r2
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d207      	bcs.n	8000e58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e48:	f008 fe86 	bl	8009b58 <__errno>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	220c      	movs	r2, #12
 8000e50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e52:	f04f 33ff 	mov.w	r3, #4294967295
 8000e56:	e009      	b.n	8000e6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e58:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <_sbrk+0x64>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e5e:	4b07      	ldr	r3, [pc, #28]	; (8000e7c <_sbrk+0x64>)
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4413      	add	r3, r2
 8000e66:	4a05      	ldr	r2, [pc, #20]	; (8000e7c <_sbrk+0x64>)
 8000e68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3718      	adds	r7, #24
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20018000 	.word	0x20018000
 8000e78:	00000400 	.word	0x00000400
 8000e7c:	20000260 	.word	0x20000260
 8000e80:	20000c68 	.word	0x20000c68

08000e84 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e88:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <SystemInit+0x20>)
 8000e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e8e:	4a05      	ldr	r2, [pc, #20]	; (8000ea4 <SystemInit+0x20>)
 8000e90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ea8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ee0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000eac:	f7ff ffea 	bl	8000e84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000eb0:	480c      	ldr	r0, [pc, #48]	; (8000ee4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000eb2:	490d      	ldr	r1, [pc, #52]	; (8000ee8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000eb4:	4a0d      	ldr	r2, [pc, #52]	; (8000eec <LoopForever+0xe>)
  movs r3, #0
 8000eb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eb8:	e002      	b.n	8000ec0 <LoopCopyDataInit>

08000eba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ebc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ebe:	3304      	adds	r3, #4

08000ec0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ec0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ec2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ec4:	d3f9      	bcc.n	8000eba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ec6:	4a0a      	ldr	r2, [pc, #40]	; (8000ef0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ec8:	4c0a      	ldr	r4, [pc, #40]	; (8000ef4 <LoopForever+0x16>)
  movs r3, #0
 8000eca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ecc:	e001      	b.n	8000ed2 <LoopFillZerobss>

08000ece <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ece:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ed0:	3204      	adds	r2, #4

08000ed2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ed2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ed4:	d3fb      	bcc.n	8000ece <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ed6:	f008 fe45 	bl	8009b64 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000eda:	f002 fcdf 	bl	800389c <main>

08000ede <LoopForever>:

LoopForever:
    b LoopForever
 8000ede:	e7fe      	b.n	8000ede <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ee0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ee4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ee8:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8000eec:	0800ded8 	.word	0x0800ded8
  ldr r2, =_sbss
 8000ef0:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8000ef4:	20000c68 	.word	0x20000c68

08000ef8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ef8:	e7fe      	b.n	8000ef8 <ADC1_2_IRQHandler>
	...

08000efc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f00:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <HAL_IncTick+0x20>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	461a      	mov	r2, r3
 8000f06:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <HAL_IncTick+0x24>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	4a04      	ldr	r2, [pc, #16]	; (8000f20 <HAL_IncTick+0x24>)
 8000f0e:	6013      	str	r3, [r2, #0]
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	20000004 	.word	0x20000004
 8000f20:	20000264 	.word	0x20000264

08000f24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  return uwTick;
 8000f28:	4b03      	ldr	r3, [pc, #12]	; (8000f38 <HAL_GetTick+0x14>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	20000264 	.word	0x20000264

08000f3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b087      	sub	sp, #28
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f46:	2300      	movs	r3, #0
 8000f48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f4a:	e17f      	b.n	800124c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	2101      	movs	r1, #1
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	fa01 f303 	lsl.w	r3, r1, r3
 8000f58:	4013      	ands	r3, r2
 8000f5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	f000 8171 	beq.w	8001246 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f003 0303 	and.w	r3, r3, #3
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d005      	beq.n	8000f7c <HAL_GPIO_Init+0x40>
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f003 0303 	and.w	r3, r3, #3
 8000f78:	2b02      	cmp	r3, #2
 8000f7a:	d130      	bne.n	8000fde <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	2203      	movs	r2, #3
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	4013      	ands	r3, r2
 8000f92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	68da      	ldr	r2, [r3, #12]
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	693a      	ldr	r2, [r7, #16]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	091b      	lsrs	r3, r3, #4
 8000fc8:	f003 0201 	and.w	r2, r3, #1
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f003 0303 	and.w	r3, r3, #3
 8000fe6:	2b03      	cmp	r3, #3
 8000fe8:	d118      	bne.n	800101c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	08db      	lsrs	r3, r3, #3
 8001006:	f003 0201 	and.w	r2, r3, #1
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	4313      	orrs	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f003 0303 	and.w	r3, r3, #3
 8001024:	2b03      	cmp	r3, #3
 8001026:	d017      	beq.n	8001058 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	2203      	movs	r2, #3
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	43db      	mvns	r3, r3
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	4013      	ands	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	689a      	ldr	r2, [r3, #8]
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	4313      	orrs	r3, r2
 8001050:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f003 0303 	and.w	r3, r3, #3
 8001060:	2b02      	cmp	r3, #2
 8001062:	d123      	bne.n	80010ac <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	08da      	lsrs	r2, r3, #3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3208      	adds	r2, #8
 800106c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001070:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	f003 0307 	and.w	r3, r3, #7
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	220f      	movs	r2, #15
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	43db      	mvns	r3, r3
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	4013      	ands	r3, r2
 8001086:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	691a      	ldr	r2, [r3, #16]
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	f003 0307 	and.w	r3, r3, #7
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	4313      	orrs	r3, r2
 800109c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	08da      	lsrs	r2, r3, #3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	3208      	adds	r2, #8
 80010a6:	6939      	ldr	r1, [r7, #16]
 80010a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	2203      	movs	r2, #3
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	43db      	mvns	r3, r3
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	4013      	ands	r3, r2
 80010c2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f003 0203 	and.w	r2, r3, #3
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	693a      	ldr	r2, [r7, #16]
 80010de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	f000 80ac 	beq.w	8001246 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ee:	4b5f      	ldr	r3, [pc, #380]	; (800126c <HAL_GPIO_Init+0x330>)
 80010f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010f2:	4a5e      	ldr	r2, [pc, #376]	; (800126c <HAL_GPIO_Init+0x330>)
 80010f4:	f043 0301 	orr.w	r3, r3, #1
 80010f8:	6613      	str	r3, [r2, #96]	; 0x60
 80010fa:	4b5c      	ldr	r3, [pc, #368]	; (800126c <HAL_GPIO_Init+0x330>)
 80010fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	60bb      	str	r3, [r7, #8]
 8001104:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001106:	4a5a      	ldr	r2, [pc, #360]	; (8001270 <HAL_GPIO_Init+0x334>)
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	089b      	lsrs	r3, r3, #2
 800110c:	3302      	adds	r3, #2
 800110e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001112:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	f003 0303 	and.w	r3, r3, #3
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	220f      	movs	r2, #15
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	43db      	mvns	r3, r3
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	4013      	ands	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001130:	d025      	beq.n	800117e <HAL_GPIO_Init+0x242>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a4f      	ldr	r2, [pc, #316]	; (8001274 <HAL_GPIO_Init+0x338>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d01f      	beq.n	800117a <HAL_GPIO_Init+0x23e>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a4e      	ldr	r2, [pc, #312]	; (8001278 <HAL_GPIO_Init+0x33c>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d019      	beq.n	8001176 <HAL_GPIO_Init+0x23a>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a4d      	ldr	r2, [pc, #308]	; (800127c <HAL_GPIO_Init+0x340>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d013      	beq.n	8001172 <HAL_GPIO_Init+0x236>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a4c      	ldr	r2, [pc, #304]	; (8001280 <HAL_GPIO_Init+0x344>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d00d      	beq.n	800116e <HAL_GPIO_Init+0x232>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a4b      	ldr	r2, [pc, #300]	; (8001284 <HAL_GPIO_Init+0x348>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d007      	beq.n	800116a <HAL_GPIO_Init+0x22e>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a4a      	ldr	r2, [pc, #296]	; (8001288 <HAL_GPIO_Init+0x34c>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d101      	bne.n	8001166 <HAL_GPIO_Init+0x22a>
 8001162:	2306      	movs	r3, #6
 8001164:	e00c      	b.n	8001180 <HAL_GPIO_Init+0x244>
 8001166:	2307      	movs	r3, #7
 8001168:	e00a      	b.n	8001180 <HAL_GPIO_Init+0x244>
 800116a:	2305      	movs	r3, #5
 800116c:	e008      	b.n	8001180 <HAL_GPIO_Init+0x244>
 800116e:	2304      	movs	r3, #4
 8001170:	e006      	b.n	8001180 <HAL_GPIO_Init+0x244>
 8001172:	2303      	movs	r3, #3
 8001174:	e004      	b.n	8001180 <HAL_GPIO_Init+0x244>
 8001176:	2302      	movs	r3, #2
 8001178:	e002      	b.n	8001180 <HAL_GPIO_Init+0x244>
 800117a:	2301      	movs	r3, #1
 800117c:	e000      	b.n	8001180 <HAL_GPIO_Init+0x244>
 800117e:	2300      	movs	r3, #0
 8001180:	697a      	ldr	r2, [r7, #20]
 8001182:	f002 0203 	and.w	r2, r2, #3
 8001186:	0092      	lsls	r2, r2, #2
 8001188:	4093      	lsls	r3, r2
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	4313      	orrs	r3, r2
 800118e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001190:	4937      	ldr	r1, [pc, #220]	; (8001270 <HAL_GPIO_Init+0x334>)
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	089b      	lsrs	r3, r3, #2
 8001196:	3302      	adds	r3, #2
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800119e:	4b3b      	ldr	r3, [pc, #236]	; (800128c <HAL_GPIO_Init+0x350>)
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	43db      	mvns	r3, r3
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	4013      	ands	r3, r2
 80011ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d003      	beq.n	80011c2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	4313      	orrs	r3, r2
 80011c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011c2:	4a32      	ldr	r2, [pc, #200]	; (800128c <HAL_GPIO_Init+0x350>)
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80011c8:	4b30      	ldr	r3, [pc, #192]	; (800128c <HAL_GPIO_Init+0x350>)
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	43db      	mvns	r3, r3
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	4013      	ands	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d003      	beq.n	80011ec <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011ec:	4a27      	ldr	r2, [pc, #156]	; (800128c <HAL_GPIO_Init+0x350>)
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80011f2:	4b26      	ldr	r3, [pc, #152]	; (800128c <HAL_GPIO_Init+0x350>)
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	43db      	mvns	r3, r3
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	4013      	ands	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d003      	beq.n	8001216 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	4313      	orrs	r3, r2
 8001214:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001216:	4a1d      	ldr	r2, [pc, #116]	; (800128c <HAL_GPIO_Init+0x350>)
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800121c:	4b1b      	ldr	r3, [pc, #108]	; (800128c <HAL_GPIO_Init+0x350>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	43db      	mvns	r3, r3
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	4013      	ands	r3, r2
 800122a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001234:	2b00      	cmp	r3, #0
 8001236:	d003      	beq.n	8001240 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001238:	693a      	ldr	r2, [r7, #16]
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	4313      	orrs	r3, r2
 800123e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001240:	4a12      	ldr	r2, [pc, #72]	; (800128c <HAL_GPIO_Init+0x350>)
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	3301      	adds	r3, #1
 800124a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	fa22 f303 	lsr.w	r3, r2, r3
 8001256:	2b00      	cmp	r3, #0
 8001258:	f47f ae78 	bne.w	8000f4c <HAL_GPIO_Init+0x10>
  }
}
 800125c:	bf00      	nop
 800125e:	bf00      	nop
 8001260:	371c      	adds	r7, #28
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	40021000 	.word	0x40021000
 8001270:	40010000 	.word	0x40010000
 8001274:	48000400 	.word	0x48000400
 8001278:	48000800 	.word	0x48000800
 800127c:	48000c00 	.word	0x48000c00
 8001280:	48001000 	.word	0x48001000
 8001284:	48001400 	.word	0x48001400
 8001288:	48001800 	.word	0x48001800
 800128c:	40010400 	.word	0x40010400

08001290 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d101      	bne.n	80012a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e08d      	b.n	80013be <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d106      	bne.n	80012bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2200      	movs	r2, #0
 80012b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f7ff fcb6 	bl	8000c28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2224      	movs	r2, #36	; 0x24
 80012c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f022 0201 	bic.w	r2, r2, #1
 80012d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	685a      	ldr	r2, [r3, #4]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80012e0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	689a      	ldr	r2, [r3, #8]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80012f0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	68db      	ldr	r3, [r3, #12]
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d107      	bne.n	800130a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	689a      	ldr	r2, [r3, #8]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	e006      	b.n	8001318 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	689a      	ldr	r2, [r3, #8]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001316:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	2b02      	cmp	r3, #2
 800131e:	d108      	bne.n	8001332 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	685a      	ldr	r2, [r3, #4]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800132e:	605a      	str	r2, [r3, #4]
 8001330:	e007      	b.n	8001342 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	685a      	ldr	r2, [r3, #4]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001340:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	6812      	ldr	r2, [r2, #0]
 800134c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001350:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001354:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	68da      	ldr	r2, [r3, #12]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001364:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	691a      	ldr	r2, [r3, #16]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	695b      	ldr	r3, [r3, #20]
 800136e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	699b      	ldr	r3, [r3, #24]
 8001376:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	430a      	orrs	r2, r1
 800137e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	69d9      	ldr	r1, [r3, #28]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6a1a      	ldr	r2, [r3, #32]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	430a      	orrs	r2, r1
 800138e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f042 0201 	orr.w	r2, r2, #1
 800139e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2200      	movs	r2, #0
 80013a4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2220      	movs	r2, #32
 80013aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
	...

080013c8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b088      	sub	sp, #32
 80013cc:	af02      	add	r7, sp, #8
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	4608      	mov	r0, r1
 80013d2:	4611      	mov	r1, r2
 80013d4:	461a      	mov	r2, r3
 80013d6:	4603      	mov	r3, r0
 80013d8:	817b      	strh	r3, [r7, #10]
 80013da:	460b      	mov	r3, r1
 80013dc:	813b      	strh	r3, [r7, #8]
 80013de:	4613      	mov	r3, r2
 80013e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	2b20      	cmp	r3, #32
 80013ec:	f040 80f9 	bne.w	80015e2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80013f0:	6a3b      	ldr	r3, [r7, #32]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d002      	beq.n	80013fc <HAL_I2C_Mem_Write+0x34>
 80013f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d105      	bne.n	8001408 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001402:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	e0ed      	b.n	80015e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800140e:	2b01      	cmp	r3, #1
 8001410:	d101      	bne.n	8001416 <HAL_I2C_Mem_Write+0x4e>
 8001412:	2302      	movs	r3, #2
 8001414:	e0e6      	b.n	80015e4 <HAL_I2C_Mem_Write+0x21c>
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	2201      	movs	r2, #1
 800141a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800141e:	f7ff fd81 	bl	8000f24 <HAL_GetTick>
 8001422:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	9300      	str	r3, [sp, #0]
 8001428:	2319      	movs	r3, #25
 800142a:	2201      	movs	r2, #1
 800142c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001430:	68f8      	ldr	r0, [r7, #12]
 8001432:	f000 fac3 	bl	80019bc <I2C_WaitOnFlagUntilTimeout>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	e0d1      	b.n	80015e4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	2221      	movs	r2, #33	; 0x21
 8001444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	2240      	movs	r2, #64	; 0x40
 800144c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	2200      	movs	r2, #0
 8001454:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	6a3a      	ldr	r2, [r7, #32]
 800145a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001460:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	2200      	movs	r2, #0
 8001466:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001468:	88f8      	ldrh	r0, [r7, #6]
 800146a:	893a      	ldrh	r2, [r7, #8]
 800146c:	8979      	ldrh	r1, [r7, #10]
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	9301      	str	r3, [sp, #4]
 8001472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001474:	9300      	str	r3, [sp, #0]
 8001476:	4603      	mov	r3, r0
 8001478:	68f8      	ldr	r0, [r7, #12]
 800147a:	f000 f9d3 	bl	8001824 <I2C_RequestMemoryWrite>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d005      	beq.n	8001490 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	2200      	movs	r2, #0
 8001488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e0a9      	b.n	80015e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001494:	b29b      	uxth	r3, r3
 8001496:	2bff      	cmp	r3, #255	; 0xff
 8001498:	d90e      	bls.n	80014b8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	22ff      	movs	r2, #255	; 0xff
 800149e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014a4:	b2da      	uxtb	r2, r3
 80014a6:	8979      	ldrh	r1, [r7, #10]
 80014a8:	2300      	movs	r3, #0
 80014aa:	9300      	str	r3, [sp, #0]
 80014ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014b0:	68f8      	ldr	r0, [r7, #12]
 80014b2:	f000 fc3d 	bl	8001d30 <I2C_TransferConfig>
 80014b6:	e00f      	b.n	80014d8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014bc:	b29a      	uxth	r2, r3
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014c6:	b2da      	uxtb	r2, r3
 80014c8:	8979      	ldrh	r1, [r7, #10]
 80014ca:	2300      	movs	r3, #0
 80014cc:	9300      	str	r3, [sp, #0]
 80014ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014d2:	68f8      	ldr	r0, [r7, #12]
 80014d4:	f000 fc2c 	bl	8001d30 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014d8:	697a      	ldr	r2, [r7, #20]
 80014da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80014dc:	68f8      	ldr	r0, [r7, #12]
 80014de:	f000 fabc 	bl	8001a5a <I2C_WaitOnTXISFlagUntilTimeout>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	e07b      	b.n	80015e4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f0:	781a      	ldrb	r2, [r3, #0]
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fc:	1c5a      	adds	r2, r3, #1
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001506:	b29b      	uxth	r3, r3
 8001508:	3b01      	subs	r3, #1
 800150a:	b29a      	uxth	r2, r3
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001514:	3b01      	subs	r3, #1
 8001516:	b29a      	uxth	r2, r3
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001520:	b29b      	uxth	r3, r3
 8001522:	2b00      	cmp	r3, #0
 8001524:	d034      	beq.n	8001590 <HAL_I2C_Mem_Write+0x1c8>
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800152a:	2b00      	cmp	r3, #0
 800152c:	d130      	bne.n	8001590 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	9300      	str	r3, [sp, #0]
 8001532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001534:	2200      	movs	r2, #0
 8001536:	2180      	movs	r1, #128	; 0x80
 8001538:	68f8      	ldr	r0, [r7, #12]
 800153a:	f000 fa3f 	bl	80019bc <I2C_WaitOnFlagUntilTimeout>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e04d      	b.n	80015e4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800154c:	b29b      	uxth	r3, r3
 800154e:	2bff      	cmp	r3, #255	; 0xff
 8001550:	d90e      	bls.n	8001570 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	22ff      	movs	r2, #255	; 0xff
 8001556:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800155c:	b2da      	uxtb	r2, r3
 800155e:	8979      	ldrh	r1, [r7, #10]
 8001560:	2300      	movs	r3, #0
 8001562:	9300      	str	r3, [sp, #0]
 8001564:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001568:	68f8      	ldr	r0, [r7, #12]
 800156a:	f000 fbe1 	bl	8001d30 <I2C_TransferConfig>
 800156e:	e00f      	b.n	8001590 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001574:	b29a      	uxth	r2, r3
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800157e:	b2da      	uxtb	r2, r3
 8001580:	8979      	ldrh	r1, [r7, #10]
 8001582:	2300      	movs	r3, #0
 8001584:	9300      	str	r3, [sp, #0]
 8001586:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800158a:	68f8      	ldr	r0, [r7, #12]
 800158c:	f000 fbd0 	bl	8001d30 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001594:	b29b      	uxth	r3, r3
 8001596:	2b00      	cmp	r3, #0
 8001598:	d19e      	bne.n	80014d8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800159a:	697a      	ldr	r2, [r7, #20]
 800159c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800159e:	68f8      	ldr	r0, [r7, #12]
 80015a0:	f000 faa2 	bl	8001ae8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e01a      	b.n	80015e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2220      	movs	r2, #32
 80015b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	6859      	ldr	r1, [r3, #4]
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	4b0a      	ldr	r3, [pc, #40]	; (80015ec <HAL_I2C_Mem_Write+0x224>)
 80015c2:	400b      	ands	r3, r1
 80015c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	2220      	movs	r2, #32
 80015ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	2200      	movs	r2, #0
 80015d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	2200      	movs	r2, #0
 80015da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80015de:	2300      	movs	r3, #0
 80015e0:	e000      	b.n	80015e4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80015e2:	2302      	movs	r3, #2
  }
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3718      	adds	r7, #24
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	fe00e800 	.word	0xfe00e800

080015f0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b088      	sub	sp, #32
 80015f4:	af02      	add	r7, sp, #8
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	4608      	mov	r0, r1
 80015fa:	4611      	mov	r1, r2
 80015fc:	461a      	mov	r2, r3
 80015fe:	4603      	mov	r3, r0
 8001600:	817b      	strh	r3, [r7, #10]
 8001602:	460b      	mov	r3, r1
 8001604:	813b      	strh	r3, [r7, #8]
 8001606:	4613      	mov	r3, r2
 8001608:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001610:	b2db      	uxtb	r3, r3
 8001612:	2b20      	cmp	r3, #32
 8001614:	f040 80fd 	bne.w	8001812 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001618:	6a3b      	ldr	r3, [r7, #32]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d002      	beq.n	8001624 <HAL_I2C_Mem_Read+0x34>
 800161e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001620:	2b00      	cmp	r3, #0
 8001622:	d105      	bne.n	8001630 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f44f 7200 	mov.w	r2, #512	; 0x200
 800162a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e0f1      	b.n	8001814 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001636:	2b01      	cmp	r3, #1
 8001638:	d101      	bne.n	800163e <HAL_I2C_Mem_Read+0x4e>
 800163a:	2302      	movs	r3, #2
 800163c:	e0ea      	b.n	8001814 <HAL_I2C_Mem_Read+0x224>
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	2201      	movs	r2, #1
 8001642:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001646:	f7ff fc6d 	bl	8000f24 <HAL_GetTick>
 800164a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	9300      	str	r3, [sp, #0]
 8001650:	2319      	movs	r3, #25
 8001652:	2201      	movs	r2, #1
 8001654:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001658:	68f8      	ldr	r0, [r7, #12]
 800165a:	f000 f9af 	bl	80019bc <I2C_WaitOnFlagUntilTimeout>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	e0d5      	b.n	8001814 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2222      	movs	r2, #34	; 0x22
 800166c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	2240      	movs	r2, #64	; 0x40
 8001674:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2200      	movs	r2, #0
 800167c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	6a3a      	ldr	r2, [r7, #32]
 8001682:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001688:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	2200      	movs	r2, #0
 800168e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001690:	88f8      	ldrh	r0, [r7, #6]
 8001692:	893a      	ldrh	r2, [r7, #8]
 8001694:	8979      	ldrh	r1, [r7, #10]
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	9301      	str	r3, [sp, #4]
 800169a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800169c:	9300      	str	r3, [sp, #0]
 800169e:	4603      	mov	r3, r0
 80016a0:	68f8      	ldr	r0, [r7, #12]
 80016a2:	f000 f913 	bl	80018cc <I2C_RequestMemoryRead>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d005      	beq.n	80016b8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2200      	movs	r2, #0
 80016b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e0ad      	b.n	8001814 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016bc:	b29b      	uxth	r3, r3
 80016be:	2bff      	cmp	r3, #255	; 0xff
 80016c0:	d90e      	bls.n	80016e0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	22ff      	movs	r2, #255	; 0xff
 80016c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016cc:	b2da      	uxtb	r2, r3
 80016ce:	8979      	ldrh	r1, [r7, #10]
 80016d0:	4b52      	ldr	r3, [pc, #328]	; (800181c <HAL_I2C_Mem_Read+0x22c>)
 80016d2:	9300      	str	r3, [sp, #0]
 80016d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016d8:	68f8      	ldr	r0, [r7, #12]
 80016da:	f000 fb29 	bl	8001d30 <I2C_TransferConfig>
 80016de:	e00f      	b.n	8001700 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016e4:	b29a      	uxth	r2, r3
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016ee:	b2da      	uxtb	r2, r3
 80016f0:	8979      	ldrh	r1, [r7, #10]
 80016f2:	4b4a      	ldr	r3, [pc, #296]	; (800181c <HAL_I2C_Mem_Read+0x22c>)
 80016f4:	9300      	str	r3, [sp, #0]
 80016f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016fa:	68f8      	ldr	r0, [r7, #12]
 80016fc:	f000 fb18 	bl	8001d30 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	9300      	str	r3, [sp, #0]
 8001704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001706:	2200      	movs	r2, #0
 8001708:	2104      	movs	r1, #4
 800170a:	68f8      	ldr	r0, [r7, #12]
 800170c:	f000 f956 	bl	80019bc <I2C_WaitOnFlagUntilTimeout>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e07c      	b.n	8001814 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001724:	b2d2      	uxtb	r2, r2
 8001726:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172c:	1c5a      	adds	r2, r3, #1
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001736:	3b01      	subs	r3, #1
 8001738:	b29a      	uxth	r2, r3
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001742:	b29b      	uxth	r3, r3
 8001744:	3b01      	subs	r3, #1
 8001746:	b29a      	uxth	r2, r3
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001750:	b29b      	uxth	r3, r3
 8001752:	2b00      	cmp	r3, #0
 8001754:	d034      	beq.n	80017c0 <HAL_I2C_Mem_Read+0x1d0>
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800175a:	2b00      	cmp	r3, #0
 800175c:	d130      	bne.n	80017c0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	9300      	str	r3, [sp, #0]
 8001762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001764:	2200      	movs	r2, #0
 8001766:	2180      	movs	r1, #128	; 0x80
 8001768:	68f8      	ldr	r0, [r7, #12]
 800176a:	f000 f927 	bl	80019bc <I2C_WaitOnFlagUntilTimeout>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e04d      	b.n	8001814 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800177c:	b29b      	uxth	r3, r3
 800177e:	2bff      	cmp	r3, #255	; 0xff
 8001780:	d90e      	bls.n	80017a0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	22ff      	movs	r2, #255	; 0xff
 8001786:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800178c:	b2da      	uxtb	r2, r3
 800178e:	8979      	ldrh	r1, [r7, #10]
 8001790:	2300      	movs	r3, #0
 8001792:	9300      	str	r3, [sp, #0]
 8001794:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001798:	68f8      	ldr	r0, [r7, #12]
 800179a:	f000 fac9 	bl	8001d30 <I2C_TransferConfig>
 800179e:	e00f      	b.n	80017c0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017a4:	b29a      	uxth	r2, r3
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ae:	b2da      	uxtb	r2, r3
 80017b0:	8979      	ldrh	r1, [r7, #10]
 80017b2:	2300      	movs	r3, #0
 80017b4:	9300      	str	r3, [sp, #0]
 80017b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017ba:	68f8      	ldr	r0, [r7, #12]
 80017bc:	f000 fab8 	bl	8001d30 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017c4:	b29b      	uxth	r3, r3
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d19a      	bne.n	8001700 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017ca:	697a      	ldr	r2, [r7, #20]
 80017cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017ce:	68f8      	ldr	r0, [r7, #12]
 80017d0:	f000 f98a 	bl	8001ae8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e01a      	b.n	8001814 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2220      	movs	r2, #32
 80017e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	6859      	ldr	r1, [r3, #4]
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	4b0b      	ldr	r3, [pc, #44]	; (8001820 <HAL_I2C_Mem_Read+0x230>)
 80017f2:	400b      	ands	r3, r1
 80017f4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2220      	movs	r2, #32
 80017fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	2200      	movs	r2, #0
 8001802:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	2200      	movs	r2, #0
 800180a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800180e:	2300      	movs	r3, #0
 8001810:	e000      	b.n	8001814 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001812:	2302      	movs	r3, #2
  }
}
 8001814:	4618      	mov	r0, r3
 8001816:	3718      	adds	r7, #24
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	80002400 	.word	0x80002400
 8001820:	fe00e800 	.word	0xfe00e800

08001824 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b086      	sub	sp, #24
 8001828:	af02      	add	r7, sp, #8
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	4608      	mov	r0, r1
 800182e:	4611      	mov	r1, r2
 8001830:	461a      	mov	r2, r3
 8001832:	4603      	mov	r3, r0
 8001834:	817b      	strh	r3, [r7, #10]
 8001836:	460b      	mov	r3, r1
 8001838:	813b      	strh	r3, [r7, #8]
 800183a:	4613      	mov	r3, r2
 800183c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800183e:	88fb      	ldrh	r3, [r7, #6]
 8001840:	b2da      	uxtb	r2, r3
 8001842:	8979      	ldrh	r1, [r7, #10]
 8001844:	4b20      	ldr	r3, [pc, #128]	; (80018c8 <I2C_RequestMemoryWrite+0xa4>)
 8001846:	9300      	str	r3, [sp, #0]
 8001848:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800184c:	68f8      	ldr	r0, [r7, #12]
 800184e:	f000 fa6f 	bl	8001d30 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001852:	69fa      	ldr	r2, [r7, #28]
 8001854:	69b9      	ldr	r1, [r7, #24]
 8001856:	68f8      	ldr	r0, [r7, #12]
 8001858:	f000 f8ff 	bl	8001a5a <I2C_WaitOnTXISFlagUntilTimeout>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e02c      	b.n	80018c0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001866:	88fb      	ldrh	r3, [r7, #6]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d105      	bne.n	8001878 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800186c:	893b      	ldrh	r3, [r7, #8]
 800186e:	b2da      	uxtb	r2, r3
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	629a      	str	r2, [r3, #40]	; 0x28
 8001876:	e015      	b.n	80018a4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001878:	893b      	ldrh	r3, [r7, #8]
 800187a:	0a1b      	lsrs	r3, r3, #8
 800187c:	b29b      	uxth	r3, r3
 800187e:	b2da      	uxtb	r2, r3
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001886:	69fa      	ldr	r2, [r7, #28]
 8001888:	69b9      	ldr	r1, [r7, #24]
 800188a:	68f8      	ldr	r0, [r7, #12]
 800188c:	f000 f8e5 	bl	8001a5a <I2C_WaitOnTXISFlagUntilTimeout>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e012      	b.n	80018c0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800189a:	893b      	ldrh	r3, [r7, #8]
 800189c:	b2da      	uxtb	r2, r3
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	9300      	str	r3, [sp, #0]
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	2200      	movs	r2, #0
 80018ac:	2180      	movs	r1, #128	; 0x80
 80018ae:	68f8      	ldr	r0, [r7, #12]
 80018b0:	f000 f884 	bl	80019bc <I2C_WaitOnFlagUntilTimeout>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e000      	b.n	80018c0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80018be:	2300      	movs	r3, #0
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3710      	adds	r7, #16
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	80002000 	.word	0x80002000

080018cc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af02      	add	r7, sp, #8
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	4608      	mov	r0, r1
 80018d6:	4611      	mov	r1, r2
 80018d8:	461a      	mov	r2, r3
 80018da:	4603      	mov	r3, r0
 80018dc:	817b      	strh	r3, [r7, #10]
 80018de:	460b      	mov	r3, r1
 80018e0:	813b      	strh	r3, [r7, #8]
 80018e2:	4613      	mov	r3, r2
 80018e4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80018e6:	88fb      	ldrh	r3, [r7, #6]
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	8979      	ldrh	r1, [r7, #10]
 80018ec:	4b20      	ldr	r3, [pc, #128]	; (8001970 <I2C_RequestMemoryRead+0xa4>)
 80018ee:	9300      	str	r3, [sp, #0]
 80018f0:	2300      	movs	r3, #0
 80018f2:	68f8      	ldr	r0, [r7, #12]
 80018f4:	f000 fa1c 	bl	8001d30 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80018f8:	69fa      	ldr	r2, [r7, #28]
 80018fa:	69b9      	ldr	r1, [r7, #24]
 80018fc:	68f8      	ldr	r0, [r7, #12]
 80018fe:	f000 f8ac 	bl	8001a5a <I2C_WaitOnTXISFlagUntilTimeout>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e02c      	b.n	8001966 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800190c:	88fb      	ldrh	r3, [r7, #6]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d105      	bne.n	800191e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001912:	893b      	ldrh	r3, [r7, #8]
 8001914:	b2da      	uxtb	r2, r3
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	629a      	str	r2, [r3, #40]	; 0x28
 800191c:	e015      	b.n	800194a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800191e:	893b      	ldrh	r3, [r7, #8]
 8001920:	0a1b      	lsrs	r3, r3, #8
 8001922:	b29b      	uxth	r3, r3
 8001924:	b2da      	uxtb	r2, r3
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800192c:	69fa      	ldr	r2, [r7, #28]
 800192e:	69b9      	ldr	r1, [r7, #24]
 8001930:	68f8      	ldr	r0, [r7, #12]
 8001932:	f000 f892 	bl	8001a5a <I2C_WaitOnTXISFlagUntilTimeout>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e012      	b.n	8001966 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001940:	893b      	ldrh	r3, [r7, #8]
 8001942:	b2da      	uxtb	r2, r3
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	9300      	str	r3, [sp, #0]
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	2200      	movs	r2, #0
 8001952:	2140      	movs	r1, #64	; 0x40
 8001954:	68f8      	ldr	r0, [r7, #12]
 8001956:	f000 f831 	bl	80019bc <I2C_WaitOnFlagUntilTimeout>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e000      	b.n	8001966 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3710      	adds	r7, #16
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	80002000 	.word	0x80002000

08001974 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	699b      	ldr	r3, [r3, #24]
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	2b02      	cmp	r3, #2
 8001988:	d103      	bne.n	8001992 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2200      	movs	r2, #0
 8001990:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	699b      	ldr	r3, [r3, #24]
 8001998:	f003 0301 	and.w	r3, r3, #1
 800199c:	2b01      	cmp	r3, #1
 800199e:	d007      	beq.n	80019b0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	699a      	ldr	r2, [r3, #24]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f042 0201 	orr.w	r2, r2, #1
 80019ae:	619a      	str	r2, [r3, #24]
  }
}
 80019b0:	bf00      	nop
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	603b      	str	r3, [r7, #0]
 80019c8:	4613      	mov	r3, r2
 80019ca:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019cc:	e031      	b.n	8001a32 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019d4:	d02d      	beq.n	8001a32 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019d6:	f7ff faa5 	bl	8000f24 <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	683a      	ldr	r2, [r7, #0]
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d302      	bcc.n	80019ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d122      	bne.n	8001a32 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	699a      	ldr	r2, [r3, #24]
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	4013      	ands	r3, r2
 80019f6:	68ba      	ldr	r2, [r7, #8]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	bf0c      	ite	eq
 80019fc:	2301      	moveq	r3, #1
 80019fe:	2300      	movne	r3, #0
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	461a      	mov	r2, r3
 8001a04:	79fb      	ldrb	r3, [r7, #7]
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d113      	bne.n	8001a32 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0e:	f043 0220 	orr.w	r2, r3, #32
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2220      	movs	r2, #32
 8001a1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2200      	movs	r2, #0
 8001a22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e00f      	b.n	8001a52 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	699a      	ldr	r2, [r3, #24]
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	68ba      	ldr	r2, [r7, #8]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	bf0c      	ite	eq
 8001a42:	2301      	moveq	r3, #1
 8001a44:	2300      	movne	r3, #0
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	461a      	mov	r2, r3
 8001a4a:	79fb      	ldrb	r3, [r7, #7]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d0be      	beq.n	80019ce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3710      	adds	r7, #16
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b084      	sub	sp, #16
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	60f8      	str	r0, [r7, #12]
 8001a62:	60b9      	str	r1, [r7, #8]
 8001a64:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001a66:	e033      	b.n	8001ad0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	68b9      	ldr	r1, [r7, #8]
 8001a6c:	68f8      	ldr	r0, [r7, #12]
 8001a6e:	f000 f87f 	bl	8001b70 <I2C_IsErrorOccurred>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e031      	b.n	8001ae0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a82:	d025      	beq.n	8001ad0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a84:	f7ff fa4e 	bl	8000f24 <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	68ba      	ldr	r2, [r7, #8]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d302      	bcc.n	8001a9a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d11a      	bne.n	8001ad0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	f003 0302 	and.w	r3, r3, #2
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d013      	beq.n	8001ad0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aac:	f043 0220 	orr.w	r2, r3, #32
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2220      	movs	r2, #32
 8001ab8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e007      	b.n	8001ae0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	699b      	ldr	r3, [r3, #24]
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d1c4      	bne.n	8001a68 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001ade:	2300      	movs	r3, #0
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3710      	adds	r7, #16
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001af4:	e02f      	b.n	8001b56 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	68b9      	ldr	r1, [r7, #8]
 8001afa:	68f8      	ldr	r0, [r7, #12]
 8001afc:	f000 f838 	bl	8001b70 <I2C_IsErrorOccurred>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e02d      	b.n	8001b66 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b0a:	f7ff fa0b 	bl	8000f24 <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	68ba      	ldr	r2, [r7, #8]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d302      	bcc.n	8001b20 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d11a      	bne.n	8001b56 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	699b      	ldr	r3, [r3, #24]
 8001b26:	f003 0320 	and.w	r3, r3, #32
 8001b2a:	2b20      	cmp	r3, #32
 8001b2c:	d013      	beq.n	8001b56 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b32:	f043 0220 	orr.w	r2, r3, #32
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2220      	movs	r2, #32
 8001b3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2200      	movs	r2, #0
 8001b46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e007      	b.n	8001b66 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	f003 0320 	and.w	r3, r3, #32
 8001b60:	2b20      	cmp	r3, #32
 8001b62:	d1c8      	bne.n	8001af6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
	...

08001b70 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b08a      	sub	sp, #40	; 0x28
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	f003 0310 	and.w	r3, r3, #16
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d068      	beq.n	8001c6e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2210      	movs	r2, #16
 8001ba2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001ba4:	e049      	b.n	8001c3a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bac:	d045      	beq.n	8001c3a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001bae:	f7ff f9b9 	bl	8000f24 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	68ba      	ldr	r2, [r7, #8]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d302      	bcc.n	8001bc4 <I2C_IsErrorOccurred+0x54>
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d13a      	bne.n	8001c3a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bce:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001bd6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	699b      	ldr	r3, [r3, #24]
 8001bde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001be2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001be6:	d121      	bne.n	8001c2c <I2C_IsErrorOccurred+0xbc>
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001bee:	d01d      	beq.n	8001c2c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001bf0:	7cfb      	ldrb	r3, [r7, #19]
 8001bf2:	2b20      	cmp	r3, #32
 8001bf4:	d01a      	beq.n	8001c2c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	685a      	ldr	r2, [r3, #4]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c04:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001c06:	f7ff f98d 	bl	8000f24 <HAL_GetTick>
 8001c0a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c0c:	e00e      	b.n	8001c2c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001c0e:	f7ff f989 	bl	8000f24 <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	2b19      	cmp	r3, #25
 8001c1a:	d907      	bls.n	8001c2c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001c1c:	6a3b      	ldr	r3, [r7, #32]
 8001c1e:	f043 0320 	orr.w	r3, r3, #32
 8001c22:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8001c2a:	e006      	b.n	8001c3a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	699b      	ldr	r3, [r3, #24]
 8001c32:	f003 0320 	and.w	r3, r3, #32
 8001c36:	2b20      	cmp	r3, #32
 8001c38:	d1e9      	bne.n	8001c0e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	f003 0320 	and.w	r3, r3, #32
 8001c44:	2b20      	cmp	r3, #32
 8001c46:	d003      	beq.n	8001c50 <I2C_IsErrorOccurred+0xe0>
 8001c48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d0aa      	beq.n	8001ba6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001c50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d103      	bne.n	8001c60 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2220      	movs	r2, #32
 8001c5e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001c60:	6a3b      	ldr	r3, [r7, #32]
 8001c62:	f043 0304 	orr.w	r3, r3, #4
 8001c66:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d00b      	beq.n	8001c98 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001c80:	6a3b      	ldr	r3, [r7, #32]
 8001c82:	f043 0301 	orr.w	r3, r3, #1
 8001c86:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c90:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d00b      	beq.n	8001cba <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001ca2:	6a3b      	ldr	r3, [r7, #32]
 8001ca4:	f043 0308 	orr.w	r3, r3, #8
 8001ca8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cb2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d00b      	beq.n	8001cdc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001cc4:	6a3b      	ldr	r3, [r7, #32]
 8001cc6:	f043 0302 	orr.w	r3, r3, #2
 8001cca:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cd4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001cdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d01c      	beq.n	8001d1e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001ce4:	68f8      	ldr	r0, [r7, #12]
 8001ce6:	f7ff fe45 	bl	8001974 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	6859      	ldr	r1, [r3, #4]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	4b0d      	ldr	r3, [pc, #52]	; (8001d2c <I2C_IsErrorOccurred+0x1bc>)
 8001cf6:	400b      	ands	r3, r1
 8001cf8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001cfe:	6a3b      	ldr	r3, [r7, #32]
 8001d00:	431a      	orrs	r2, r3
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2220      	movs	r2, #32
 8001d0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2200      	movs	r2, #0
 8001d12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001d1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3728      	adds	r7, #40	; 0x28
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	fe00e800 	.word	0xfe00e800

08001d30 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b087      	sub	sp, #28
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	607b      	str	r3, [r7, #4]
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	817b      	strh	r3, [r7, #10]
 8001d3e:	4613      	mov	r3, r2
 8001d40:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001d42:	897b      	ldrh	r3, [r7, #10]
 8001d44:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001d48:	7a7b      	ldrb	r3, [r7, #9]
 8001d4a:	041b      	lsls	r3, r3, #16
 8001d4c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001d50:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001d56:	6a3b      	ldr	r3, [r7, #32]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d5e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	685a      	ldr	r2, [r3, #4]
 8001d66:	6a3b      	ldr	r3, [r7, #32]
 8001d68:	0d5b      	lsrs	r3, r3, #21
 8001d6a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001d6e:	4b08      	ldr	r3, [pc, #32]	; (8001d90 <I2C_TransferConfig+0x60>)
 8001d70:	430b      	orrs	r3, r1
 8001d72:	43db      	mvns	r3, r3
 8001d74:	ea02 0103 	and.w	r1, r2, r3
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	697a      	ldr	r2, [r7, #20]
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001d82:	bf00      	nop
 8001d84:	371c      	adds	r7, #28
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	03ff63ff 	.word	0x03ff63ff

08001d94 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	2b20      	cmp	r3, #32
 8001da8:	d138      	bne.n	8001e1c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d101      	bne.n	8001db8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001db4:	2302      	movs	r3, #2
 8001db6:	e032      	b.n	8001e1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2224      	movs	r2, #36	; 0x24
 8001dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f022 0201 	bic.w	r2, r2, #1
 8001dd6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001de6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	6819      	ldr	r1, [r3, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	683a      	ldr	r2, [r7, #0]
 8001df4:	430a      	orrs	r2, r1
 8001df6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f042 0201 	orr.w	r2, r2, #1
 8001e06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2220      	movs	r2, #32
 8001e0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	e000      	b.n	8001e1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001e1c:	2302      	movs	r3, #2
  }
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	370c      	adds	r7, #12
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr

08001e2a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	b085      	sub	sp, #20
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
 8001e32:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	2b20      	cmp	r3, #32
 8001e3e:	d139      	bne.n	8001eb4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d101      	bne.n	8001e4e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	e033      	b.n	8001eb6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2201      	movs	r2, #1
 8001e52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2224      	movs	r2, #36	; 0x24
 8001e5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f022 0201 	bic.w	r2, r2, #1
 8001e6c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e7c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	021b      	lsls	r3, r3, #8
 8001e82:	68fa      	ldr	r2, [r7, #12]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	68fa      	ldr	r2, [r7, #12]
 8001e8e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f042 0201 	orr.w	r2, r2, #1
 8001e9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2220      	movs	r2, #32
 8001ea4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	e000      	b.n	8001eb6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001eb4:	2302      	movs	r3, #2
  }
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3714      	adds	r7, #20
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr

08001ec2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b084      	sub	sp, #16
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	691b      	ldr	r3, [r3, #16]
 8001ed8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	f003 0302 	and.w	r3, r3, #2
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d020      	beq.n	8001f26 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d01b      	beq.n	8001f26 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f06f 0202 	mvn.w	r2, #2
 8001ef6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	f003 0303 	and.w	r3, r3, #3
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d003      	beq.n	8001f14 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f000 f8e4 	bl	80020da <HAL_TIM_IC_CaptureCallback>
 8001f12:	e005      	b.n	8001f20 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f000 f8d6 	bl	80020c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 f8e7 	bl	80020ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	f003 0304 	and.w	r3, r3, #4
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d020      	beq.n	8001f72 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f003 0304 	and.w	r3, r3, #4
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d01b      	beq.n	8001f72 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f06f 0204 	mvn.w	r2, #4
 8001f42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2202      	movs	r2, #2
 8001f48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d003      	beq.n	8001f60 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f000 f8be 	bl	80020da <HAL_TIM_IC_CaptureCallback>
 8001f5e:	e005      	b.n	8001f6c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f000 f8b0 	bl	80020c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f000 f8c1 	bl	80020ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	f003 0308 	and.w	r3, r3, #8
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d020      	beq.n	8001fbe <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f003 0308 	and.w	r3, r3, #8
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d01b      	beq.n	8001fbe <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f06f 0208 	mvn.w	r2, #8
 8001f8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2204      	movs	r2, #4
 8001f94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	69db      	ldr	r3, [r3, #28]
 8001f9c:	f003 0303 	and.w	r3, r3, #3
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d003      	beq.n	8001fac <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f000 f898 	bl	80020da <HAL_TIM_IC_CaptureCallback>
 8001faa:	e005      	b.n	8001fb8 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f000 f88a 	bl	80020c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 f89b 	bl	80020ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	f003 0310 	and.w	r3, r3, #16
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d020      	beq.n	800200a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f003 0310 	and.w	r3, r3, #16
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d01b      	beq.n	800200a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f06f 0210 	mvn.w	r2, #16
 8001fda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2208      	movs	r2, #8
 8001fe0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	69db      	ldr	r3, [r3, #28]
 8001fe8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d003      	beq.n	8001ff8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f000 f872 	bl	80020da <HAL_TIM_IC_CaptureCallback>
 8001ff6:	e005      	b.n	8002004 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f000 f864 	bl	80020c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f000 f875 	bl	80020ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	f003 0301 	and.w	r3, r3, #1
 8002010:	2b00      	cmp	r3, #0
 8002012:	d00c      	beq.n	800202e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	2b00      	cmp	r3, #0
 800201c:	d007      	beq.n	800202e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f06f 0201 	mvn.w	r2, #1
 8002026:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f7fe fdbd 	bl	8000ba8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002034:	2b00      	cmp	r3, #0
 8002036:	d00c      	beq.n	8002052 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800203e:	2b00      	cmp	r3, #0
 8002040:	d007      	beq.n	8002052 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800204a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f000 f86c 	bl	800212a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002058:	2b00      	cmp	r3, #0
 800205a:	d00c      	beq.n	8002076 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002062:	2b00      	cmp	r3, #0
 8002064:	d007      	beq.n	8002076 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800206e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f000 f864 	bl	800213e <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800207c:	2b00      	cmp	r3, #0
 800207e:	d00c      	beq.n	800209a <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002086:	2b00      	cmp	r3, #0
 8002088:	d007      	beq.n	800209a <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002092:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f000 f834 	bl	8002102 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	f003 0320 	and.w	r3, r3, #32
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d00c      	beq.n	80020be <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f003 0320 	and.w	r3, r3, #32
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d007      	beq.n	80020be <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f06f 0220 	mvn.w	r2, #32
 80020b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f000 f82c 	bl	8002116 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020be:	bf00      	nop
 80020c0:	3710      	adds	r7, #16
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020c6:	b480      	push	{r7}
 80020c8:	b083      	sub	sp, #12
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020ce:	bf00      	nop
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020da:	b480      	push	{r7}
 80020dc:	b083      	sub	sp, #12
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020e2:	bf00      	nop
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr

080020ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020ee:	b480      	push	{r7}
 80020f0:	b083      	sub	sp, #12
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020f6:	bf00      	nop
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002102:	b480      	push	{r7}
 8002104:	b083      	sub	sp, #12
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800210a:	bf00      	nop
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr

08002116 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002116:	b480      	push	{r7}
 8002118:	b083      	sub	sp, #12
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800211e:	bf00      	nop
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr

0800212a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800212a:	b480      	push	{r7}
 800212c:	b083      	sub	sp, #12
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002132:	bf00      	nop
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr

0800213e <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800213e:	b480      	push	{r7}
 8002140:	b083      	sub	sp, #12
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002146:	bf00      	nop
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
	...

08002154 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800215c:	4b05      	ldr	r3, [pc, #20]	; (8002174 <LL_EXTI_EnableIT_0_31+0x20>)
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	4904      	ldr	r1, [pc, #16]	; (8002174 <LL_EXTI_EnableIT_0_31+0x20>)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4313      	orrs	r3, r2
 8002166:	600b      	str	r3, [r1, #0]
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr
 8002174:	40010400 	.word	0x40010400

08002178 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002180:	4b05      	ldr	r3, [pc, #20]	; (8002198 <LL_EXTI_EnableIT_32_63+0x20>)
 8002182:	6a1a      	ldr	r2, [r3, #32]
 8002184:	4904      	ldr	r1, [pc, #16]	; (8002198 <LL_EXTI_EnableIT_32_63+0x20>)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4313      	orrs	r3, r2
 800218a:	620b      	str	r3, [r1, #32]
}
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr
 8002198:	40010400 	.word	0x40010400

0800219c <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80021a4:	4b06      	ldr	r3, [pc, #24]	; (80021c0 <LL_EXTI_DisableIT_0_31+0x24>)
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	43db      	mvns	r3, r3
 80021ac:	4904      	ldr	r1, [pc, #16]	; (80021c0 <LL_EXTI_DisableIT_0_31+0x24>)
 80021ae:	4013      	ands	r3, r2
 80021b0:	600b      	str	r3, [r1, #0]
}
 80021b2:	bf00      	nop
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	40010400 	.word	0x40010400

080021c4 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 80021cc:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <LL_EXTI_DisableIT_32_63+0x24>)
 80021ce:	6a1a      	ldr	r2, [r3, #32]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	43db      	mvns	r3, r3
 80021d4:	4904      	ldr	r1, [pc, #16]	; (80021e8 <LL_EXTI_DisableIT_32_63+0x24>)
 80021d6:	4013      	ands	r3, r2
 80021d8:	620b      	str	r3, [r1, #32]
}
 80021da:	bf00      	nop
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	40010400 	.word	0x40010400

080021ec <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 80021f4:	4b05      	ldr	r3, [pc, #20]	; (800220c <LL_EXTI_EnableEvent_0_31+0x20>)
 80021f6:	685a      	ldr	r2, [r3, #4]
 80021f8:	4904      	ldr	r1, [pc, #16]	; (800220c <LL_EXTI_EnableEvent_0_31+0x20>)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	604b      	str	r3, [r1, #4]

}
 8002200:	bf00      	nop
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr
 800220c:	40010400 	.word	0x40010400

08002210 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8002218:	4b05      	ldr	r3, [pc, #20]	; (8002230 <LL_EXTI_EnableEvent_32_63+0x20>)
 800221a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800221c:	4904      	ldr	r1, [pc, #16]	; (8002230 <LL_EXTI_EnableEvent_32_63+0x20>)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4313      	orrs	r3, r2
 8002222:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr
 8002230:	40010400 	.word	0x40010400

08002234 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800223c:	4b06      	ldr	r3, [pc, #24]	; (8002258 <LL_EXTI_DisableEvent_0_31+0x24>)
 800223e:	685a      	ldr	r2, [r3, #4]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	43db      	mvns	r3, r3
 8002244:	4904      	ldr	r1, [pc, #16]	; (8002258 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002246:	4013      	ands	r3, r2
 8002248:	604b      	str	r3, [r1, #4]
}
 800224a:	bf00      	nop
 800224c:	370c      	adds	r7, #12
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	40010400 	.word	0x40010400

0800225c <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8002264:	4b06      	ldr	r3, [pc, #24]	; (8002280 <LL_EXTI_DisableEvent_32_63+0x24>)
 8002266:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	43db      	mvns	r3, r3
 800226c:	4904      	ldr	r1, [pc, #16]	; (8002280 <LL_EXTI_DisableEvent_32_63+0x24>)
 800226e:	4013      	ands	r3, r2
 8002270:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002272:	bf00      	nop
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	40010400 	.word	0x40010400

08002284 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800228c:	4b05      	ldr	r3, [pc, #20]	; (80022a4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800228e:	689a      	ldr	r2, [r3, #8]
 8002290:	4904      	ldr	r1, [pc, #16]	; (80022a4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4313      	orrs	r3, r2
 8002296:	608b      	str	r3, [r1, #8]

}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr
 80022a4:	40010400 	.word	0x40010400

080022a8 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80022b0:	4b05      	ldr	r3, [pc, #20]	; (80022c8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80022b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022b4:	4904      	ldr	r1, [pc, #16]	; (80022c8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	628b      	str	r3, [r1, #40]	; 0x28
}
 80022bc:	bf00      	nop
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr
 80022c8:	40010400 	.word	0x40010400

080022cc <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80022d4:	4b06      	ldr	r3, [pc, #24]	; (80022f0 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80022d6:	689a      	ldr	r2, [r3, #8]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	43db      	mvns	r3, r3
 80022dc:	4904      	ldr	r1, [pc, #16]	; (80022f0 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80022de:	4013      	ands	r3, r2
 80022e0:	608b      	str	r3, [r1, #8]

}
 80022e2:	bf00      	nop
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	40010400 	.word	0x40010400

080022f4 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 80022fc:	4b06      	ldr	r3, [pc, #24]	; (8002318 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80022fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	43db      	mvns	r3, r3
 8002304:	4904      	ldr	r1, [pc, #16]	; (8002318 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8002306:	4013      	ands	r3, r2
 8002308:	628b      	str	r3, [r1, #40]	; 0x28
}
 800230a:	bf00      	nop
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	40010400 	.word	0x40010400

0800231c <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8002324:	4b05      	ldr	r3, [pc, #20]	; (800233c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002326:	68da      	ldr	r2, [r3, #12]
 8002328:	4904      	ldr	r1, [pc, #16]	; (800233c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4313      	orrs	r3, r2
 800232e:	60cb      	str	r3, [r1, #12]
}
 8002330:	bf00      	nop
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr
 800233c:	40010400 	.word	0x40010400

08002340 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8002348:	4b05      	ldr	r3, [pc, #20]	; (8002360 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800234a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800234c:	4904      	ldr	r1, [pc, #16]	; (8002360 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4313      	orrs	r3, r2
 8002352:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	40010400 	.word	0x40010400

08002364 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800236c:	4b06      	ldr	r3, [pc, #24]	; (8002388 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800236e:	68da      	ldr	r2, [r3, #12]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	43db      	mvns	r3, r3
 8002374:	4904      	ldr	r1, [pc, #16]	; (8002388 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002376:	4013      	ands	r3, r2
 8002378:	60cb      	str	r3, [r1, #12]
}
 800237a:	bf00      	nop
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	40010400 	.word	0x40010400

0800238c <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8002394:	4b06      	ldr	r3, [pc, #24]	; (80023b0 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8002396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	43db      	mvns	r3, r3
 800239c:	4904      	ldr	r1, [pc, #16]	; (80023b0 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800239e:	4013      	ands	r3, r2
 80023a0:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80023a2:	bf00      	nop
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	40010400 	.word	0x40010400

080023b4 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other value : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 80023bc:	2300      	movs	r3, #0
 80023be:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	7a1b      	ldrb	r3, [r3, #8]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	f000 80d0 	beq.w	800256a <LL_EXTI_Init+0x1b6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d063      	beq.n	800249a <LL_EXTI_Init+0xe6>
    {
      switch (EXTI_InitStruct->Mode)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	7a5b      	ldrb	r3, [r3, #9]
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d01c      	beq.n	8002414 <LL_EXTI_Init+0x60>
 80023da:	2b02      	cmp	r3, #2
 80023dc:	dc25      	bgt.n	800242a <LL_EXTI_Init+0x76>
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d002      	beq.n	80023e8 <LL_EXTI_Init+0x34>
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d00b      	beq.n	80023fe <LL_EXTI_Init+0x4a>
 80023e6:	e020      	b.n	800242a <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7ff ff21 	bl	8002234 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7ff feac 	bl	8002154 <LL_EXTI_EnableIT_0_31>
          break;
 80023fc:	e018      	b.n	8002430 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4618      	mov	r0, r3
 8002404:	f7ff feca 	bl	800219c <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff feed 	bl	80021ec <LL_EXTI_EnableEvent_0_31>
          break;
 8002412:	e00d      	b.n	8002430 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff fe9b 	bl	8002154 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff fee2 	bl	80021ec <LL_EXTI_EnableEvent_0_31>
          break;
 8002428:	e002      	b.n	8002430 <LL_EXTI_Init+0x7c>
        default:
          status = 0x01u;
 800242a:	2301      	movs	r3, #1
 800242c:	60fb      	str	r3, [r7, #12]
          break;
 800242e:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	7a9b      	ldrb	r3, [r3, #10]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d030      	beq.n	800249a <LL_EXTI_Init+0xe6>
      {
        switch (EXTI_InitStruct->Trigger)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	7a9b      	ldrb	r3, [r3, #10]
 800243c:	2b03      	cmp	r3, #3
 800243e:	d01c      	beq.n	800247a <LL_EXTI_Init+0xc6>
 8002440:	2b03      	cmp	r3, #3
 8002442:	dc25      	bgt.n	8002490 <LL_EXTI_Init+0xdc>
 8002444:	2b01      	cmp	r3, #1
 8002446:	d002      	beq.n	800244e <LL_EXTI_Init+0x9a>
 8002448:	2b02      	cmp	r3, #2
 800244a:	d00b      	beq.n	8002464 <LL_EXTI_Init+0xb0>
 800244c:	e020      	b.n	8002490 <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4618      	mov	r0, r3
 8002454:	f7ff ff86 	bl	8002364 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4618      	mov	r0, r3
 800245e:	f7ff ff11 	bl	8002284 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8002462:	e01a      	b.n	800249a <LL_EXTI_Init+0xe6>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4618      	mov	r0, r3
 800246a:	f7ff ff2f 	bl	80022cc <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4618      	mov	r0, r3
 8002474:	f7ff ff52 	bl	800231c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002478:	e00f      	b.n	800249a <LL_EXTI_Init+0xe6>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4618      	mov	r0, r3
 8002480:	f7ff ff00 	bl	8002284 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4618      	mov	r0, r3
 800248a:	f7ff ff47 	bl	800231c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800248e:	e004      	b.n	800249a <LL_EXTI_Init+0xe6>
          default:
            status |= 0x02u;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f043 0302 	orr.w	r3, r3, #2
 8002496:	60fb      	str	r3, [r7, #12]
            break;
 8002498:	bf00      	nop
        }
      }
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d077      	beq.n	8002592 <LL_EXTI_Init+0x1de>
    {
      switch (EXTI_InitStruct->Mode)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	7a5b      	ldrb	r3, [r3, #9]
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d01c      	beq.n	80024e4 <LL_EXTI_Init+0x130>
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	dc25      	bgt.n	80024fa <LL_EXTI_Init+0x146>
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d002      	beq.n	80024b8 <LL_EXTI_Init+0x104>
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d00b      	beq.n	80024ce <LL_EXTI_Init+0x11a>
 80024b6:	e020      	b.n	80024fa <LL_EXTI_Init+0x146>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	4618      	mov	r0, r3
 80024be:	f7ff fecd 	bl	800225c <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff fe56 	bl	8002178 <LL_EXTI_EnableIT_32_63>
          break;
 80024cc:	e01a      	b.n	8002504 <LL_EXTI_Init+0x150>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7ff fe76 	bl	80021c4 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	4618      	mov	r0, r3
 80024de:	f7ff fe97 	bl	8002210 <LL_EXTI_EnableEvent_32_63>
          break;
 80024e2:	e00f      	b.n	8002504 <LL_EXTI_Init+0x150>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff fe45 	bl	8002178 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7ff fe8c 	bl	8002210 <LL_EXTI_EnableEvent_32_63>
          break;
 80024f8:	e004      	b.n	8002504 <LL_EXTI_Init+0x150>
        default:
          status |= 0x04u;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f043 0304 	orr.w	r3, r3, #4
 8002500:	60fb      	str	r3, [r7, #12]
          break;
 8002502:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	7a9b      	ldrb	r3, [r3, #10]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d042      	beq.n	8002592 <LL_EXTI_Init+0x1de>
      {
        switch (EXTI_InitStruct->Trigger)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	7a9b      	ldrb	r3, [r3, #10]
 8002510:	2b03      	cmp	r3, #3
 8002512:	d01c      	beq.n	800254e <LL_EXTI_Init+0x19a>
 8002514:	2b03      	cmp	r3, #3
 8002516:	dc25      	bgt.n	8002564 <LL_EXTI_Init+0x1b0>
 8002518:	2b01      	cmp	r3, #1
 800251a:	d002      	beq.n	8002522 <LL_EXTI_Init+0x16e>
 800251c:	2b02      	cmp	r3, #2
 800251e:	d00b      	beq.n	8002538 <LL_EXTI_Init+0x184>
 8002520:	e020      	b.n	8002564 <LL_EXTI_Init+0x1b0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	4618      	mov	r0, r3
 8002528:	f7ff ff30 	bl	800238c <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	4618      	mov	r0, r3
 8002532:	f7ff feb9 	bl	80022a8 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8002536:	e02c      	b.n	8002592 <LL_EXTI_Init+0x1de>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	4618      	mov	r0, r3
 800253e:	f7ff fed9 	bl	80022f4 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	4618      	mov	r0, r3
 8002548:	f7ff fefa 	bl	8002340 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800254c:	e021      	b.n	8002592 <LL_EXTI_Init+0x1de>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	4618      	mov	r0, r3
 8002554:	f7ff fea8 	bl	80022a8 <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	4618      	mov	r0, r3
 800255e:	f7ff feef 	bl	8002340 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8002562:	e016      	b.n	8002592 <LL_EXTI_Init+0x1de>
          default:
            status = ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	60fb      	str	r3, [r7, #12]
            break;
 8002568:	e013      	b.n	8002592 <LL_EXTI_Init+0x1de>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4618      	mov	r0, r3
 8002570:	f7ff fe14 	bl	800219c <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff fe5b 	bl	8002234 <LL_EXTI_DisableEvent_0_31>
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	4618      	mov	r0, r3
 8002584:	f7ff fe1e 	bl	80021c4 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff fe65 	bl	800225c <LL_EXTI_DisableEvent_32_63>
  }

  return status;
 8002592:	68fb      	ldr	r3, [r7, #12]
}
 8002594:	4618      	mov	r0, r3
 8002596:	3710      	adds	r7, #16
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800259c:	b480      	push	{r7}
 800259e:	b08b      	sub	sp, #44	; 0x2c
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	fa93 f3a3 	rbit	r3, r3
 80025b6:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 80025c2:	2320      	movs	r3, #32
 80025c4:	e003      	b.n	80025ce <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	fab3 f383 	clz	r3, r3
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	2103      	movs	r1, #3
 80025d2:	fa01 f303 	lsl.w	r3, r1, r3
 80025d6:	43db      	mvns	r3, r3
 80025d8:	401a      	ands	r2, r3
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025de:	6a3b      	ldr	r3, [r7, #32]
 80025e0:	fa93 f3a3 	rbit	r3, r3
 80025e4:	61fb      	str	r3, [r7, #28]
  return result;
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80025ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d101      	bne.n	80025f4 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80025f0:	2320      	movs	r3, #32
 80025f2:	e003      	b.n	80025fc <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80025f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f6:	fab3 f383 	clz	r3, r3
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	6879      	ldr	r1, [r7, #4]
 8002600:	fa01 f303 	lsl.w	r3, r1, r3
 8002604:	431a      	orrs	r2, r3
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	601a      	str	r2, [r3, #0]
}
 800260a:	bf00      	nop
 800260c:	372c      	adds	r7, #44	; 0x2c
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr

08002616 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8002616:	b480      	push	{r7}
 8002618:	b085      	sub	sp, #20
 800261a:	af00      	add	r7, sp, #0
 800261c:	60f8      	str	r0, [r7, #12]
 800261e:	60b9      	str	r1, [r7, #8]
 8002620:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	685a      	ldr	r2, [r3, #4]
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	43db      	mvns	r3, r3
 800262a:	401a      	ands	r2, r3
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	6879      	ldr	r1, [r7, #4]
 8002630:	fb01 f303 	mul.w	r3, r1, r3
 8002634:	431a      	orrs	r2, r3
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	605a      	str	r2, [r3, #4]
}
 800263a:	bf00      	nop
 800263c:	3714      	adds	r7, #20
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr

08002646 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8002646:	b480      	push	{r7}
 8002648:	b08b      	sub	sp, #44	; 0x2c
 800264a:	af00      	add	r7, sp, #0
 800264c:	60f8      	str	r0, [r7, #12]
 800264e:	60b9      	str	r1, [r7, #8]
 8002650:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	689a      	ldr	r2, [r3, #8]
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	fa93 f3a3 	rbit	r3, r3
 8002660:	613b      	str	r3, [r7, #16]
  return result;
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d101      	bne.n	8002670 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800266c:	2320      	movs	r3, #32
 800266e:	e003      	b.n	8002678 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	fab3 f383 	clz	r3, r3
 8002676:	b2db      	uxtb	r3, r3
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	2103      	movs	r1, #3
 800267c:	fa01 f303 	lsl.w	r3, r1, r3
 8002680:	43db      	mvns	r3, r3
 8002682:	401a      	ands	r2, r3
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002688:	6a3b      	ldr	r3, [r7, #32]
 800268a:	fa93 f3a3 	rbit	r3, r3
 800268e:	61fb      	str	r3, [r7, #28]
  return result;
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800269a:	2320      	movs	r3, #32
 800269c:	e003      	b.n	80026a6 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800269e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a0:	fab3 f383 	clz	r3, r3
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	6879      	ldr	r1, [r7, #4]
 80026aa:	fa01 f303 	lsl.w	r3, r1, r3
 80026ae:	431a      	orrs	r2, r3
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80026b4:	bf00      	nop
 80026b6:	372c      	adds	r7, #44	; 0x2c
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b08b      	sub	sp, #44	; 0x2c
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	68da      	ldr	r2, [r3, #12]
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	fa93 f3a3 	rbit	r3, r3
 80026da:	613b      	str	r3, [r7, #16]
  return result;
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d101      	bne.n	80026ea <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80026e6:	2320      	movs	r3, #32
 80026e8:	e003      	b.n	80026f2 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	fab3 f383 	clz	r3, r3
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	2103      	movs	r1, #3
 80026f6:	fa01 f303 	lsl.w	r3, r1, r3
 80026fa:	43db      	mvns	r3, r3
 80026fc:	401a      	ands	r2, r3
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002702:	6a3b      	ldr	r3, [r7, #32]
 8002704:	fa93 f3a3 	rbit	r3, r3
 8002708:	61fb      	str	r3, [r7, #28]
  return result;
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800270e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002710:	2b00      	cmp	r3, #0
 8002712:	d101      	bne.n	8002718 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8002714:	2320      	movs	r3, #32
 8002716:	e003      	b.n	8002720 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8002718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271a:	fab3 f383 	clz	r3, r3
 800271e:	b2db      	uxtb	r3, r3
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	6879      	ldr	r1, [r7, #4]
 8002724:	fa01 f303 	lsl.w	r3, r1, r3
 8002728:	431a      	orrs	r2, r3
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	60da      	str	r2, [r3, #12]
}
 800272e:	bf00      	nop
 8002730:	372c      	adds	r7, #44	; 0x2c
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr

0800273a <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800273a:	b480      	push	{r7}
 800273c:	b08b      	sub	sp, #44	; 0x2c
 800273e:	af00      	add	r7, sp, #0
 8002740:	60f8      	str	r0, [r7, #12]
 8002742:	60b9      	str	r1, [r7, #8]
 8002744:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6a1a      	ldr	r2, [r3, #32]
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	fa93 f3a3 	rbit	r3, r3
 8002754:	613b      	str	r3, [r7, #16]
  return result;
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d101      	bne.n	8002764 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8002760:	2320      	movs	r3, #32
 8002762:	e003      	b.n	800276c <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	fab3 f383 	clz	r3, r3
 800276a:	b2db      	uxtb	r3, r3
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	210f      	movs	r1, #15
 8002770:	fa01 f303 	lsl.w	r3, r1, r3
 8002774:	43db      	mvns	r3, r3
 8002776:	401a      	ands	r2, r3
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277c:	6a3b      	ldr	r3, [r7, #32]
 800277e:	fa93 f3a3 	rbit	r3, r3
 8002782:	61fb      	str	r3, [r7, #28]
  return result;
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278a:	2b00      	cmp	r3, #0
 800278c:	d101      	bne.n	8002792 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800278e:	2320      	movs	r3, #32
 8002790:	e003      	b.n	800279a <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8002792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002794:	fab3 f383 	clz	r3, r3
 8002798:	b2db      	uxtb	r3, r3
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	6879      	ldr	r1, [r7, #4]
 800279e:	fa01 f303 	lsl.w	r3, r1, r3
 80027a2:	431a      	orrs	r2, r3
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80027a8:	bf00      	nop
 80027aa:	372c      	adds	r7, #44	; 0x2c
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b08b      	sub	sp, #44	; 0x2c
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	0a1b      	lsrs	r3, r3, #8
 80027c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	fa93 f3a3 	rbit	r3, r3
 80027d0:	613b      	str	r3, [r7, #16]
  return result;
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d101      	bne.n	80027e0 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80027dc:	2320      	movs	r3, #32
 80027de:	e003      	b.n	80027e8 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	fab3 f383 	clz	r3, r3
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	210f      	movs	r1, #15
 80027ec:	fa01 f303 	lsl.w	r3, r1, r3
 80027f0:	43db      	mvns	r3, r3
 80027f2:	401a      	ands	r2, r3
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	0a1b      	lsrs	r3, r3, #8
 80027f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fa:	6a3b      	ldr	r3, [r7, #32]
 80027fc:	fa93 f3a3 	rbit	r3, r3
 8002800:	61fb      	str	r3, [r7, #28]
  return result;
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002808:	2b00      	cmp	r3, #0
 800280a:	d101      	bne.n	8002810 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800280c:	2320      	movs	r3, #32
 800280e:	e003      	b.n	8002818 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8002810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002812:	fab3 f383 	clz	r3, r3
 8002816:	b2db      	uxtb	r3, r3
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	6879      	ldr	r1, [r7, #4]
 800281c:	fa01 f303 	lsl.w	r3, r1, r3
 8002820:	431a      	orrs	r2, r3
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8002826:	bf00      	nop
 8002828:	372c      	adds	r7, #44	; 0x2c
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr

08002832 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	b088      	sub	sp, #32
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
 800283a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	fa93 f3a3 	rbit	r3, r3
 8002848:	60fb      	str	r3, [r7, #12]
  return result;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d101      	bne.n	8002858 <LL_GPIO_Init+0x26>
    return 32U;
 8002854:	2320      	movs	r3, #32
 8002856:	e003      	b.n	8002860 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	fab3 f383 	clz	r3, r3
 800285e:	b2db      	uxtb	r3, r3
 8002860:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002862:	e048      	b.n	80028f6 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	2101      	movs	r1, #1
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	fa01 f303 	lsl.w	r3, r1, r3
 8002870:	4013      	ands	r3, r2
 8002872:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d03a      	beq.n	80028f0 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d003      	beq.n	800288a <LL_GPIO_Init+0x58>
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	2b02      	cmp	r3, #2
 8002888:	d10e      	bne.n	80028a8 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	461a      	mov	r2, r3
 8002890:	69b9      	ldr	r1, [r7, #24]
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f7ff fed7 	bl	8002646 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	6819      	ldr	r1, [r3, #0]
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	461a      	mov	r2, r3
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f7ff feb7 	bl	8002616 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	461a      	mov	r2, r3
 80028ae:	69b9      	ldr	r1, [r7, #24]
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f7ff ff05 	bl	80026c0 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d111      	bne.n	80028e2 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	2bff      	cmp	r3, #255	; 0xff
 80028c2:	d807      	bhi.n	80028d4 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	695b      	ldr	r3, [r3, #20]
 80028c8:	461a      	mov	r2, r3
 80028ca:	69b9      	ldr	r1, [r7, #24]
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f7ff ff34 	bl	800273a <LL_GPIO_SetAFPin_0_7>
 80028d2:	e006      	b.n	80028e2 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	695b      	ldr	r3, [r3, #20]
 80028d8:	461a      	mov	r2, r3
 80028da:	69b9      	ldr	r1, [r7, #24]
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f7ff ff69 	bl	80027b4 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	461a      	mov	r2, r3
 80028e8:	69b9      	ldr	r1, [r7, #24]
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f7ff fe56 	bl	800259c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	3301      	adds	r3, #1
 80028f4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002900:	2b00      	cmp	r3, #0
 8002902:	d1af      	bne.n	8002864 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3720      	adds	r7, #32
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
	...

08002910 <LL_RCC_HSI_IsReady>:
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8002914:	4b07      	ldr	r3, [pc, #28]	; (8002934 <LL_RCC_HSI_IsReady+0x24>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800291c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002920:	d101      	bne.n	8002926 <LL_RCC_HSI_IsReady+0x16>
 8002922:	2301      	movs	r3, #1
 8002924:	e000      	b.n	8002928 <LL_RCC_HSI_IsReady+0x18>
 8002926:	2300      	movs	r3, #0
}
 8002928:	4618      	mov	r0, r3
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	40021000 	.word	0x40021000

08002938 <LL_RCC_LSE_IsReady>:
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 800293c:	4b07      	ldr	r3, [pc, #28]	; (800295c <LL_RCC_LSE_IsReady+0x24>)
 800293e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b02      	cmp	r3, #2
 8002948:	d101      	bne.n	800294e <LL_RCC_LSE_IsReady+0x16>
 800294a:	2301      	movs	r3, #1
 800294c:	e000      	b.n	8002950 <LL_RCC_LSE_IsReady+0x18>
 800294e:	2300      	movs	r3, #0
}
 8002950:	4618      	mov	r0, r3
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	40021000 	.word	0x40021000

08002960 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 8002964:	4b06      	ldr	r3, [pc, #24]	; (8002980 <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0308 	and.w	r3, r3, #8
 800296c:	2b08      	cmp	r3, #8
 800296e:	d101      	bne.n	8002974 <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 8002970:	2301      	movs	r3, #1
 8002972:	e000      	b.n	8002976 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr
 8002980:	40021000 	.word	0x40021000

08002984 <LL_RCC_MSI_GetRange>:
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8002988:	4b04      	ldr	r3, [pc, #16]	; (800299c <LL_RCC_MSI_GetRange+0x18>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002990:	4618      	mov	r0, r3
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	40021000 	.word	0x40021000

080029a0 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 80029a0:	b480      	push	{r7}
 80029a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80029a4:	4b04      	ldr	r3, [pc, #16]	; (80029b8 <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 80029a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029aa:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr
 80029b8:	40021000 	.word	0x40021000

080029bc <LL_RCC_GetSysClkSource>:
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80029c0:	4b04      	ldr	r3, [pc, #16]	; (80029d4 <LL_RCC_GetSysClkSource+0x18>)
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f003 030c 	and.w	r3, r3, #12
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	40021000 	.word	0x40021000

080029d8 <LL_RCC_GetAHBPrescaler>:
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80029dc:	4b04      	ldr	r3, [pc, #16]	; (80029f0 <LL_RCC_GetAHBPrescaler+0x18>)
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	40021000 	.word	0x40021000

080029f4 <LL_RCC_GetAPB1Prescaler>:
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80029f8:	4b04      	ldr	r3, [pc, #16]	; (8002a0c <LL_RCC_GetAPB1Prescaler+0x18>)
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	40021000 	.word	0x40021000

08002a10 <LL_RCC_GetAPB2Prescaler>:
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002a14:	4b04      	ldr	r3, [pc, #16]	; (8002a28 <LL_RCC_GetAPB2Prescaler+0x18>)
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	40021000 	.word	0x40021000

08002a2c <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8002a34:	4b06      	ldr	r3, [pc, #24]	; (8002a50 <LL_RCC_GetUSARTClockSource+0x24>)
 8002a36:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	401a      	ands	r2, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	041b      	lsls	r3, r3, #16
 8002a42:	4313      	orrs	r3, r2
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr
 8002a50:	40021000 	.word	0x40021000

08002a54 <LL_RCC_GetUARTClockSource>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUARTClockSource(uint32_t UARTx)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 8002a5c:	4b06      	ldr	r3, [pc, #24]	; (8002a78 <LL_RCC_GetUARTClockSource+0x24>)
 8002a5e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	401a      	ands	r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	041b      	lsls	r3, r3, #16
 8002a6a:	4313      	orrs	r3, r2
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr
 8002a78:	40021000 	.word	0x40021000

08002a7c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002a80:	4b04      	ldr	r3, [pc, #16]	; (8002a94 <LL_RCC_PLL_GetMainSource+0x18>)
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	f003 0303 	and.w	r3, r3, #3
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	40021000 	.word	0x40021000

08002a98 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86 or 127 depending on devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002a9c:	4b04      	ldr	r3, [pc, #16]	; (8002ab0 <LL_RCC_PLL_GetN+0x18>)
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	0a1b      	lsrs	r3, r3, #8
 8002aa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr
 8002ab0:	40021000 	.word	0x40021000

08002ab4 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_4
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002ab8:	4b04      	ldr	r3, [pc, #16]	; (8002acc <LL_RCC_PLL_GetR+0x18>)
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	40021000 	.word	0x40021000

08002ad0 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_16 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002ad4:	4b04      	ldr	r3, [pc, #16]	; (8002ae8 <LL_RCC_PLL_GetDivider+0x18>)
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	40021000 	.word	0x40021000

08002aec <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8002af4:	2300      	movs	r3, #0
 8002af6:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2b03      	cmp	r3, #3
 8002afc:	d137      	bne.n	8002b6e <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f7ff ff94 	bl	8002a2c <LL_RCC_GetUSARTClockSource>
 8002b04:	4603      	mov	r3, r0
 8002b06:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8002b0a:	2b03      	cmp	r3, #3
 8002b0c:	f200 80b3 	bhi.w	8002c76 <LL_RCC_GetUSARTClockFreq+0x18a>
 8002b10:	a201      	add	r2, pc, #4	; (adr r2, 8002b18 <LL_RCC_GetUSARTClockFreq+0x2c>)
 8002b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b16:	bf00      	nop
 8002b18:	08002b57 	.word	0x08002b57
 8002b1c:	08002b29 	.word	0x08002b29
 8002b20:	08002b31 	.word	0x08002b31
 8002b24:	08002b43 	.word	0x08002b43
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8002b28:	f000 f956 	bl	8002dd8 <RCC_GetSystemClockFreq>
 8002b2c:	60f8      	str	r0, [r7, #12]
        break;
 8002b2e:	e0b3      	b.n	8002c98 <LL_RCC_GetUSARTClockFreq+0x1ac>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8002b30:	f7ff feee 	bl	8002910 <LL_RCC_HSI_IsReady>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	f000 809f 	beq.w	8002c7a <LL_RCC_GetUSARTClockFreq+0x18e>
        {
          usart_frequency = HSI_VALUE;
 8002b3c:	4b59      	ldr	r3, [pc, #356]	; (8002ca4 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8002b3e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002b40:	e09b      	b.n	8002c7a <LL_RCC_GetUSARTClockFreq+0x18e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8002b42:	f7ff fef9 	bl	8002938 <LL_RCC_LSE_IsReady>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	f000 8098 	beq.w	8002c7e <LL_RCC_GetUSARTClockFreq+0x192>
        {
          usart_frequency = LSE_VALUE;
 8002b4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b52:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002b54:	e093      	b.n	8002c7e <LL_RCC_GetUSARTClockFreq+0x192>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002b56:	f000 f93f 	bl	8002dd8 <RCC_GetSystemClockFreq>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f000 f9cb 	bl	8002ef8 <RCC_GetHCLKClockFreq>
 8002b62:	4603      	mov	r3, r0
 8002b64:	4618      	mov	r0, r3
 8002b66:	f000 f9f1 	bl	8002f4c <RCC_GetPCLK2ClockFreq>
 8002b6a:	60f8      	str	r0, [r7, #12]
        break;
 8002b6c:	e094      	b.n	8002c98 <LL_RCC_GetUSARTClockFreq+0x1ac>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2b0c      	cmp	r3, #12
 8002b72:	d146      	bne.n	8002c02 <LL_RCC_GetUSARTClockFreq+0x116>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f7ff ff59 	bl	8002a2c <LL_RCC_GetUSARTClockSource>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8002b80:	2b0c      	cmp	r3, #12
 8002b82:	d87e      	bhi.n	8002c82 <LL_RCC_GetUSARTClockFreq+0x196>
 8002b84:	a201      	add	r2, pc, #4	; (adr r2, 8002b8c <LL_RCC_GetUSARTClockFreq+0xa0>)
 8002b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b8a:	bf00      	nop
 8002b8c:	08002beb 	.word	0x08002beb
 8002b90:	08002c83 	.word	0x08002c83
 8002b94:	08002c83 	.word	0x08002c83
 8002b98:	08002c83 	.word	0x08002c83
 8002b9c:	08002bc1 	.word	0x08002bc1
 8002ba0:	08002c83 	.word	0x08002c83
 8002ba4:	08002c83 	.word	0x08002c83
 8002ba8:	08002c83 	.word	0x08002c83
 8002bac:	08002bc9 	.word	0x08002bc9
 8002bb0:	08002c83 	.word	0x08002c83
 8002bb4:	08002c83 	.word	0x08002c83
 8002bb8:	08002c83 	.word	0x08002c83
 8002bbc:	08002bd9 	.word	0x08002bd9
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8002bc0:	f000 f90a 	bl	8002dd8 <RCC_GetSystemClockFreq>
 8002bc4:	60f8      	str	r0, [r7, #12]
        break;
 8002bc6:	e067      	b.n	8002c98 <LL_RCC_GetUSARTClockFreq+0x1ac>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8002bc8:	f7ff fea2 	bl	8002910 <LL_RCC_HSI_IsReady>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d059      	beq.n	8002c86 <LL_RCC_GetUSARTClockFreq+0x19a>
        {
          usart_frequency = HSI_VALUE;
 8002bd2:	4b34      	ldr	r3, [pc, #208]	; (8002ca4 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8002bd4:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002bd6:	e056      	b.n	8002c86 <LL_RCC_GetUSARTClockFreq+0x19a>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8002bd8:	f7ff feae 	bl	8002938 <LL_RCC_LSE_IsReady>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d053      	beq.n	8002c8a <LL_RCC_GetUSARTClockFreq+0x19e>
        {
          usart_frequency = LSE_VALUE;
 8002be2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002be6:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002be8:	e04f      	b.n	8002c8a <LL_RCC_GetUSARTClockFreq+0x19e>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002bea:	f000 f8f5 	bl	8002dd8 <RCC_GetSystemClockFreq>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f000 f981 	bl	8002ef8 <RCC_GetHCLKClockFreq>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f000 f993 	bl	8002f24 <RCC_GetPCLK1ClockFreq>
 8002bfe:	60f8      	str	r0, [r7, #12]
        break;
 8002c00:	e04a      	b.n	8002c98 <LL_RCC_GetUSARTClockFreq+0x1ac>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2b30      	cmp	r3, #48	; 0x30
 8002c06:	d147      	bne.n	8002c98 <LL_RCC_GetUSARTClockFreq+0x1ac>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f7ff ff0f 	bl	8002a2c <LL_RCC_GetUSARTClockSource>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8002c14:	d01a      	beq.n	8002c4c <LL_RCC_GetUSARTClockFreq+0x160>
 8002c16:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8002c1a:	d838      	bhi.n	8002c8e <LL_RCC_GetUSARTClockFreq+0x1a2>
 8002c1c:	4a22      	ldr	r2, [pc, #136]	; (8002ca8 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d00c      	beq.n	8002c3c <LL_RCC_GetUSARTClockFreq+0x150>
 8002c22:	4a21      	ldr	r2, [pc, #132]	; (8002ca8 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d832      	bhi.n	8002c8e <LL_RCC_GetUSARTClockFreq+0x1a2>
 8002c28:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002c2c:	d017      	beq.n	8002c5e <LL_RCC_GetUSARTClockFreq+0x172>
 8002c2e:	4a1f      	ldr	r2, [pc, #124]	; (8002cac <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d12c      	bne.n	8002c8e <LL_RCC_GetUSARTClockFreq+0x1a2>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 8002c34:	f000 f8d0 	bl	8002dd8 <RCC_GetSystemClockFreq>
 8002c38:	60f8      	str	r0, [r7, #12]
          break;
 8002c3a:	e02d      	b.n	8002c98 <LL_RCC_GetUSARTClockFreq+0x1ac>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 8002c3c:	f7ff fe68 	bl	8002910 <LL_RCC_HSI_IsReady>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d025      	beq.n	8002c92 <LL_RCC_GetUSARTClockFreq+0x1a6>
          {
            usart_frequency = HSI_VALUE;
 8002c46:	4b17      	ldr	r3, [pc, #92]	; (8002ca4 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8002c48:	60fb      	str	r3, [r7, #12]
          }
          break;
 8002c4a:	e022      	b.n	8002c92 <LL_RCC_GetUSARTClockFreq+0x1a6>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 8002c4c:	f7ff fe74 	bl	8002938 <LL_RCC_LSE_IsReady>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d01f      	beq.n	8002c96 <LL_RCC_GetUSARTClockFreq+0x1aa>
          {
            usart_frequency = LSE_VALUE;
 8002c56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c5a:	60fb      	str	r3, [r7, #12]
          }
          break;
 8002c5c:	e01b      	b.n	8002c96 <LL_RCC_GetUSARTClockFreq+0x1aa>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002c5e:	f000 f8bb 	bl	8002dd8 <RCC_GetSystemClockFreq>
 8002c62:	4603      	mov	r3, r0
 8002c64:	4618      	mov	r0, r3
 8002c66:	f000 f947 	bl	8002ef8 <RCC_GetHCLKClockFreq>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f000 f959 	bl	8002f24 <RCC_GetPCLK1ClockFreq>
 8002c72:	60f8      	str	r0, [r7, #12]
          break;
 8002c74:	e010      	b.n	8002c98 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8002c76:	bf00      	nop
 8002c78:	e00e      	b.n	8002c98 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8002c7a:	bf00      	nop
 8002c7c:	e00c      	b.n	8002c98 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8002c7e:	bf00      	nop
 8002c80:	e00a      	b.n	8002c98 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8002c82:	bf00      	nop
 8002c84:	e008      	b.n	8002c98 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8002c86:	bf00      	nop
 8002c88:	e006      	b.n	8002c98 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8002c8a:	bf00      	nop
 8002c8c:	e004      	b.n	8002c98 <LL_RCC_GetUSARTClockFreq+0x1ac>

        default:
          break;
 8002c8e:	bf00      	nop
 8002c90:	e002      	b.n	8002c98 <LL_RCC_GetUSARTClockFreq+0x1ac>
          break;
 8002c92:	bf00      	nop
 8002c94:	e000      	b.n	8002c98 <LL_RCC_GetUSARTClockFreq+0x1ac>
          break;
 8002c96:	bf00      	nop
      }
    }
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 8002c98:	68fb      	ldr	r3, [r7, #12]
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	00f42400 	.word	0x00f42400
 8002ca8:	00300020 	.word	0x00300020
 8002cac:	00300010 	.word	0x00300010

08002cb0 <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(RCC_CCIPR_UART4SEL)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2bc0      	cmp	r3, #192	; 0xc0
 8002cc0:	d13b      	bne.n	8002d3a <LL_RCC_GetUARTClockFreq+0x8a>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f7ff fec6 	bl	8002a54 <LL_RCC_GetUARTClockSource>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8002cce:	d01a      	beq.n	8002d06 <LL_RCC_GetUARTClockFreq+0x56>
 8002cd0:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8002cd4:	d82c      	bhi.n	8002d30 <LL_RCC_GetUARTClockFreq+0x80>
 8002cd6:	4a3b      	ldr	r2, [pc, #236]	; (8002dc4 <LL_RCC_GetUARTClockFreq+0x114>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d00c      	beq.n	8002cf6 <LL_RCC_GetUARTClockFreq+0x46>
 8002cdc:	4a39      	ldr	r2, [pc, #228]	; (8002dc4 <LL_RCC_GetUARTClockFreq+0x114>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d826      	bhi.n	8002d30 <LL_RCC_GetUARTClockFreq+0x80>
 8002ce2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002ce6:	d017      	beq.n	8002d18 <LL_RCC_GetUARTClockFreq+0x68>
 8002ce8:	4a37      	ldr	r2, [pc, #220]	; (8002dc8 <LL_RCC_GetUARTClockFreq+0x118>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d120      	bne.n	8002d30 <LL_RCC_GetUARTClockFreq+0x80>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8002cee:	f000 f873 	bl	8002dd8 <RCC_GetSystemClockFreq>
 8002cf2:	60f8      	str	r0, [r7, #12]
        break;
 8002cf4:	e021      	b.n	8002d3a <LL_RCC_GetUARTClockFreq+0x8a>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8002cf6:	f7ff fe0b 	bl	8002910 <LL_RCC_HSI_IsReady>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d019      	beq.n	8002d34 <LL_RCC_GetUARTClockFreq+0x84>
        {
          uart_frequency = HSI_VALUE;
 8002d00:	4b32      	ldr	r3, [pc, #200]	; (8002dcc <LL_RCC_GetUARTClockFreq+0x11c>)
 8002d02:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002d04:	e016      	b.n	8002d34 <LL_RCC_GetUARTClockFreq+0x84>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8002d06:	f7ff fe17 	bl	8002938 <LL_RCC_LSE_IsReady>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d013      	beq.n	8002d38 <LL_RCC_GetUARTClockFreq+0x88>
        {
          uart_frequency = LSE_VALUE;
 8002d10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d14:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002d16:	e00f      	b.n	8002d38 <LL_RCC_GetUARTClockFreq+0x88>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002d18:	f000 f85e 	bl	8002dd8 <RCC_GetSystemClockFreq>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f000 f8ea 	bl	8002ef8 <RCC_GetHCLKClockFreq>
 8002d24:	4603      	mov	r3, r0
 8002d26:	4618      	mov	r0, r3
 8002d28:	f000 f8fc 	bl	8002f24 <RCC_GetPCLK1ClockFreq>
 8002d2c:	60f8      	str	r0, [r7, #12]
        break;
 8002d2e:	e004      	b.n	8002d3a <LL_RCC_GetUARTClockFreq+0x8a>

      default:
        break;
 8002d30:	bf00      	nop
 8002d32:	e002      	b.n	8002d3a <LL_RCC_GetUARTClockFreq+0x8a>
        break;
 8002d34:	bf00      	nop
 8002d36:	e000      	b.n	8002d3a <LL_RCC_GetUARTClockFreq+0x8a>
        break;
 8002d38:	bf00      	nop
    }
  }
#endif /* RCC_CCIPR_UART4SEL */

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d40:	d13b      	bne.n	8002dba <LL_RCC_GetUARTClockFreq+0x10a>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f7ff fe86 	bl	8002a54 <LL_RCC_GetUARTClockSource>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 8002d4e:	d01a      	beq.n	8002d86 <LL_RCC_GetUARTClockFreq+0xd6>
 8002d50:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 8002d54:	d82c      	bhi.n	8002db0 <LL_RCC_GetUARTClockFreq+0x100>
 8002d56:	4a1e      	ldr	r2, [pc, #120]	; (8002dd0 <LL_RCC_GetUARTClockFreq+0x120>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d00c      	beq.n	8002d76 <LL_RCC_GetUARTClockFreq+0xc6>
 8002d5c:	4a1c      	ldr	r2, [pc, #112]	; (8002dd0 <LL_RCC_GetUARTClockFreq+0x120>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d826      	bhi.n	8002db0 <LL_RCC_GetUARTClockFreq+0x100>
 8002d62:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002d66:	d017      	beq.n	8002d98 <LL_RCC_GetUARTClockFreq+0xe8>
 8002d68:	4a1a      	ldr	r2, [pc, #104]	; (8002dd4 <LL_RCC_GetUARTClockFreq+0x124>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d120      	bne.n	8002db0 <LL_RCC_GetUARTClockFreq+0x100>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8002d6e:	f000 f833 	bl	8002dd8 <RCC_GetSystemClockFreq>
 8002d72:	60f8      	str	r0, [r7, #12]
        break;
 8002d74:	e021      	b.n	8002dba <LL_RCC_GetUARTClockFreq+0x10a>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8002d76:	f7ff fdcb 	bl	8002910 <LL_RCC_HSI_IsReady>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d019      	beq.n	8002db4 <LL_RCC_GetUARTClockFreq+0x104>
        {
          uart_frequency = HSI_VALUE;
 8002d80:	4b12      	ldr	r3, [pc, #72]	; (8002dcc <LL_RCC_GetUARTClockFreq+0x11c>)
 8002d82:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002d84:	e016      	b.n	8002db4 <LL_RCC_GetUARTClockFreq+0x104>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8002d86:	f7ff fdd7 	bl	8002938 <LL_RCC_LSE_IsReady>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d013      	beq.n	8002db8 <LL_RCC_GetUARTClockFreq+0x108>
        {
          uart_frequency = LSE_VALUE;
 8002d90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d94:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002d96:	e00f      	b.n	8002db8 <LL_RCC_GetUARTClockFreq+0x108>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002d98:	f000 f81e 	bl	8002dd8 <RCC_GetSystemClockFreq>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f000 f8aa 	bl	8002ef8 <RCC_GetHCLKClockFreq>
 8002da4:	4603      	mov	r3, r0
 8002da6:	4618      	mov	r0, r3
 8002da8:	f000 f8bc 	bl	8002f24 <RCC_GetPCLK1ClockFreq>
 8002dac:	60f8      	str	r0, [r7, #12]
        break;
 8002dae:	e004      	b.n	8002dba <LL_RCC_GetUARTClockFreq+0x10a>

      default:
        break;
 8002db0:	bf00      	nop
 8002db2:	e002      	b.n	8002dba <LL_RCC_GetUARTClockFreq+0x10a>
        break;
 8002db4:	bf00      	nop
 8002db6:	e000      	b.n	8002dba <LL_RCC_GetUARTClockFreq+0x10a>
        break;
 8002db8:	bf00      	nop
    }
  }
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 8002dba:	68fb      	ldr	r3, [r7, #12]
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3710      	adds	r7, #16
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	00c00080 	.word	0x00c00080
 8002dc8:	00c00040 	.word	0x00c00040
 8002dcc:	00f42400 	.word	0x00f42400
 8002dd0:	03000200 	.word	0x03000200
 8002dd4:	03000100 	.word	0x03000100

08002dd8 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002dde:	f7ff fded 	bl	80029bc <LL_RCC_GetSysClkSource>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b0c      	cmp	r3, #12
 8002de6:	d851      	bhi.n	8002e8c <RCC_GetSystemClockFreq+0xb4>
 8002de8:	a201      	add	r2, pc, #4	; (adr r2, 8002df0 <RCC_GetSystemClockFreq+0x18>)
 8002dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dee:	bf00      	nop
 8002df0:	08002e25 	.word	0x08002e25
 8002df4:	08002e8d 	.word	0x08002e8d
 8002df8:	08002e8d 	.word	0x08002e8d
 8002dfc:	08002e8d 	.word	0x08002e8d
 8002e00:	08002e79 	.word	0x08002e79
 8002e04:	08002e8d 	.word	0x08002e8d
 8002e08:	08002e8d 	.word	0x08002e8d
 8002e0c:	08002e8d 	.word	0x08002e8d
 8002e10:	08002e7f 	.word	0x08002e7f
 8002e14:	08002e8d 	.word	0x08002e8d
 8002e18:	08002e8d 	.word	0x08002e8d
 8002e1c:	08002e8d 	.word	0x08002e8d
 8002e20:	08002e85 	.word	0x08002e85
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002e24:	f7ff fd9c 	bl	8002960 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d111      	bne.n	8002e52 <RCC_GetSystemClockFreq+0x7a>
 8002e2e:	f7ff fd97 	bl	8002960 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d004      	beq.n	8002e42 <RCC_GetSystemClockFreq+0x6a>
 8002e38:	f7ff fda4 	bl	8002984 <LL_RCC_MSI_GetRange>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	0a1b      	lsrs	r3, r3, #8
 8002e40:	e003      	b.n	8002e4a <RCC_GetSystemClockFreq+0x72>
 8002e42:	f7ff fdad 	bl	80029a0 <LL_RCC_MSI_GetRangeAfterStandby>
 8002e46:	4603      	mov	r3, r0
 8002e48:	0a1b      	lsrs	r3, r3, #8
 8002e4a:	4a28      	ldr	r2, [pc, #160]	; (8002eec <RCC_GetSystemClockFreq+0x114>)
 8002e4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e50:	e010      	b.n	8002e74 <RCC_GetSystemClockFreq+0x9c>
 8002e52:	f7ff fd85 	bl	8002960 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d004      	beq.n	8002e66 <RCC_GetSystemClockFreq+0x8e>
 8002e5c:	f7ff fd92 	bl	8002984 <LL_RCC_MSI_GetRange>
 8002e60:	4603      	mov	r3, r0
 8002e62:	091b      	lsrs	r3, r3, #4
 8002e64:	e003      	b.n	8002e6e <RCC_GetSystemClockFreq+0x96>
 8002e66:	f7ff fd9b 	bl	80029a0 <LL_RCC_MSI_GetRangeAfterStandby>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	091b      	lsrs	r3, r3, #4
 8002e6e:	4a1f      	ldr	r2, [pc, #124]	; (8002eec <RCC_GetSystemClockFreq+0x114>)
 8002e70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e74:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8002e76:	e033      	b.n	8002ee0 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8002e78:	4b1d      	ldr	r3, [pc, #116]	; (8002ef0 <RCC_GetSystemClockFreq+0x118>)
 8002e7a:	607b      	str	r3, [r7, #4]
      break;
 8002e7c:	e030      	b.n	8002ee0 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002e7e:	4b1d      	ldr	r3, [pc, #116]	; (8002ef4 <RCC_GetSystemClockFreq+0x11c>)
 8002e80:	607b      	str	r3, [r7, #4]
      break;
 8002e82:	e02d      	b.n	8002ee0 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8002e84:	f000 f876 	bl	8002f74 <RCC_PLL_GetFreqDomain_SYS>
 8002e88:	6078      	str	r0, [r7, #4]
      break;
 8002e8a:	e029      	b.n	8002ee0 <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002e8c:	f7ff fd68 	bl	8002960 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d111      	bne.n	8002eba <RCC_GetSystemClockFreq+0xe2>
 8002e96:	f7ff fd63 	bl	8002960 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d004      	beq.n	8002eaa <RCC_GetSystemClockFreq+0xd2>
 8002ea0:	f7ff fd70 	bl	8002984 <LL_RCC_MSI_GetRange>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	0a1b      	lsrs	r3, r3, #8
 8002ea8:	e003      	b.n	8002eb2 <RCC_GetSystemClockFreq+0xda>
 8002eaa:	f7ff fd79 	bl	80029a0 <LL_RCC_MSI_GetRangeAfterStandby>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	0a1b      	lsrs	r3, r3, #8
 8002eb2:	4a0e      	ldr	r2, [pc, #56]	; (8002eec <RCC_GetSystemClockFreq+0x114>)
 8002eb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eb8:	e010      	b.n	8002edc <RCC_GetSystemClockFreq+0x104>
 8002eba:	f7ff fd51 	bl	8002960 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d004      	beq.n	8002ece <RCC_GetSystemClockFreq+0xf6>
 8002ec4:	f7ff fd5e 	bl	8002984 <LL_RCC_MSI_GetRange>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	091b      	lsrs	r3, r3, #4
 8002ecc:	e003      	b.n	8002ed6 <RCC_GetSystemClockFreq+0xfe>
 8002ece:	f7ff fd67 	bl	80029a0 <LL_RCC_MSI_GetRangeAfterStandby>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	091b      	lsrs	r3, r3, #4
 8002ed6:	4a05      	ldr	r2, [pc, #20]	; (8002eec <RCC_GetSystemClockFreq+0x114>)
 8002ed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002edc:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8002ede:	bf00      	nop
  }

  return frequency;
 8002ee0:	687b      	ldr	r3, [r7, #4]
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3708      	adds	r7, #8
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	0800d7c4 	.word	0x0800d7c4
 8002ef0:	00f42400 	.word	0x00f42400
 8002ef4:	007a1200 	.word	0x007a1200

08002ef8 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002f00:	f7ff fd6a 	bl	80029d8 <LL_RCC_GetAHBPrescaler>
 8002f04:	4603      	mov	r3, r0
 8002f06:	091b      	lsrs	r3, r3, #4
 8002f08:	f003 030f 	and.w	r3, r3, #15
 8002f0c:	4a04      	ldr	r2, [pc, #16]	; (8002f20 <RCC_GetHCLKClockFreq+0x28>)
 8002f0e:	5cd3      	ldrb	r3, [r2, r3]
 8002f10:	461a      	mov	r2, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	40d3      	lsrs	r3, r2
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3708      	adds	r7, #8
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	0800d7ac 	.word	0x0800d7ac

08002f24 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002f2c:	f7ff fd62 	bl	80029f4 <LL_RCC_GetAPB1Prescaler>
 8002f30:	4603      	mov	r3, r0
 8002f32:	0a1b      	lsrs	r3, r3, #8
 8002f34:	4a04      	ldr	r2, [pc, #16]	; (8002f48 <RCC_GetPCLK1ClockFreq+0x24>)
 8002f36:	5cd3      	ldrb	r3, [r2, r3]
 8002f38:	461a      	mov	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	40d3      	lsrs	r3, r2
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3708      	adds	r7, #8
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	0800d7bc 	.word	0x0800d7bc

08002f4c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002f54:	f7ff fd5c 	bl	8002a10 <LL_RCC_GetAPB2Prescaler>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	0adb      	lsrs	r3, r3, #11
 8002f5c:	4a04      	ldr	r2, [pc, #16]	; (8002f70 <RCC_GetPCLK2ClockFreq+0x24>)
 8002f5e:	5cd3      	ldrb	r3, [r2, r3]
 8002f60:	461a      	mov	r2, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	40d3      	lsrs	r3, r2
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3708      	adds	r7, #8
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	0800d7bc 	.word	0x0800d7bc

08002f74 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8002f74:	b590      	push	{r4, r7, lr}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002f7a:	f7ff fd7f 	bl	8002a7c <LL_RCC_PLL_GetMainSource>
 8002f7e:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	2b03      	cmp	r3, #3
 8002f84:	d036      	beq.n	8002ff4 <RCC_PLL_GetFreqDomain_SYS+0x80>
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	2b03      	cmp	r3, #3
 8002f8a:	d836      	bhi.n	8002ffa <RCC_PLL_GetFreqDomain_SYS+0x86>
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d003      	beq.n	8002f9a <RCC_PLL_GetFreqDomain_SYS+0x26>
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d02a      	beq.n	8002fee <RCC_PLL_GetFreqDomain_SYS+0x7a>
 8002f98:	e02f      	b.n	8002ffa <RCC_PLL_GetFreqDomain_SYS+0x86>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002f9a:	f7ff fce1 	bl	8002960 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d111      	bne.n	8002fc8 <RCC_PLL_GetFreqDomain_SYS+0x54>
 8002fa4:	f7ff fcdc 	bl	8002960 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d004      	beq.n	8002fb8 <RCC_PLL_GetFreqDomain_SYS+0x44>
 8002fae:	f7ff fce9 	bl	8002984 <LL_RCC_MSI_GetRange>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	0a1b      	lsrs	r3, r3, #8
 8002fb6:	e003      	b.n	8002fc0 <RCC_PLL_GetFreqDomain_SYS+0x4c>
 8002fb8:	f7ff fcf2 	bl	80029a0 <LL_RCC_MSI_GetRangeAfterStandby>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	0a1b      	lsrs	r3, r3, #8
 8002fc0:	4a2f      	ldr	r2, [pc, #188]	; (8003080 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8002fc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fc6:	e010      	b.n	8002fea <RCC_PLL_GetFreqDomain_SYS+0x76>
 8002fc8:	f7ff fcca 	bl	8002960 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d004      	beq.n	8002fdc <RCC_PLL_GetFreqDomain_SYS+0x68>
 8002fd2:	f7ff fcd7 	bl	8002984 <LL_RCC_MSI_GetRange>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	091b      	lsrs	r3, r3, #4
 8002fda:	e003      	b.n	8002fe4 <RCC_PLL_GetFreqDomain_SYS+0x70>
 8002fdc:	f7ff fce0 	bl	80029a0 <LL_RCC_MSI_GetRangeAfterStandby>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	091b      	lsrs	r3, r3, #4
 8002fe4:	4a26      	ldr	r2, [pc, #152]	; (8003080 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8002fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fea:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8002fec:	e02f      	b.n	800304e <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8002fee:	4b25      	ldr	r3, [pc, #148]	; (8003084 <RCC_PLL_GetFreqDomain_SYS+0x110>)
 8002ff0:	607b      	str	r3, [r7, #4]
      break;
 8002ff2:	e02c      	b.n	800304e <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002ff4:	4b24      	ldr	r3, [pc, #144]	; (8003088 <RCC_PLL_GetFreqDomain_SYS+0x114>)
 8002ff6:	607b      	str	r3, [r7, #4]
      break;
 8002ff8:	e029      	b.n	800304e <RCC_PLL_GetFreqDomain_SYS+0xda>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002ffa:	f7ff fcb1 	bl	8002960 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d111      	bne.n	8003028 <RCC_PLL_GetFreqDomain_SYS+0xb4>
 8003004:	f7ff fcac 	bl	8002960 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d004      	beq.n	8003018 <RCC_PLL_GetFreqDomain_SYS+0xa4>
 800300e:	f7ff fcb9 	bl	8002984 <LL_RCC_MSI_GetRange>
 8003012:	4603      	mov	r3, r0
 8003014:	0a1b      	lsrs	r3, r3, #8
 8003016:	e003      	b.n	8003020 <RCC_PLL_GetFreqDomain_SYS+0xac>
 8003018:	f7ff fcc2 	bl	80029a0 <LL_RCC_MSI_GetRangeAfterStandby>
 800301c:	4603      	mov	r3, r0
 800301e:	0a1b      	lsrs	r3, r3, #8
 8003020:	4a17      	ldr	r2, [pc, #92]	; (8003080 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8003022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003026:	e010      	b.n	800304a <RCC_PLL_GetFreqDomain_SYS+0xd6>
 8003028:	f7ff fc9a 	bl	8002960 <LL_RCC_MSI_IsEnabledRangeSelect>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d004      	beq.n	800303c <RCC_PLL_GetFreqDomain_SYS+0xc8>
 8003032:	f7ff fca7 	bl	8002984 <LL_RCC_MSI_GetRange>
 8003036:	4603      	mov	r3, r0
 8003038:	091b      	lsrs	r3, r3, #4
 800303a:	e003      	b.n	8003044 <RCC_PLL_GetFreqDomain_SYS+0xd0>
 800303c:	f7ff fcb0 	bl	80029a0 <LL_RCC_MSI_GetRangeAfterStandby>
 8003040:	4603      	mov	r3, r0
 8003042:	091b      	lsrs	r3, r3, #4
 8003044:	4a0e      	ldr	r2, [pc, #56]	; (8003080 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8003046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800304a:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 800304c:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800304e:	f7ff fd3f 	bl	8002ad0 <LL_RCC_PLL_GetDivider>
 8003052:	4603      	mov	r3, r0
 8003054:	091b      	lsrs	r3, r3, #4
 8003056:	3301      	adds	r3, #1
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	fbb2 f4f3 	udiv	r4, r2, r3
 800305e:	f7ff fd1b 	bl	8002a98 <LL_RCC_PLL_GetN>
 8003062:	4603      	mov	r3, r0
 8003064:	fb03 f404 	mul.w	r4, r3, r4
 8003068:	f7ff fd24 	bl	8002ab4 <LL_RCC_PLL_GetR>
 800306c:	4603      	mov	r3, r0
 800306e:	0e5b      	lsrs	r3, r3, #25
 8003070:	3301      	adds	r3, #1
 8003072:	005b      	lsls	r3, r3, #1
 8003074:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8003078:	4618      	mov	r0, r3
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	bd90      	pop	{r4, r7, pc}
 8003080:	0800d7c4 	.word	0x0800d7c4
 8003084:	00f42400 	.word	0x00f42400
 8003088:	007a1200 	.word	0x007a1200

0800308c <LL_SPI_IsEnabled>:
  * @rmtoll CR1          SPE           LL_SPI_IsEnabled
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsEnabled(SPI_TypeDef *SPIx)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800309c:	2b40      	cmp	r3, #64	; 0x40
 800309e:	d101      	bne.n	80030a4 <LL_SPI_IsEnabled+0x18>
 80030a0:	2301      	movs	r3, #1
 80030a2:	e000      	b.n	80030a6 <LL_SPI_IsEnabled+0x1a>
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	370c      	adds	r7, #12
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr

080030b2 <LL_SPI_SetRxFIFOThreshold>:
  *         @arg @ref LL_SPI_RX_FIFO_TH_HALF
  *         @arg @ref LL_SPI_RX_FIFO_TH_QUARTER
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetRxFIFOThreshold(SPI_TypeDef *SPIx, uint32_t Threshold)
{
 80030b2:	b480      	push	{r7}
 80030b4:	b083      	sub	sp, #12
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
 80030ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	431a      	orrs	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	605a      	str	r2, [r3, #4]
}
 80030cc:	bf00      	nop
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	461a      	mov	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	611a      	str	r2, [r3, #16]
}
 80030ec:	bf00      	nop
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f7ff ffc0 	bl	800308c <LL_SPI_IsEnabled>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d145      	bne.n	800319e <LL_SPI_Init+0xa6>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800311a:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 800311e:	683a      	ldr	r2, [r7, #0]
 8003120:	6811      	ldr	r1, [r2, #0]
 8003122:	683a      	ldr	r2, [r7, #0]
 8003124:	6852      	ldr	r2, [r2, #4]
 8003126:	4311      	orrs	r1, r2
 8003128:	683a      	ldr	r2, [r7, #0]
 800312a:	68d2      	ldr	r2, [r2, #12]
 800312c:	4311      	orrs	r1, r2
 800312e:	683a      	ldr	r2, [r7, #0]
 8003130:	6912      	ldr	r2, [r2, #16]
 8003132:	4311      	orrs	r1, r2
 8003134:	683a      	ldr	r2, [r7, #0]
 8003136:	6952      	ldr	r2, [r2, #20]
 8003138:	4311      	orrs	r1, r2
 800313a:	683a      	ldr	r2, [r7, #0]
 800313c:	6992      	ldr	r2, [r2, #24]
 800313e:	4311      	orrs	r1, r2
 8003140:	683a      	ldr	r2, [r7, #0]
 8003142:	69d2      	ldr	r2, [r2, #28]
 8003144:	4311      	orrs	r1, r2
 8003146:	683a      	ldr	r2, [r7, #0]
 8003148:	6a12      	ldr	r2, [r2, #32]
 800314a:	430a      	orrs	r2, r1
 800314c:	431a      	orrs	r2, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800315a:	f023 0304 	bic.w	r3, r3, #4
 800315e:	683a      	ldr	r2, [r7, #0]
 8003160:	6891      	ldr	r1, [r2, #8]
 8003162:	683a      	ldr	r2, [r7, #0]
 8003164:	6952      	ldr	r2, [r2, #20]
 8003166:	0c12      	lsrs	r2, r2, #16
 8003168:	430a      	orrs	r2, r1
 800316a:	431a      	orrs	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	605a      	str	r2, [r3, #4]
               SPI_CR2_DS | SPI_CR2_SSOE,
               SPI_InitStruct->DataWidth | (SPI_InitStruct->NSS >> 16U));

    /* Set Rx FIFO to Quarter (1 Byte) in case of 8 Bits mode. No DataPacking by default */
    if (SPI_InitStruct->DataWidth < LL_SPI_DATAWIDTH_9BIT)
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003178:	d204      	bcs.n	8003184 <LL_SPI_Init+0x8c>
    {
      LL_SPI_SetRxFIFOThreshold(SPIx, LL_SPI_RX_FIFO_TH_QUARTER);
 800317a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f7ff ff97 	bl	80030b2 <LL_SPI_SetRxFIFOThreshold>

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	6a1b      	ldr	r3, [r3, #32]
 8003188:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800318c:	d105      	bne.n	800319a <LL_SPI_Init+0xa2>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003192:	4619      	mov	r1, r3
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f7ff ff9f 	bl	80030d8 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 800319a:	2300      	movs	r3, #0
 800319c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800319e:	7bfb      	ldrb	r3, [r7, #15]
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3710      	adds	r7, #16
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(const USART_TypeDef *USARTx)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0301 	and.w	r3, r3, #1
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d101      	bne.n	80031c0 <LL_USART_IsEnabled+0x18>
 80031bc:	2301      	movs	r3, #1
 80031be:	e000      	b.n	80031c2 <LL_USART_IsEnabled+0x1a>
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	370c      	adds	r7, #12
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr

080031ce <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 80031ce:	b480      	push	{r7}
 80031d0:	b083      	sub	sp, #12
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
 80031d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	431a      	orrs	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	605a      	str	r2, [r3, #4]
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	431a      	orrs	r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	609a      	str	r2, [r3, #8]
}
 800320e:	bf00      	nop
 8003210:	370c      	adds	r7, #12
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr

0800321a <LL_USART_SetBaudRate>:
                                          uint32_t BaudRate)
#else
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
#endif /* USART_PRESC_PRESCALER */
{
 800321a:	b480      	push	{r7}
 800321c:	b087      	sub	sp, #28
 800321e:	af00      	add	r7, sp, #0
 8003220:	60f8      	str	r0, [r7, #12]
 8003222:	60b9      	str	r1, [r7, #8]
 8003224:	607a      	str	r2, [r7, #4]
 8003226:	603b      	str	r3, [r7, #0]
  {
    /* Can Not divide per 0 */
  }
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
#else
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800322e:	d11a      	bne.n	8003266 <LL_USART_SetBaudRate+0x4c>
#endif /* USART_PRESC_PRESCALER */
  {
#if defined(USART_PRESC_PRESCALER)
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
#else
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	005a      	lsls	r2, r3, #1
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	085b      	lsrs	r3, r3, #1
 8003238:	441a      	add	r2, r3
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003240:	b29b      	uxth	r3, r3
 8003242:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
    brrtemp = usartdiv & 0xFFF0U;
 8003244:	697a      	ldr	r2, [r7, #20]
 8003246:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 800324a:	4013      	ands	r3, r2
 800324c:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	085b      	lsrs	r3, r3, #1
 8003252:	b29b      	uxth	r3, r3
 8003254:	f003 0307 	and.w	r3, r3, #7
 8003258:	693a      	ldr	r2, [r7, #16]
 800325a:	4313      	orrs	r3, r2
 800325c:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	693a      	ldr	r2, [r7, #16]
 8003262:	60da      	str	r2, [r3, #12]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
#else
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
#endif /* USART_PRESC_PRESCALER */
  }
}
 8003264:	e00a      	b.n	800327c <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	085a      	lsrs	r2, r3, #1
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	441a      	add	r2, r3
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	fbb2 f3f3 	udiv	r3, r2, r3
 8003274:	b29b      	uxth	r3, r3
 8003276:	461a      	mov	r2, r3
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	60da      	str	r2, [r3, #12]
}
 800327c:	bf00      	nop
 800327e:	371c      	adds	r7, #28
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8003296:	2300      	movs	r3, #0
 8003298:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f7ff ff84 	bl	80031a8 <LL_USART_IsEnabled>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d15b      	bne.n	800335e <LL_USART_Init+0xd6>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	4b2f      	ldr	r3, [pc, #188]	; (8003368 <LL_USART_Init+0xe0>)
 80032ac:	4013      	ands	r3, r2
 80032ae:	683a      	ldr	r2, [r7, #0]
 80032b0:	6851      	ldr	r1, [r2, #4]
 80032b2:	683a      	ldr	r2, [r7, #0]
 80032b4:	68d2      	ldr	r2, [r2, #12]
 80032b6:	4311      	orrs	r1, r2
 80032b8:	683a      	ldr	r2, [r7, #0]
 80032ba:	6912      	ldr	r2, [r2, #16]
 80032bc:	4311      	orrs	r1, r2
 80032be:	683a      	ldr	r2, [r7, #0]
 80032c0:	6992      	ldr	r2, [r2, #24]
 80032c2:	430a      	orrs	r2, r1
 80032c4:	431a      	orrs	r2, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	4619      	mov	r1, r3
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f7ff ff7c 	bl	80031ce <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	695b      	ldr	r3, [r3, #20]
 80032da:	4619      	mov	r1, r3
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f7ff ff89 	bl	80031f4 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a21      	ldr	r2, [pc, #132]	; (800336c <LL_USART_Init+0xe4>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d104      	bne.n	80032f4 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80032ea:	2003      	movs	r0, #3
 80032ec:	f7ff fbfe 	bl	8002aec <LL_RCC_GetUSARTClockFreq>
 80032f0:	60b8      	str	r0, [r7, #8]
 80032f2:	e023      	b.n	800333c <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4a1e      	ldr	r2, [pc, #120]	; (8003370 <LL_USART_Init+0xe8>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d104      	bne.n	8003306 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 80032fc:	200c      	movs	r0, #12
 80032fe:	f7ff fbf5 	bl	8002aec <LL_RCC_GetUSARTClockFreq>
 8003302:	60b8      	str	r0, [r7, #8]
 8003304:	e01a      	b.n	800333c <LL_USART_Init+0xb4>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a1a      	ldr	r2, [pc, #104]	; (8003374 <LL_USART_Init+0xec>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d104      	bne.n	8003318 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 800330e:	2030      	movs	r0, #48	; 0x30
 8003310:	f7ff fbec 	bl	8002aec <LL_RCC_GetUSARTClockFreq>
 8003314:	60b8      	str	r0, [r7, #8]
 8003316:	e011      	b.n	800333c <LL_USART_Init+0xb4>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a17      	ldr	r2, [pc, #92]	; (8003378 <LL_USART_Init+0xf0>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d104      	bne.n	800332a <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8003320:	20c0      	movs	r0, #192	; 0xc0
 8003322:	f7ff fcc5 	bl	8002cb0 <LL_RCC_GetUARTClockFreq>
 8003326:	60b8      	str	r0, [r7, #8]
 8003328:	e008      	b.n	800333c <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a13      	ldr	r2, [pc, #76]	; (800337c <LL_USART_Init+0xf4>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d104      	bne.n	800333c <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 8003332:	f44f 7040 	mov.w	r0, #768	; 0x300
 8003336:	f7ff fcbb 	bl	8002cb0 <LL_RCC_GetUARTClockFreq>
 800333a:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
    #endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d00d      	beq.n	800335e <LL_USART_Init+0xd6>
        && (USART_InitStruct->BaudRate != 0U))
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d009      	beq.n	800335e <LL_USART_Init+0xd6>
    {
      status = SUCCESS;
 800334a:	2300      	movs	r3, #0
 800334c:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
#if defined(USART_PRESC_PRESCALER)
                           USART_InitStruct->PrescalerValue,
#endif /* USART_PRESC_PRESCALER */
                           USART_InitStruct->OverSampling,
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8003356:	68b9      	ldr	r1, [r7, #8]
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f7ff ff5e 	bl	800321a <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800335e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003360:	4618      	mov	r0, r3
 8003362:	3710      	adds	r7, #16
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	efff69f3 	.word	0xefff69f3
 800336c:	40013800 	.word	0x40013800
 8003370:	40004400 	.word	0x40004400
 8003374:	40004800 	.word	0x40004800
 8003378:	40004c00 	.word	0x40004c00
 800337c:	40005000 	.word	0x40005000

08003380 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003392:	4a07      	ldr	r2, [pc, #28]	; (80033b0 <LL_InitTick+0x30>)
 8003394:	3b01      	subs	r3, #1
 8003396:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8003398:	4b05      	ldr	r3, [pc, #20]	; (80033b0 <LL_InitTick+0x30>)
 800339a:	2200      	movs	r2, #0
 800339c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800339e:	4b04      	ldr	r3, [pc, #16]	; (80033b0 <LL_InitTick+0x30>)
 80033a0:	2205      	movs	r2, #5
 80033a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80033a4:	bf00      	nop
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr
 80033b0:	e000e010 	.word	0xe000e010

080033b4 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80033bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f7ff ffdd 	bl	8003380 <LL_InitTick>
}
 80033c6:	bf00      	nop
 80033c8:	3708      	adds	r7, #8
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
	...

080033d0 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b085      	sub	sp, #20
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80033d8:	4b10      	ldr	r3, [pc, #64]	; (800341c <LL_mDelay+0x4c>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	60bb      	str	r3, [r7, #8]
  uint32_t tmpDelay = Delay;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	60fb      	str	r3, [r7, #12]

  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80033e2:	68bb      	ldr	r3, [r7, #8]

  /* Add a period to guaranty minimum wait */
  if(tmpDelay < LL_MAX_DELAY)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ea:	d00c      	beq.n	8003406 <LL_mDelay+0x36>
  {
    tmpDelay++;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	3301      	adds	r3, #1
 80033f0:	60fb      	str	r3, [r7, #12]
  }

  while (tmpDelay != 0U)
 80033f2:	e008      	b.n	8003406 <LL_mDelay+0x36>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80033f4:	4b09      	ldr	r3, [pc, #36]	; (800341c <LL_mDelay+0x4c>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d002      	beq.n	8003406 <LL_mDelay+0x36>
    {
      tmpDelay--;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	3b01      	subs	r3, #1
 8003404:	60fb      	str	r3, [r7, #12]
  while (tmpDelay != 0U)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d1f3      	bne.n	80033f4 <LL_mDelay+0x24>
    }
  }
}
 800340c:	bf00      	nop
 800340e:	bf00      	nop
 8003410:	3714      	adds	r7, #20
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	e000e010 	.word	0xe000e010

08003420 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003428:	4a04      	ldr	r2, [pc, #16]	; (800343c <LL_SetSystemCoreClock+0x1c>)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6013      	str	r3, [r2, #0]
}
 800342e:	bf00      	nop
 8003430:	370c      	adds	r7, #12
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	20000000 	.word	0x20000000

08003440 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003444:	4b05      	ldr	r3, [pc, #20]	; (800345c <SysTick_Handler+0x1c>)
 8003446:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003448:	f000 f996 	bl	8003778 <xTaskGetSchedulerState>
 800344c:	4603      	mov	r3, r0
 800344e:	2b01      	cmp	r3, #1
 8003450:	d001      	beq.n	8003456 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003452:	f000 fa01 	bl	8003858 <xPortSysTickHandler>
  }
}
 8003456:	bf00      	nop
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	e000e010 	.word	0xe000e010

08003460 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003460:	b480      	push	{r7}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	689a      	ldr	r2, [r3, #8]
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	683a      	ldr	r2, [r7, #0]
 8003484:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	683a      	ldr	r2, [r7, #0]
 800348a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	1c5a      	adds	r2, r3, #1
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	601a      	str	r2, [r3, #0]
}
 800349c:	bf00      	nop
 800349e:	3714      	adds	r7, #20
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80034a8:	b480      	push	{r7}
 80034aa:	b085      	sub	sp, #20
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	691b      	ldr	r3, [r3, #16]
 80034b4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	6892      	ldr	r2, [r2, #8]
 80034be:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	6852      	ldr	r2, [r2, #4]
 80034c8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d103      	bne.n	80034dc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	689a      	ldr	r2, [r3, #8]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	1e5a      	subs	r2, r3, #1
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3714      	adds	r7, #20
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b086      	sub	sp, #24
 8003500:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003502:	2300      	movs	r3, #0
 8003504:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003506:	4b4f      	ldr	r3, [pc, #316]	; (8003644 <xTaskIncrementTick+0x148>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2b00      	cmp	r3, #0
 800350c:	f040 808f 	bne.w	800362e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003510:	4b4d      	ldr	r3, [pc, #308]	; (8003648 <xTaskIncrementTick+0x14c>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	3301      	adds	r3, #1
 8003516:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003518:	4a4b      	ldr	r2, [pc, #300]	; (8003648 <xTaskIncrementTick+0x14c>)
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d120      	bne.n	8003566 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003524:	4b49      	ldr	r3, [pc, #292]	; (800364c <xTaskIncrementTick+0x150>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00a      	beq.n	8003544 <xTaskIncrementTick+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800352e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003532:	f383 8811 	msr	BASEPRI, r3
 8003536:	f3bf 8f6f 	isb	sy
 800353a:	f3bf 8f4f 	dsb	sy
 800353e:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003540:	bf00      	nop
 8003542:	e7fe      	b.n	8003542 <xTaskIncrementTick+0x46>
 8003544:	4b41      	ldr	r3, [pc, #260]	; (800364c <xTaskIncrementTick+0x150>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	60fb      	str	r3, [r7, #12]
 800354a:	4b41      	ldr	r3, [pc, #260]	; (8003650 <xTaskIncrementTick+0x154>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a3f      	ldr	r2, [pc, #252]	; (800364c <xTaskIncrementTick+0x150>)
 8003550:	6013      	str	r3, [r2, #0]
 8003552:	4a3f      	ldr	r2, [pc, #252]	; (8003650 <xTaskIncrementTick+0x154>)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6013      	str	r3, [r2, #0]
 8003558:	4b3e      	ldr	r3, [pc, #248]	; (8003654 <xTaskIncrementTick+0x158>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	3301      	adds	r3, #1
 800355e:	4a3d      	ldr	r2, [pc, #244]	; (8003654 <xTaskIncrementTick+0x158>)
 8003560:	6013      	str	r3, [r2, #0]
 8003562:	f000 f8e9 	bl	8003738 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003566:	4b3c      	ldr	r3, [pc, #240]	; (8003658 <xTaskIncrementTick+0x15c>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	693a      	ldr	r2, [r7, #16]
 800356c:	429a      	cmp	r2, r3
 800356e:	d349      	bcc.n	8003604 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003570:	4b36      	ldr	r3, [pc, #216]	; (800364c <xTaskIncrementTick+0x150>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d104      	bne.n	8003584 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800357a:	4b37      	ldr	r3, [pc, #220]	; (8003658 <xTaskIncrementTick+0x15c>)
 800357c:	f04f 32ff 	mov.w	r2, #4294967295
 8003580:	601a      	str	r2, [r3, #0]
					break;
 8003582:	e03f      	b.n	8003604 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003584:	4b31      	ldr	r3, [pc, #196]	; (800364c <xTaskIncrementTick+0x150>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	429a      	cmp	r2, r3
 800359a:	d203      	bcs.n	80035a4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800359c:	4a2e      	ldr	r2, [pc, #184]	; (8003658 <xTaskIncrementTick+0x15c>)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80035a2:	e02f      	b.n	8003604 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	3304      	adds	r3, #4
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7ff ff7d 	bl	80034a8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d004      	beq.n	80035c0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	3318      	adds	r3, #24
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7ff ff74 	bl	80034a8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035c4:	4b25      	ldr	r3, [pc, #148]	; (800365c <xTaskIncrementTick+0x160>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d903      	bls.n	80035d4 <xTaskIncrementTick+0xd8>
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d0:	4a22      	ldr	r2, [pc, #136]	; (800365c <xTaskIncrementTick+0x160>)
 80035d2:	6013      	str	r3, [r2, #0]
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035d8:	4613      	mov	r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	4413      	add	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	4a1f      	ldr	r2, [pc, #124]	; (8003660 <xTaskIncrementTick+0x164>)
 80035e2:	441a      	add	r2, r3
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	3304      	adds	r3, #4
 80035e8:	4619      	mov	r1, r3
 80035ea:	4610      	mov	r0, r2
 80035ec:	f7ff ff38 	bl	8003460 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035f4:	4b1b      	ldr	r3, [pc, #108]	; (8003664 <xTaskIncrementTick+0x168>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d3b8      	bcc.n	8003570 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80035fe:	2301      	movs	r3, #1
 8003600:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003602:	e7b5      	b.n	8003570 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003604:	4b17      	ldr	r3, [pc, #92]	; (8003664 <xTaskIncrementTick+0x168>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800360a:	4915      	ldr	r1, [pc, #84]	; (8003660 <xTaskIncrementTick+0x164>)
 800360c:	4613      	mov	r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	4413      	add	r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	440b      	add	r3, r1
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2b01      	cmp	r3, #1
 800361a:	d901      	bls.n	8003620 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800361c:	2301      	movs	r3, #1
 800361e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003620:	4b11      	ldr	r3, [pc, #68]	; (8003668 <xTaskIncrementTick+0x16c>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d007      	beq.n	8003638 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003628:	2301      	movs	r3, #1
 800362a:	617b      	str	r3, [r7, #20]
 800362c:	e004      	b.n	8003638 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800362e:	4b0f      	ldr	r3, [pc, #60]	; (800366c <xTaskIncrementTick+0x170>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	3301      	adds	r3, #1
 8003634:	4a0d      	ldr	r2, [pc, #52]	; (800366c <xTaskIncrementTick+0x170>)
 8003636:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003638:	697b      	ldr	r3, [r7, #20]
}
 800363a:	4618      	mov	r0, r3
 800363c:	3718      	adds	r7, #24
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	200006f0 	.word	0x200006f0
 8003648:	200006d4 	.word	0x200006d4
 800364c:	200006cc 	.word	0x200006cc
 8003650:	200006d0 	.word	0x200006d0
 8003654:	200006e8 	.word	0x200006e8
 8003658:	200006ec 	.word	0x200006ec
 800365c:	200006d8 	.word	0x200006d8
 8003660:	2000026c 	.word	0x2000026c
 8003664:	20000268 	.word	0x20000268
 8003668:	200006e4 	.word	0x200006e4
 800366c:	200006e0 	.word	0x200006e0

08003670 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003670:	b480      	push	{r7}
 8003672:	b085      	sub	sp, #20
 8003674:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003676:	4b2a      	ldr	r3, [pc, #168]	; (8003720 <vTaskSwitchContext+0xb0>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d003      	beq.n	8003686 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800367e:	4b29      	ldr	r3, [pc, #164]	; (8003724 <vTaskSwitchContext+0xb4>)
 8003680:	2201      	movs	r2, #1
 8003682:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003684:	e046      	b.n	8003714 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8003686:	4b27      	ldr	r3, [pc, #156]	; (8003724 <vTaskSwitchContext+0xb4>)
 8003688:	2200      	movs	r2, #0
 800368a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800368c:	4b26      	ldr	r3, [pc, #152]	; (8003728 <vTaskSwitchContext+0xb8>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	60fb      	str	r3, [r7, #12]
 8003692:	e010      	b.n	80036b6 <vTaskSwitchContext+0x46>
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d10a      	bne.n	80036b0 <vTaskSwitchContext+0x40>
	__asm volatile
 800369a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800369e:	f383 8811 	msr	BASEPRI, r3
 80036a2:	f3bf 8f6f 	isb	sy
 80036a6:	f3bf 8f4f 	dsb	sy
 80036aa:	607b      	str	r3, [r7, #4]
}
 80036ac:	bf00      	nop
 80036ae:	e7fe      	b.n	80036ae <vTaskSwitchContext+0x3e>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	3b01      	subs	r3, #1
 80036b4:	60fb      	str	r3, [r7, #12]
 80036b6:	491d      	ldr	r1, [pc, #116]	; (800372c <vTaskSwitchContext+0xbc>)
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	4613      	mov	r3, r2
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	4413      	add	r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	440b      	add	r3, r1
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d0e4      	beq.n	8003694 <vTaskSwitchContext+0x24>
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	4613      	mov	r3, r2
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	4413      	add	r3, r2
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	4a15      	ldr	r2, [pc, #84]	; (800372c <vTaskSwitchContext+0xbc>)
 80036d6:	4413      	add	r3, r2
 80036d8:	60bb      	str	r3, [r7, #8]
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	685a      	ldr	r2, [r3, #4]
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	605a      	str	r2, [r3, #4]
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	685a      	ldr	r2, [r3, #4]
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	3308      	adds	r3, #8
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d104      	bne.n	80036fa <vTaskSwitchContext+0x8a>
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	685a      	ldr	r2, [r3, #4]
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	605a      	str	r2, [r3, #4]
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	4a0b      	ldr	r2, [pc, #44]	; (8003730 <vTaskSwitchContext+0xc0>)
 8003702:	6013      	str	r3, [r2, #0]
 8003704:	4a08      	ldr	r2, [pc, #32]	; (8003728 <vTaskSwitchContext+0xb8>)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800370a:	4b09      	ldr	r3, [pc, #36]	; (8003730 <vTaskSwitchContext+0xc0>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	3354      	adds	r3, #84	; 0x54
 8003710:	4a08      	ldr	r2, [pc, #32]	; (8003734 <vTaskSwitchContext+0xc4>)
 8003712:	6013      	str	r3, [r2, #0]
}
 8003714:	bf00      	nop
 8003716:	3714      	adds	r7, #20
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr
 8003720:	200006f0 	.word	0x200006f0
 8003724:	200006e4 	.word	0x200006e4
 8003728:	200006d8 	.word	0x200006d8
 800372c:	2000026c 	.word	0x2000026c
 8003730:	20000268 	.word	0x20000268
 8003734:	20000088 	.word	0x20000088

08003738 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800373e:	4b0c      	ldr	r3, [pc, #48]	; (8003770 <prvResetNextTaskUnblockTime+0x38>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d104      	bne.n	8003752 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003748:	4b0a      	ldr	r3, [pc, #40]	; (8003774 <prvResetNextTaskUnblockTime+0x3c>)
 800374a:	f04f 32ff 	mov.w	r2, #4294967295
 800374e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003750:	e008      	b.n	8003764 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003752:	4b07      	ldr	r3, [pc, #28]	; (8003770 <prvResetNextTaskUnblockTime+0x38>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	4a04      	ldr	r2, [pc, #16]	; (8003774 <prvResetNextTaskUnblockTime+0x3c>)
 8003762:	6013      	str	r3, [r2, #0]
}
 8003764:	bf00      	nop
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr
 8003770:	200006cc 	.word	0x200006cc
 8003774:	200006ec 	.word	0x200006ec

08003778 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800377e:	4b0b      	ldr	r3, [pc, #44]	; (80037ac <xTaskGetSchedulerState+0x34>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d102      	bne.n	800378c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003786:	2301      	movs	r3, #1
 8003788:	607b      	str	r3, [r7, #4]
 800378a:	e008      	b.n	800379e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800378c:	4b08      	ldr	r3, [pc, #32]	; (80037b0 <xTaskGetSchedulerState+0x38>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d102      	bne.n	800379a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003794:	2302      	movs	r3, #2
 8003796:	607b      	str	r3, [r7, #4]
 8003798:	e001      	b.n	800379e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800379a:	2300      	movs	r3, #0
 800379c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800379e:	687b      	ldr	r3, [r7, #4]
	}
 80037a0:	4618      	mov	r0, r3
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr
 80037ac:	200006dc 	.word	0x200006dc
 80037b0:	200006f0 	.word	0x200006f0
	...

080037c0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80037c0:	4b07      	ldr	r3, [pc, #28]	; (80037e0 <pxCurrentTCBConst2>)
 80037c2:	6819      	ldr	r1, [r3, #0]
 80037c4:	6808      	ldr	r0, [r1, #0]
 80037c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037ca:	f380 8809 	msr	PSP, r0
 80037ce:	f3bf 8f6f 	isb	sy
 80037d2:	f04f 0000 	mov.w	r0, #0
 80037d6:	f380 8811 	msr	BASEPRI, r0
 80037da:	4770      	bx	lr
 80037dc:	f3af 8000 	nop.w

080037e0 <pxCurrentTCBConst2>:
 80037e0:	20000268 	.word	0x20000268
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80037e4:	bf00      	nop
 80037e6:	bf00      	nop
	...

080037f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80037f0:	f3ef 8009 	mrs	r0, PSP
 80037f4:	f3bf 8f6f 	isb	sy
 80037f8:	4b15      	ldr	r3, [pc, #84]	; (8003850 <pxCurrentTCBConst>)
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	f01e 0f10 	tst.w	lr, #16
 8003800:	bf08      	it	eq
 8003802:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003806:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800380a:	6010      	str	r0, [r2, #0]
 800380c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003810:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003814:	f380 8811 	msr	BASEPRI, r0
 8003818:	f3bf 8f4f 	dsb	sy
 800381c:	f3bf 8f6f 	isb	sy
 8003820:	f7ff ff26 	bl	8003670 <vTaskSwitchContext>
 8003824:	f04f 0000 	mov.w	r0, #0
 8003828:	f380 8811 	msr	BASEPRI, r0
 800382c:	bc09      	pop	{r0, r3}
 800382e:	6819      	ldr	r1, [r3, #0]
 8003830:	6808      	ldr	r0, [r1, #0]
 8003832:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003836:	f01e 0f10 	tst.w	lr, #16
 800383a:	bf08      	it	eq
 800383c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003840:	f380 8809 	msr	PSP, r0
 8003844:	f3bf 8f6f 	isb	sy
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	f3af 8000 	nop.w

08003850 <pxCurrentTCBConst>:
 8003850:	20000268 	.word	0x20000268
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003854:	bf00      	nop
 8003856:	bf00      	nop

08003858 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
	__asm volatile
 800385e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003862:	f383 8811 	msr	BASEPRI, r3
 8003866:	f3bf 8f6f 	isb	sy
 800386a:	f3bf 8f4f 	dsb	sy
 800386e:	607b      	str	r3, [r7, #4]
}
 8003870:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003872:	f7ff fe43 	bl	80034fc <xTaskIncrementTick>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d003      	beq.n	8003884 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800387c:	4b06      	ldr	r3, [pc, #24]	; (8003898 <xPortSysTickHandler+0x40>)
 800387e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003882:	601a      	str	r2, [r3, #0]
 8003884:	2300      	movs	r3, #0
 8003886:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800388e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003890:	bf00      	nop
 8003892:	3708      	adds	r7, #8
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	e000ed04 	.word	0xe000ed04

0800389c <main>:
//        apps_common_lr11xx_irq_process( context, IRQ_MASK );
//    }
//
//}
int main(void)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b08a      	sub	sp, #40	; 0x28
 80038a0:	af02      	add	r7, sp, #8
    smtc_hal_mcu_init();
 80038a2:	f001 fdfb 	bl	800549c <smtc_hal_mcu_init>
    apps_common_shield_init();
 80038a6:	f003 f835 	bl	8006914 <apps_common_shield_init>
    uart_init();
 80038aa:	f000 faf5 	bl	8003e98 <uart_init>

    HAL_DBG_TRACE_INFO(" ===== LR11xx Transmitter example =====\n\r");
 80038ae:	488b      	ldr	r0, [pc, #556]	; (8003adc <main+0x240>)
 80038b0:	f000 face 	bl	8003e50 <hal_mcu_trace_print>
 80038b4:	488a      	ldr	r0, [pc, #552]	; (8003ae0 <main+0x244>)
 80038b6:	f000 facb 	bl	8003e50 <hal_mcu_trace_print>
 80038ba:	21da      	movs	r1, #218	; 0xda
 80038bc:	4889      	ldr	r0, [pc, #548]	; (8003ae4 <main+0x248>)
 80038be:	f000 fac7 	bl	8003e50 <hal_mcu_trace_print>
 80038c2:	4889      	ldr	r0, [pc, #548]	; (8003ae8 <main+0x24c>)
 80038c4:	f000 fac4 	bl	8003e50 <hal_mcu_trace_print>
 80038c8:	4888      	ldr	r0, [pc, #544]	; (8003aec <main+0x250>)
 80038ca:	f000 fac1 	bl	8003e50 <hal_mcu_trace_print>
 80038ce:	4888      	ldr	r0, [pc, #544]	; (8003af0 <main+0x254>)
 80038d0:	f000 fabe 	bl	8003e50 <hal_mcu_trace_print>
    // Declare and initialize device context
    stmdev_ctx_t dev_ctx;
    uint8_t whoamI;

    /* Initialize mems driver interface */
    dev_ctx.write_reg = platform_write;
 80038d4:	4b87      	ldr	r3, [pc, #540]	; (8003af4 <main+0x258>)
 80038d6:	60fb      	str	r3, [r7, #12]
    dev_ctx.read_reg = platform_read;
 80038d8:	4b87      	ldr	r3, [pc, #540]	; (8003af8 <main+0x25c>)
 80038da:	613b      	str	r3, [r7, #16]
    dev_ctx.mdelay = platform_delay;
 80038dc:	4b87      	ldr	r3, [pc, #540]	; (8003afc <main+0x260>)
 80038de:	617b      	str	r3, [r7, #20]
    dev_ctx.handle = &SENSOR_BUS;
 80038e0:	4b87      	ldr	r3, [pc, #540]	; (8003b00 <main+0x264>)
 80038e2:	61bb      	str	r3, [r7, #24]

    // Initialize and configure accelerometer
    lis2de12_init_and_configure();
 80038e4:	f002 fc28 	bl	8006138 <lis2de12_init_and_configure>

    apps_common_print_sdk_driver_version();
 80038e8:	f003 fbb6 	bl	8007058 <apps_common_print_sdk_driver_version>

    context = apps_common_lr11xx_get_context();
 80038ec:	f002 ff90 	bl	8006810 <apps_common_lr11xx_get_context>
 80038f0:	4603      	mov	r3, r0
 80038f2:	4a84      	ldr	r2, [pc, #528]	; (8003b04 <main+0x268>)
 80038f4:	6013      	str	r3, [r2, #0]

    apps_common_lr11xx_system_init((void*)context);
 80038f6:	4b83      	ldr	r3, [pc, #524]	; (8003b04 <main+0x268>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4618      	mov	r0, r3
 80038fc:	f003 f89c 	bl	8006a38 <apps_common_lr11xx_system_init>
    apps_common_lr11xx_fetch_and_print_version((void*)context);
 8003900:	4b80      	ldr	r3, [pc, #512]	; (8003b04 <main+0x268>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4618      	mov	r0, r3
 8003906:	f003 fa6b 	bl	8006de0 <apps_common_lr11xx_fetch_and_print_version>
    apps_common_lr11xx_radio_init((void*)context);
 800390a:	4b7e      	ldr	r3, [pc, #504]	; (8003b04 <main+0x268>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4618      	mov	r0, r3
 8003910:	f003 fbca 	bl	80070a8 <apps_common_lr11xx_radio_init>

    ASSERT_LR11XX_RC(lr11xx_system_set_dio_irq_params(context, IRQ_MASK, 0));
 8003914:	4b7b      	ldr	r3, [pc, #492]	; (8003b04 <main+0x268>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2200      	movs	r2, #0
 800391a:	497b      	ldr	r1, [pc, #492]	; (8003b08 <main+0x26c>)
 800391c:	4618      	mov	r0, r3
 800391e:	f005 f9fd 	bl	8008d1c <lr11xx_system_set_dio_irq_params>
 8003922:	4603      	mov	r3, r0
 8003924:	77fb      	strb	r3, [r7, #31]
 8003926:	7ffb      	ldrb	r3, [r7, #31]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d01a      	beq.n	8003962 <main+0xc6>
 800392c:	7ffb      	ldrb	r3, [r7, #31]
 800392e:	2b03      	cmp	r3, #3
 8003930:	d117      	bne.n	8003962 <main+0xc6>
 8003932:	4876      	ldr	r0, [pc, #472]	; (8003b0c <main+0x270>)
 8003934:	f000 fa8c 	bl	8003e50 <hal_mcu_trace_print>
 8003938:	4869      	ldr	r0, [pc, #420]	; (8003ae0 <main+0x244>)
 800393a:	f000 fa89 	bl	8003e50 <hal_mcu_trace_print>
 800393e:	21f1      	movs	r1, #241	; 0xf1
 8003940:	4868      	ldr	r0, [pc, #416]	; (8003ae4 <main+0x248>)
 8003942:	f000 fa85 	bl	8003e50 <hal_mcu_trace_print>
 8003946:	4872      	ldr	r0, [pc, #456]	; (8003b10 <main+0x274>)
 8003948:	f000 fa82 	bl	8003e50 <hal_mcu_trace_print>
 800394c:	4b71      	ldr	r3, [pc, #452]	; (8003b14 <main+0x278>)
 800394e:	9300      	str	r3, [sp, #0]
 8003950:	23f1      	movs	r3, #241	; 0xf1
 8003952:	4a71      	ldr	r2, [pc, #452]	; (8003b18 <main+0x27c>)
 8003954:	4971      	ldr	r1, [pc, #452]	; (8003b1c <main+0x280>)
 8003956:	4872      	ldr	r0, [pc, #456]	; (8003b20 <main+0x284>)
 8003958:	f000 fa7a 	bl	8003e50 <hal_mcu_trace_print>
 800395c:	4864      	ldr	r0, [pc, #400]	; (8003af0 <main+0x254>)
 800395e:	f000 fa77 	bl	8003e50 <hal_mcu_trace_print>
    ASSERT_LR11XX_RC(lr11xx_system_clear_irq_status(context, LR11XX_SYSTEM_IRQ_ALL_MASK));
 8003962:	4b68      	ldr	r3, [pc, #416]	; (8003b04 <main+0x268>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	496f      	ldr	r1, [pc, #444]	; (8003b24 <main+0x288>)
 8003968:	4618      	mov	r0, r3
 800396a:	f005 fa0d 	bl	8008d88 <lr11xx_system_clear_irq_status>
 800396e:	4603      	mov	r3, r0
 8003970:	77bb      	strb	r3, [r7, #30]
 8003972:	7fbb      	ldrb	r3, [r7, #30]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d01a      	beq.n	80039ae <main+0x112>
 8003978:	7fbb      	ldrb	r3, [r7, #30]
 800397a:	2b03      	cmp	r3, #3
 800397c:	d117      	bne.n	80039ae <main+0x112>
 800397e:	4863      	ldr	r0, [pc, #396]	; (8003b0c <main+0x270>)
 8003980:	f000 fa66 	bl	8003e50 <hal_mcu_trace_print>
 8003984:	4856      	ldr	r0, [pc, #344]	; (8003ae0 <main+0x244>)
 8003986:	f000 fa63 	bl	8003e50 <hal_mcu_trace_print>
 800398a:	21f2      	movs	r1, #242	; 0xf2
 800398c:	4855      	ldr	r0, [pc, #340]	; (8003ae4 <main+0x248>)
 800398e:	f000 fa5f 	bl	8003e50 <hal_mcu_trace_print>
 8003992:	485f      	ldr	r0, [pc, #380]	; (8003b10 <main+0x274>)
 8003994:	f000 fa5c 	bl	8003e50 <hal_mcu_trace_print>
 8003998:	4b5e      	ldr	r3, [pc, #376]	; (8003b14 <main+0x278>)
 800399a:	9300      	str	r3, [sp, #0]
 800399c:	23f2      	movs	r3, #242	; 0xf2
 800399e:	4a5e      	ldr	r2, [pc, #376]	; (8003b18 <main+0x27c>)
 80039a0:	495e      	ldr	r1, [pc, #376]	; (8003b1c <main+0x280>)
 80039a2:	485f      	ldr	r0, [pc, #380]	; (8003b20 <main+0x284>)
 80039a4:	f000 fa54 	bl	8003e50 <hal_mcu_trace_print>
 80039a8:	4851      	ldr	r0, [pc, #324]	; (8003af0 <main+0x254>)
 80039aa:	f000 fa51 	bl	8003e50 <hal_mcu_trace_print>

    // Initialize random number generator
    srand(10);
 80039ae:	200a      	movs	r0, #10
 80039b0:	f005 fac6 	bl	8008f40 <srand>
    {
        int16_t data_raw_acceleration[3];
        uint8_t reg_byte;

        // Read output only if new value is available
        lis2de12_xl_data_ready_get(&dev_ctx, &reg_byte);
 80039b4:	1cfa      	adds	r2, r7, #3
 80039b6:	f107 030c 	add.w	r3, r7, #12
 80039ba:	4611      	mov	r1, r2
 80039bc:	4618      	mov	r0, r3
 80039be:	f002 fd57 	bl	8006470 <lis2de12_xl_data_ready_get>

        if (reg_byte)
 80039c2:	78fb      	ldrb	r3, [r7, #3]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	f000 8085 	beq.w	8003ad4 <main+0x238>
        {
            lis2de12_acceleration_raw_get(&dev_ctx, data_raw_acceleration);
 80039ca:	1d3a      	adds	r2, r7, #4
 80039cc:	f107 030c 	add.w	r3, r7, #12
 80039d0:	4611      	mov	r1, r2
 80039d2:	4618      	mov	r0, r3
 80039d4:	f002 fd65 	bl	80064a2 <lis2de12_acceleration_raw_get>

            tx.aceeleration[0] = lis2de12_from_fs2_to_mg(data_raw_acceleration[0]);
 80039d8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80039dc:	4618      	mov	r0, r3
 80039de:	f002 fc67 	bl	80062b0 <lis2de12_from_fs2_to_mg>
 80039e2:	eef0 7a40 	vmov.f32	s15, s0
 80039e6:	4b50      	ldr	r3, [pc, #320]	; (8003b28 <main+0x28c>)
 80039e8:	edc3 7a00 	vstr	s15, [r3]
            tx.aceeleration[1] = lis2de12_from_fs2_to_mg(data_raw_acceleration[1]);
 80039ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039f0:	4618      	mov	r0, r3
 80039f2:	f002 fc5d 	bl	80062b0 <lis2de12_from_fs2_to_mg>
 80039f6:	eef0 7a40 	vmov.f32	s15, s0
 80039fa:	4b4b      	ldr	r3, [pc, #300]	; (8003b28 <main+0x28c>)
 80039fc:	edc3 7a01 	vstr	s15, [r3, #4]
            tx.aceeleration[2] = lis2de12_from_fs2_to_mg(data_raw_acceleration[2]);
 8003a00:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003a04:	4618      	mov	r0, r3
 8003a06:	f002 fc53 	bl	80062b0 <lis2de12_from_fs2_to_mg>
 8003a0a:	eef0 7a40 	vmov.f32	s15, s0
 8003a0e:	4b46      	ldr	r3, [pc, #280]	; (8003b28 <main+0x28c>)
 8003a10:	edc3 7a02 	vstr	s15, [r3, #8]

            // Copy data to buffer for transmission
            memcpy(tx.buffer_tx, (uint8_t*)&tx, PAYLOAD_LENGTH);

            if ((GPIOA->IDR & LL_GPIO_PIN_9) != 0x00u)
 8003a14:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d058      	beq.n	8003ad4 <main+0x238>
           {
            // Prepare for transmission
            ASSERT_LR11XX_RC(lr11xx_regmem_write_buffer8(context, tx.buffer_tx, PAYLOAD_LENGTH));
 8003a22:	4b38      	ldr	r3, [pc, #224]	; (8003b04 <main+0x268>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	220c      	movs	r2, #12
 8003a28:	493f      	ldr	r1, [pc, #252]	; (8003b28 <main+0x28c>)
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f004 ffd4 	bl	80089d8 <lr11xx_regmem_write_buffer8>
 8003a30:	4603      	mov	r3, r0
 8003a32:	777b      	strb	r3, [r7, #29]
 8003a34:	7f7b      	ldrb	r3, [r7, #29]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d01c      	beq.n	8003a74 <main+0x1d8>
 8003a3a:	7f7b      	ldrb	r3, [r7, #29]
 8003a3c:	2b03      	cmp	r3, #3
 8003a3e:	d119      	bne.n	8003a74 <main+0x1d8>
 8003a40:	4832      	ldr	r0, [pc, #200]	; (8003b0c <main+0x270>)
 8003a42:	f000 fa05 	bl	8003e50 <hal_mcu_trace_print>
 8003a46:	4826      	ldr	r0, [pc, #152]	; (8003ae0 <main+0x244>)
 8003a48:	f000 fa02 	bl	8003e50 <hal_mcu_trace_print>
 8003a4c:	f240 110d 	movw	r1, #269	; 0x10d
 8003a50:	4824      	ldr	r0, [pc, #144]	; (8003ae4 <main+0x248>)
 8003a52:	f000 f9fd 	bl	8003e50 <hal_mcu_trace_print>
 8003a56:	482e      	ldr	r0, [pc, #184]	; (8003b10 <main+0x274>)
 8003a58:	f000 f9fa 	bl	8003e50 <hal_mcu_trace_print>
 8003a5c:	4b2d      	ldr	r3, [pc, #180]	; (8003b14 <main+0x278>)
 8003a5e:	9300      	str	r3, [sp, #0]
 8003a60:	f240 130d 	movw	r3, #269	; 0x10d
 8003a64:	4a2c      	ldr	r2, [pc, #176]	; (8003b18 <main+0x27c>)
 8003a66:	492d      	ldr	r1, [pc, #180]	; (8003b1c <main+0x280>)
 8003a68:	482d      	ldr	r0, [pc, #180]	; (8003b20 <main+0x284>)
 8003a6a:	f000 f9f1 	bl	8003e50 <hal_mcu_trace_print>
 8003a6e:	4820      	ldr	r0, [pc, #128]	; (8003af0 <main+0x254>)
 8003a70:	f000 f9ee 	bl	8003e50 <hal_mcu_trace_print>
            apps_common_lr11xx_handle_pre_tx();
 8003a74:	f003 ffa0 	bl	80079b8 <apps_common_lr11xx_handle_pre_tx>

            // Transmit data
            ASSERT_LR11XX_RC(lr11xx_radio_set_tx(context, 0));
 8003a78:	4b22      	ldr	r3, [pc, #136]	; (8003b04 <main+0x268>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2100      	movs	r1, #0
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f004 fdb4 	bl	80085ec <lr11xx_radio_set_tx>
 8003a84:	4603      	mov	r3, r0
 8003a86:	773b      	strb	r3, [r7, #28]
 8003a88:	7f3b      	ldrb	r3, [r7, #28]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d01c      	beq.n	8003ac8 <main+0x22c>
 8003a8e:	7f3b      	ldrb	r3, [r7, #28]
 8003a90:	2b03      	cmp	r3, #3
 8003a92:	d119      	bne.n	8003ac8 <main+0x22c>
 8003a94:	481d      	ldr	r0, [pc, #116]	; (8003b0c <main+0x270>)
 8003a96:	f000 f9db 	bl	8003e50 <hal_mcu_trace_print>
 8003a9a:	4811      	ldr	r0, [pc, #68]	; (8003ae0 <main+0x244>)
 8003a9c:	f000 f9d8 	bl	8003e50 <hal_mcu_trace_print>
 8003aa0:	f240 1111 	movw	r1, #273	; 0x111
 8003aa4:	480f      	ldr	r0, [pc, #60]	; (8003ae4 <main+0x248>)
 8003aa6:	f000 f9d3 	bl	8003e50 <hal_mcu_trace_print>
 8003aaa:	4819      	ldr	r0, [pc, #100]	; (8003b10 <main+0x274>)
 8003aac:	f000 f9d0 	bl	8003e50 <hal_mcu_trace_print>
 8003ab0:	4b18      	ldr	r3, [pc, #96]	; (8003b14 <main+0x278>)
 8003ab2:	9300      	str	r3, [sp, #0]
 8003ab4:	f240 1311 	movw	r3, #273	; 0x111
 8003ab8:	4a17      	ldr	r2, [pc, #92]	; (8003b18 <main+0x27c>)
 8003aba:	4918      	ldr	r1, [pc, #96]	; (8003b1c <main+0x280>)
 8003abc:	4818      	ldr	r0, [pc, #96]	; (8003b20 <main+0x284>)
 8003abe:	f000 f9c7 	bl	8003e50 <hal_mcu_trace_print>
 8003ac2:	480b      	ldr	r0, [pc, #44]	; (8003af0 <main+0x254>)
 8003ac4:	f000 f9c4 	bl	8003e50 <hal_mcu_trace_print>

            // Process interrupts and errors
            apps_common_lr11xx_irq_process(context, IRQ_MASK);
 8003ac8:	4b0e      	ldr	r3, [pc, #56]	; (8003b04 <main+0x268>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	490e      	ldr	r1, [pc, #56]	; (8003b08 <main+0x26c>)
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f003 fce0 	bl	8007494 <apps_common_lr11xx_irq_process>
           }
            //HAL_DBG_TRACE_INFO("AccX: %08.4f AccY: %08.4f AccZ: %08.4f\n\r", tx.aceeleration[0], tx.aceeleration[1], tx.aceeleration[2]);
        }

        // Wait before next read
        LL_mDelay(DELAY_PING_PONG_PACE_MS);
 8003ad4:	20c8      	movs	r0, #200	; 0xc8
 8003ad6:	f7ff fc7b 	bl	80033d0 <LL_mDelay>
    {
 8003ada:	e76b      	b.n	80039b4 <main+0x118>
 8003adc:	0800bcc0 	.word	0x0800bcc0
 8003ae0:	0800bcc8 	.word	0x0800bcc8
 8003ae4:	0800bcd8 	.word	0x0800bcd8
 8003ae8:	0800bce0 	.word	0x0800bce0
 8003aec:	0800bce8 	.word	0x0800bce8
 8003af0:	0800bd14 	.word	0x0800bd14
 8003af4:	08005ecd 	.word	0x08005ecd
 8003af8:	08005f0f 	.word	0x08005f0f
 8003afc:	08005f51 	.word	0x08005f51
 8003b00:	20000a48 	.word	0x20000a48
 8003b04:	20000700 	.word	0x20000700
 8003b08:	010004cc 	.word	0x010004cc
 8003b0c:	0800bd1c 	.word	0x0800bd1c
 8003b10:	0800bd24 	.word	0x0800bd24
 8003b14:	0800bd94 	.word	0x0800bd94
 8003b18:	0800d7f4 	.word	0x0800d7f4
 8003b1c:	0800bd2c 	.word	0x0800bd2c
 8003b20:	0800bd78 	.word	0x0800bd78
 8003b24:	0bffcffc 	.word	0x0bffcffc
 8003b28:	200006f4 	.word	0x200006f4

08003b2c <on_tx_done>:
}



void on_tx_done( void )
{
 8003b2c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003b30:	b086      	sub	sp, #24
 8003b32:	af04      	add	r7, sp, #16
    apps_common_lr11xx_handle_post_tx( );
 8003b34:	f003 ff54 	bl	80079e0 <apps_common_lr11xx_handle_post_tx>
    HAL_DBG_TRACE_INFO( "Transmitted message of X axis %f, Transmitted message of Y axis %f, Transmitted message of Z axis %f"
 8003b38:	4844      	ldr	r0, [pc, #272]	; (8003c4c <on_tx_done+0x120>)
 8003b3a:	f000 f989 	bl	8003e50 <hal_mcu_trace_print>
 8003b3e:	4844      	ldr	r0, [pc, #272]	; (8003c50 <on_tx_done+0x124>)
 8003b40:	f000 f986 	bl	8003e50 <hal_mcu_trace_print>
 8003b44:	f240 1123 	movw	r1, #291	; 0x123
 8003b48:	4842      	ldr	r0, [pc, #264]	; (8003c54 <on_tx_done+0x128>)
 8003b4a:	f000 f981 	bl	8003e50 <hal_mcu_trace_print>
 8003b4e:	4842      	ldr	r0, [pc, #264]	; (8003c58 <on_tx_done+0x12c>)
 8003b50:	f000 f97e 	bl	8003e50 <hal_mcu_trace_print>
 8003b54:	4b41      	ldr	r3, [pc, #260]	; (8003c5c <on_tx_done+0x130>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f7fc fcf5 	bl	8000548 <__aeabi_f2d>
 8003b5e:	4680      	mov	r8, r0
 8003b60:	4689      	mov	r9, r1
 8003b62:	4b3e      	ldr	r3, [pc, #248]	; (8003c5c <on_tx_done+0x130>)
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	4618      	mov	r0, r3
 8003b68:	f7fc fcee 	bl	8000548 <__aeabi_f2d>
 8003b6c:	4604      	mov	r4, r0
 8003b6e:	460d      	mov	r5, r1
 8003b70:	4b3a      	ldr	r3, [pc, #232]	; (8003c5c <on_tx_done+0x130>)
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	4618      	mov	r0, r3
 8003b76:	f7fc fce7 	bl	8000548 <__aeabi_f2d>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003b82:	e9cd 4500 	strd	r4, r5, [sp]
 8003b86:	4642      	mov	r2, r8
 8003b88:	464b      	mov	r3, r9
 8003b8a:	4835      	ldr	r0, [pc, #212]	; (8003c60 <on_tx_done+0x134>)
 8003b8c:	f000 f960 	bl	8003e50 <hal_mcu_trace_print>
 8003b90:	4834      	ldr	r0, [pc, #208]	; (8003c64 <on_tx_done+0x138>)
 8003b92:	f000 f95d 	bl	8003e50 <hal_mcu_trace_print>
    		"\n\r", tx.aceeleration[0], tx.aceeleration[1] , tx.aceeleration[2]  );

    LL_mDelay( DELAY_PING_PONG_PACE_MS );
 8003b96:	20c8      	movs	r0, #200	; 0xc8
 8003b98:	f7ff fc1a 	bl	80033d0 <LL_mDelay>

    // lis2de12_filter_hp_rst_on_int();

    ASSERT_LR11XX_RC( lr11xx_regmem_write_buffer8( context, tx.buffer_tx, PAYLOAD_LENGTH ) );
 8003b9c:	4b32      	ldr	r3, [pc, #200]	; (8003c68 <on_tx_done+0x13c>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	220c      	movs	r2, #12
 8003ba2:	492e      	ldr	r1, [pc, #184]	; (8003c5c <on_tx_done+0x130>)
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f004 ff17 	bl	80089d8 <lr11xx_regmem_write_buffer8>
 8003baa:	4603      	mov	r3, r0
 8003bac:	71fb      	strb	r3, [r7, #7]
 8003bae:	79fb      	ldrb	r3, [r7, #7]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d01c      	beq.n	8003bee <on_tx_done+0xc2>
 8003bb4:	79fb      	ldrb	r3, [r7, #7]
 8003bb6:	2b03      	cmp	r3, #3
 8003bb8:	d119      	bne.n	8003bee <on_tx_done+0xc2>
 8003bba:	482c      	ldr	r0, [pc, #176]	; (8003c6c <on_tx_done+0x140>)
 8003bbc:	f000 f948 	bl	8003e50 <hal_mcu_trace_print>
 8003bc0:	4823      	ldr	r0, [pc, #140]	; (8003c50 <on_tx_done+0x124>)
 8003bc2:	f000 f945 	bl	8003e50 <hal_mcu_trace_print>
 8003bc6:	f44f 7195 	mov.w	r1, #298	; 0x12a
 8003bca:	4822      	ldr	r0, [pc, #136]	; (8003c54 <on_tx_done+0x128>)
 8003bcc:	f000 f940 	bl	8003e50 <hal_mcu_trace_print>
 8003bd0:	4827      	ldr	r0, [pc, #156]	; (8003c70 <on_tx_done+0x144>)
 8003bd2:	f000 f93d 	bl	8003e50 <hal_mcu_trace_print>
 8003bd6:	4b27      	ldr	r3, [pc, #156]	; (8003c74 <on_tx_done+0x148>)
 8003bd8:	9300      	str	r3, [sp, #0]
 8003bda:	f44f 7395 	mov.w	r3, #298	; 0x12a
 8003bde:	4a26      	ldr	r2, [pc, #152]	; (8003c78 <on_tx_done+0x14c>)
 8003be0:	4926      	ldr	r1, [pc, #152]	; (8003c7c <on_tx_done+0x150>)
 8003be2:	4827      	ldr	r0, [pc, #156]	; (8003c80 <on_tx_done+0x154>)
 8003be4:	f000 f934 	bl	8003e50 <hal_mcu_trace_print>
 8003be8:	481e      	ldr	r0, [pc, #120]	; (8003c64 <on_tx_done+0x138>)
 8003bea:	f000 f931 	bl	8003e50 <hal_mcu_trace_print>

    apps_common_lr11xx_handle_pre_tx( );
 8003bee:	f003 fee3 	bl	80079b8 <apps_common_lr11xx_handle_pre_tx>

    ASSERT_LR11XX_RC( lr11xx_radio_set_tx( context, 0 ) );
 8003bf2:	4b1d      	ldr	r3, [pc, #116]	; (8003c68 <on_tx_done+0x13c>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2100      	movs	r1, #0
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f004 fcf7 	bl	80085ec <lr11xx_radio_set_tx>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	71bb      	strb	r3, [r7, #6]
 8003c02:	79bb      	ldrb	r3, [r7, #6]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d01c      	beq.n	8003c42 <on_tx_done+0x116>
 8003c08:	79bb      	ldrb	r3, [r7, #6]
 8003c0a:	2b03      	cmp	r3, #3
 8003c0c:	d119      	bne.n	8003c42 <on_tx_done+0x116>
 8003c0e:	4817      	ldr	r0, [pc, #92]	; (8003c6c <on_tx_done+0x140>)
 8003c10:	f000 f91e 	bl	8003e50 <hal_mcu_trace_print>
 8003c14:	480e      	ldr	r0, [pc, #56]	; (8003c50 <on_tx_done+0x124>)
 8003c16:	f000 f91b 	bl	8003e50 <hal_mcu_trace_print>
 8003c1a:	f44f 7197 	mov.w	r1, #302	; 0x12e
 8003c1e:	480d      	ldr	r0, [pc, #52]	; (8003c54 <on_tx_done+0x128>)
 8003c20:	f000 f916 	bl	8003e50 <hal_mcu_trace_print>
 8003c24:	4812      	ldr	r0, [pc, #72]	; (8003c70 <on_tx_done+0x144>)
 8003c26:	f000 f913 	bl	8003e50 <hal_mcu_trace_print>
 8003c2a:	4b12      	ldr	r3, [pc, #72]	; (8003c74 <on_tx_done+0x148>)
 8003c2c:	9300      	str	r3, [sp, #0]
 8003c2e:	f44f 7397 	mov.w	r3, #302	; 0x12e
 8003c32:	4a11      	ldr	r2, [pc, #68]	; (8003c78 <on_tx_done+0x14c>)
 8003c34:	4911      	ldr	r1, [pc, #68]	; (8003c7c <on_tx_done+0x150>)
 8003c36:	4812      	ldr	r0, [pc, #72]	; (8003c80 <on_tx_done+0x154>)
 8003c38:	f000 f90a 	bl	8003e50 <hal_mcu_trace_print>
 8003c3c:	4809      	ldr	r0, [pc, #36]	; (8003c64 <on_tx_done+0x138>)
 8003c3e:	f000 f907 	bl	8003e50 <hal_mcu_trace_print>
}
 8003c42:	bf00      	nop
 8003c44:	3708      	adds	r7, #8
 8003c46:	46bd      	mov	sp, r7
 8003c48:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003c4c:	0800bcc0 	.word	0x0800bcc0
 8003c50:	0800bcc8 	.word	0x0800bcc8
 8003c54:	0800bcd8 	.word	0x0800bcd8
 8003c58:	0800bce0 	.word	0x0800bce0
 8003c5c:	200006f4 	.word	0x200006f4
 8003c60:	0800bda8 	.word	0x0800bda8
 8003c64:	0800bd14 	.word	0x0800bd14
 8003c68:	20000700 	.word	0x20000700
 8003c6c:	0800bd1c 	.word	0x0800bd1c
 8003c70:	0800bd24 	.word	0x0800bd24
 8003c74:	0800bd94 	.word	0x0800bd94
 8003c78:	0800d7fc 	.word	0x0800d7fc
 8003c7c:	0800bd2c 	.word	0x0800bd2c
 8003c80:	0800bd78 	.word	0x0800bd78

08003c84 <on_rx_timeout>:

void on_rx_timeout( void )
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	af00      	add	r7, sp, #0
    packets_to_sync++;
 8003c88:	4b10      	ldr	r3, [pc, #64]	; (8003ccc <on_rx_timeout+0x48>)
 8003c8a:	881b      	ldrh	r3, [r3, #0]
 8003c8c:	3301      	adds	r3, #1
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	4b0e      	ldr	r3, [pc, #56]	; (8003ccc <on_rx_timeout+0x48>)
 8003c92:	801a      	strh	r2, [r3, #0]
    if( packets_to_sync > SYNC_PACKET_THRESHOLD )
 8003c94:	4b0d      	ldr	r3, [pc, #52]	; (8003ccc <on_rx_timeout+0x48>)
 8003c96:	881b      	ldrh	r3, [r3, #0]
 8003c98:	2b40      	cmp	r3, #64	; 0x40
 8003c9a:	d913      	bls.n	8003cc4 <on_rx_timeout+0x40>
    {
        HAL_DBG_TRACE_WARNING(
 8003c9c:	480c      	ldr	r0, [pc, #48]	; (8003cd0 <on_rx_timeout+0x4c>)
 8003c9e:	f000 f8d7 	bl	8003e50 <hal_mcu_trace_print>
 8003ca2:	480c      	ldr	r0, [pc, #48]	; (8003cd4 <on_rx_timeout+0x50>)
 8003ca4:	f000 f8d4 	bl	8003e50 <hal_mcu_trace_print>
 8003ca8:	f44f 719b 	mov.w	r1, #310	; 0x136
 8003cac:	480a      	ldr	r0, [pc, #40]	; (8003cd8 <on_rx_timeout+0x54>)
 8003cae:	f000 f8cf 	bl	8003e50 <hal_mcu_trace_print>
 8003cb2:	480a      	ldr	r0, [pc, #40]	; (8003cdc <on_rx_timeout+0x58>)
 8003cb4:	f000 f8cc 	bl	8003e50 <hal_mcu_trace_print>
 8003cb8:	4809      	ldr	r0, [pc, #36]	; (8003ce0 <on_rx_timeout+0x5c>)
 8003cba:	f000 f8c9 	bl	8003e50 <hal_mcu_trace_print>
 8003cbe:	4809      	ldr	r0, [pc, #36]	; (8003ce4 <on_rx_timeout+0x60>)
 8003cc0:	f000 f8c6 	bl	8003e50 <hal_mcu_trace_print>
            "It looks like synchronisation is still not done, consider resetting one of the board\n\r" );
    }
    ping_pong_reception_failure_handling( );
 8003cc4:	f000 f81c 	bl	8003d00 <ping_pong_reception_failure_handling>
}
 8003cc8:	bf00      	nop
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	20000706 	.word	0x20000706
 8003cd0:	0800be10 	.word	0x0800be10
 8003cd4:	0800bcc8 	.word	0x0800bcc8
 8003cd8:	0800bcd8 	.word	0x0800bcd8
 8003cdc:	0800be18 	.word	0x0800be18
 8003ce0:	0800be20 	.word	0x0800be20
 8003ce4:	0800bd14 	.word	0x0800bd14

08003ce8 <on_rx_crc_error>:

void on_rx_crc_error( void )
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	af00      	add	r7, sp, #0
    ping_pong_reception_failure_handling( );
 8003cec:	f000 f808 	bl	8003d00 <ping_pong_reception_failure_handling>
}
 8003cf0:	bf00      	nop
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <on_fsk_len_error>:

void on_fsk_len_error( void )
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	af00      	add	r7, sp, #0
    ping_pong_reception_failure_handling( );
 8003cf8:	f000 f802 	bl	8003d00 <ping_pong_reception_failure_handling>
}
 8003cfc:	bf00      	nop
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <ping_pong_reception_failure_handling>:

static void ping_pong_reception_failure_handling( void )
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af02      	add	r7, sp, #8
    apps_common_lr11xx_handle_post_rx( );
 8003d06:	f003 fe7f 	bl	8007a08 <apps_common_lr11xx_handle_post_rx>

    is_master = true;
 8003d0a:	4b30      	ldr	r3, [pc, #192]	; (8003dcc <ping_pong_reception_failure_handling+0xcc>)
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	701a      	strb	r2, [r3, #0]
    iteration = 0;
 8003d10:	4b2f      	ldr	r3, [pc, #188]	; (8003dd0 <ping_pong_reception_failure_handling+0xd0>)
 8003d12:	2200      	movs	r2, #0
 8003d14:	701a      	strb	r2, [r3, #0]

    tx.buffer_tx[ITERATION_INDEX] = iteration;
 8003d16:	4b2e      	ldr	r3, [pc, #184]	; (8003dd0 <ping_pong_reception_failure_handling+0xd0>)
 8003d18:	781a      	ldrb	r2, [r3, #0]
 8003d1a:	4b2e      	ldr	r3, [pc, #184]	; (8003dd4 <ping_pong_reception_failure_handling+0xd4>)
 8003d1c:	715a      	strb	r2, [r3, #5]

    ASSERT_LR11XX_RC( lr11xx_regmem_write_buffer8( context, tx.buffer_tx, PAYLOAD_LENGTH ) );
 8003d1e:	4b2e      	ldr	r3, [pc, #184]	; (8003dd8 <ping_pong_reception_failure_handling+0xd8>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	220c      	movs	r2, #12
 8003d24:	492b      	ldr	r1, [pc, #172]	; (8003dd4 <ping_pong_reception_failure_handling+0xd4>)
 8003d26:	4618      	mov	r0, r3
 8003d28:	f004 fe56 	bl	80089d8 <lr11xx_regmem_write_buffer8>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	71fb      	strb	r3, [r7, #7]
 8003d30:	79fb      	ldrb	r3, [r7, #7]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d01c      	beq.n	8003d70 <ping_pong_reception_failure_handling+0x70>
 8003d36:	79fb      	ldrb	r3, [r7, #7]
 8003d38:	2b03      	cmp	r3, #3
 8003d3a:	d119      	bne.n	8003d70 <ping_pong_reception_failure_handling+0x70>
 8003d3c:	4827      	ldr	r0, [pc, #156]	; (8003ddc <ping_pong_reception_failure_handling+0xdc>)
 8003d3e:	f000 f887 	bl	8003e50 <hal_mcu_trace_print>
 8003d42:	4827      	ldr	r0, [pc, #156]	; (8003de0 <ping_pong_reception_failure_handling+0xe0>)
 8003d44:	f000 f884 	bl	8003e50 <hal_mcu_trace_print>
 8003d48:	f240 114f 	movw	r1, #335	; 0x14f
 8003d4c:	4825      	ldr	r0, [pc, #148]	; (8003de4 <ping_pong_reception_failure_handling+0xe4>)
 8003d4e:	f000 f87f 	bl	8003e50 <hal_mcu_trace_print>
 8003d52:	4825      	ldr	r0, [pc, #148]	; (8003de8 <ping_pong_reception_failure_handling+0xe8>)
 8003d54:	f000 f87c 	bl	8003e50 <hal_mcu_trace_print>
 8003d58:	4b24      	ldr	r3, [pc, #144]	; (8003dec <ping_pong_reception_failure_handling+0xec>)
 8003d5a:	9300      	str	r3, [sp, #0]
 8003d5c:	f240 134f 	movw	r3, #335	; 0x14f
 8003d60:	4a23      	ldr	r2, [pc, #140]	; (8003df0 <ping_pong_reception_failure_handling+0xf0>)
 8003d62:	4924      	ldr	r1, [pc, #144]	; (8003df4 <ping_pong_reception_failure_handling+0xf4>)
 8003d64:	4824      	ldr	r0, [pc, #144]	; (8003df8 <ping_pong_reception_failure_handling+0xf8>)
 8003d66:	f000 f873 	bl	8003e50 <hal_mcu_trace_print>
 8003d6a:	4824      	ldr	r0, [pc, #144]	; (8003dfc <ping_pong_reception_failure_handling+0xfc>)
 8003d6c:	f000 f870 	bl	8003e50 <hal_mcu_trace_print>

    apps_common_lr11xx_handle_pre_tx( );
 8003d70:	f003 fe22 	bl	80079b8 <apps_common_lr11xx_handle_pre_tx>
    ASSERT_LR11XX_RC( lr11xx_radio_set_tx( context, 0 ) );
 8003d74:	4b18      	ldr	r3, [pc, #96]	; (8003dd8 <ping_pong_reception_failure_handling+0xd8>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2100      	movs	r1, #0
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f004 fc36 	bl	80085ec <lr11xx_radio_set_tx>
 8003d80:	4603      	mov	r3, r0
 8003d82:	71bb      	strb	r3, [r7, #6]
 8003d84:	79bb      	ldrb	r3, [r7, #6]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d01c      	beq.n	8003dc4 <ping_pong_reception_failure_handling+0xc4>
 8003d8a:	79bb      	ldrb	r3, [r7, #6]
 8003d8c:	2b03      	cmp	r3, #3
 8003d8e:	d119      	bne.n	8003dc4 <ping_pong_reception_failure_handling+0xc4>
 8003d90:	4812      	ldr	r0, [pc, #72]	; (8003ddc <ping_pong_reception_failure_handling+0xdc>)
 8003d92:	f000 f85d 	bl	8003e50 <hal_mcu_trace_print>
 8003d96:	4812      	ldr	r0, [pc, #72]	; (8003de0 <ping_pong_reception_failure_handling+0xe0>)
 8003d98:	f000 f85a 	bl	8003e50 <hal_mcu_trace_print>
 8003d9c:	f44f 71a9 	mov.w	r1, #338	; 0x152
 8003da0:	4810      	ldr	r0, [pc, #64]	; (8003de4 <ping_pong_reception_failure_handling+0xe4>)
 8003da2:	f000 f855 	bl	8003e50 <hal_mcu_trace_print>
 8003da6:	4810      	ldr	r0, [pc, #64]	; (8003de8 <ping_pong_reception_failure_handling+0xe8>)
 8003da8:	f000 f852 	bl	8003e50 <hal_mcu_trace_print>
 8003dac:	4b0f      	ldr	r3, [pc, #60]	; (8003dec <ping_pong_reception_failure_handling+0xec>)
 8003dae:	9300      	str	r3, [sp, #0]
 8003db0:	f44f 73a9 	mov.w	r3, #338	; 0x152
 8003db4:	4a0e      	ldr	r2, [pc, #56]	; (8003df0 <ping_pong_reception_failure_handling+0xf0>)
 8003db6:	490f      	ldr	r1, [pc, #60]	; (8003df4 <ping_pong_reception_failure_handling+0xf4>)
 8003db8:	480f      	ldr	r0, [pc, #60]	; (8003df8 <ping_pong_reception_failure_handling+0xf8>)
 8003dba:	f000 f849 	bl	8003e50 <hal_mcu_trace_print>
 8003dbe:	480f      	ldr	r0, [pc, #60]	; (8003dfc <ping_pong_reception_failure_handling+0xfc>)
 8003dc0:	f000 f846 	bl	8003e50 <hal_mcu_trace_print>
}
 8003dc4:	bf00      	nop
 8003dc6:	3708      	adds	r7, #8
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	20000005 	.word	0x20000005
 8003dd0:	20000704 	.word	0x20000704
 8003dd4:	200006f4 	.word	0x200006f4
 8003dd8:	20000700 	.word	0x20000700
 8003ddc:	0800bd1c 	.word	0x0800bd1c
 8003de0:	0800bcc8 	.word	0x0800bcc8
 8003de4:	0800bcd8 	.word	0x0800bcd8
 8003de8:	0800bd24 	.word	0x0800bd24
 8003dec:	0800bd94 	.word	0x0800bd94
 8003df0:	0800d808 	.word	0x0800d808
 8003df4:	0800bd2c 	.word	0x0800bd2c
 8003df8:	0800bd78 	.word	0x0800bd78
 8003dfc:	0800bd14 	.word	0x0800bd14

08003e00 <common_version_print>:
 * -----------------------------------------------------------------------------
 * --- PUBLIC FUNCTIONS DEFINITION ---------------------------------------------
 */

void common_version_print( void )
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	af00      	add	r7, sp, #0
    HAL_DBG_TRACE_INFO( "SDK version: %s\n\r", apps_modem_common_sdk_version );
 8003e04:	480b      	ldr	r0, [pc, #44]	; (8003e34 <common_version_print+0x34>)
 8003e06:	f000 f823 	bl	8003e50 <hal_mcu_trace_print>
 8003e0a:	480b      	ldr	r0, [pc, #44]	; (8003e38 <common_version_print+0x38>)
 8003e0c:	f000 f820 	bl	8003e50 <hal_mcu_trace_print>
 8003e10:	214d      	movs	r1, #77	; 0x4d
 8003e12:	480a      	ldr	r0, [pc, #40]	; (8003e3c <common_version_print+0x3c>)
 8003e14:	f000 f81c 	bl	8003e50 <hal_mcu_trace_print>
 8003e18:	4809      	ldr	r0, [pc, #36]	; (8003e40 <common_version_print+0x40>)
 8003e1a:	f000 f819 	bl	8003e50 <hal_mcu_trace_print>
 8003e1e:	4b09      	ldr	r3, [pc, #36]	; (8003e44 <common_version_print+0x44>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4619      	mov	r1, r3
 8003e24:	4808      	ldr	r0, [pc, #32]	; (8003e48 <common_version_print+0x48>)
 8003e26:	f000 f813 	bl	8003e50 <hal_mcu_trace_print>
 8003e2a:	4808      	ldr	r0, [pc, #32]	; (8003e4c <common_version_print+0x4c>)
 8003e2c:	f000 f810 	bl	8003e50 <hal_mcu_trace_print>
}
 8003e30:	bf00      	nop
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	0800be80 	.word	0x0800be80
 8003e38:	0800be88 	.word	0x0800be88
 8003e3c:	0800be9c 	.word	0x0800be9c
 8003e40:	0800bea4 	.word	0x0800bea4
 8003e44:	20000008 	.word	0x20000008
 8003e48:	0800beac 	.word	0x0800beac
 8003e4c:	0800bec0 	.word	0x0800bec0

08003e50 <hal_mcu_trace_print>:
 * -----------------------------------------------------------------------------
 * --- PUBLIC FUNCTIONS DEFINITION ---------------------------------------------
 */

void hal_mcu_trace_print( const char* fmt, ... )
{
 8003e50:	b40f      	push	{r0, r1, r2, r3}
 8003e52:	b580      	push	{r7, lr}
 8003e54:	b082      	sub	sp, #8
 8003e56:	af00      	add	r7, sp, #0
    va_list argp;
    va_start( argp, fmt );
 8003e58:	f107 0314 	add.w	r3, r7, #20
 8003e5c:	607b      	str	r3, [r7, #4]
    vprint( fmt, argp );
 8003e5e:	6879      	ldr	r1, [r7, #4]
 8003e60:	6938      	ldr	r0, [r7, #16]
 8003e62:	f000 f821 	bl	8003ea8 <vprint>
    va_end( argp );
}
 8003e66:	bf00      	nop
 8003e68:	3708      	adds	r7, #8
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e70:	b004      	add	sp, #16
 8003e72:	4770      	bx	lr

08003e74 <smtc_shield_pinout_mapping_get_gpio_cfg>:
 * -----------------------------------------------------------------------------
 * --- PUBLIC FUNCTIONS DEFINITION ---------------------------------------------
 */

const smtc_hal_mcu_gpio_cfg_t smtc_shield_pinout_mapping_get_gpio_cfg( smtc_shield_pinout_t gpio )
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	71fb      	strb	r3, [r7, #7]
    return ( const smtc_hal_mcu_gpio_cfg_t ) &arduino_mapping[( int ) gpio];
 8003e7e:	79fb      	ldrb	r3, [r7, #7]
 8003e80:	00db      	lsls	r3, r3, #3
 8003e82:	4a04      	ldr	r2, [pc, #16]	; (8003e94 <smtc_shield_pinout_mapping_get_gpio_cfg+0x20>)
 8003e84:	4413      	add	r3, r2
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	370c      	adds	r7, #12
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	0800d830 	.word	0x0800d830

08003e98 <uart_init>:
 * -----------------------------------------------------------------------------
 * --- PUBLIC FUNCTIONS DEFINITION ---------------------------------------------
 */

void uart_init( void )
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	af00      	add	r7, sp, #0
    uart_init_base( NULL );
 8003e9c:	2000      	movs	r0, #0
 8003e9e:	f000 f837 	bl	8003f10 <uart_init_base>
}
 8003ea2:	bf00      	nop
 8003ea4:	bd80      	pop	{r7, pc}
	...

08003ea8 <vprint>:
{
    uart_init_base( callback_rx );
}

void vprint( const char* fmt, va_list argp )
{
 8003ea8:	b590      	push	{r4, r7, lr}
 8003eaa:	b0c3      	sub	sp, #268	; 0x10c
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003eb2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003eb6:	6018      	str	r0, [r3, #0]
 8003eb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003ebc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003ec0:	6019      	str	r1, [r3, #0]
    char string[255];
    if( 0 < vsprintf( string, fmt, argp ) )  // build string
 8003ec2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003ec6:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 8003eca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003ece:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003ed2:	f107 0008 	add.w	r0, r7, #8
 8003ed6:	6812      	ldr	r2, [r2, #0]
 8003ed8:	6819      	ldr	r1, [r3, #0]
 8003eda:	f005 fde1 	bl	8009aa0 <vsiprintf>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	dd0d      	ble.n	8003f00 <vprint+0x58>
    {
        smtc_hal_mcu_uart_send( inst_uart, ( uint8_t* ) string, strlen( string ) );
 8003ee4:	4b09      	ldr	r3, [pc, #36]	; (8003f0c <vprint+0x64>)
 8003ee6:	681c      	ldr	r4, [r3, #0]
 8003ee8:	f107 0308 	add.w	r3, r7, #8
 8003eec:	4618      	mov	r0, r3
 8003eee:	f7fc f9bf 	bl	8000270 <strlen>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	f107 0308 	add.w	r3, r7, #8
 8003ef8:	4619      	mov	r1, r3
 8003efa:	4620      	mov	r0, r4
 8003efc:	f001 fd74 	bl	80059e8 <smtc_hal_mcu_uart_send>
    }
}
 8003f00:	bf00      	nop
 8003f02:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd90      	pop	{r4, r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	20000708 	.word	0x20000708

08003f10 <uart_init_base>:
 * -----------------------------------------------------------------------------
 * --- PRIVATE FUNCTIONS DEFINITION --------------------------------------------
 */

void uart_init_base( void ( *callback_rx )( uint8_t data ) )
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b086      	sub	sp, #24
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
    const struct smtc_hal_mcu_uart_cfg_s cfg_uart = {
 8003f18:	4b09      	ldr	r3, [pc, #36]	; (8003f40 <uart_init_base+0x30>)
 8003f1a:	617b      	str	r3, [r7, #20]
        .usart = USART2,
    };
    const smtc_hal_mcu_uart_cfg_app_t uart_cfg_app = {
 8003f1c:	f44f 2361 	mov.w	r3, #921600	; 0xe1000
 8003f20:	60fb      	str	r3, [r7, #12]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	613b      	str	r3, [r7, #16]
        .baudrate    = 921600,
        .callback_rx = callback_rx,
    };
    smtc_hal_mcu_uart_init( ( const smtc_hal_mcu_uart_cfg_t ) &cfg_uart, &uart_cfg_app, &inst_uart );
 8003f26:	f107 010c 	add.w	r1, r7, #12
 8003f2a:	f107 0314 	add.w	r3, r7, #20
 8003f2e:	4a05      	ldr	r2, [pc, #20]	; (8003f44 <uart_init_base+0x34>)
 8003f30:	4618      	mov	r0, r3
 8003f32:	f001 fcd1 	bl	80058d8 <smtc_hal_mcu_uart_init>
}
 8003f36:	bf00      	nop
 8003f38:	3718      	adds	r7, #24
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	40004400 	.word	0x40004400
 8003f44:	20000708 	.word	0x20000708

08003f48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	4603      	mov	r3, r0
 8003f50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	db0b      	blt.n	8003f72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f5a:	79fb      	ldrb	r3, [r7, #7]
 8003f5c:	f003 021f 	and.w	r2, r3, #31
 8003f60:	4907      	ldr	r1, [pc, #28]	; (8003f80 <__NVIC_EnableIRQ+0x38>)
 8003f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f66:	095b      	lsrs	r3, r3, #5
 8003f68:	2001      	movs	r0, #1
 8003f6a:	fa00 f202 	lsl.w	r2, r0, r2
 8003f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003f72:	bf00      	nop
 8003f74:	370c      	adds	r7, #12
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	e000e100 	.word	0xe000e100

08003f84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	6039      	str	r1, [r7, #0]
 8003f8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	db0a      	blt.n	8003fae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	b2da      	uxtb	r2, r3
 8003f9c:	490c      	ldr	r1, [pc, #48]	; (8003fd0 <__NVIC_SetPriority+0x4c>)
 8003f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fa2:	0112      	lsls	r2, r2, #4
 8003fa4:	b2d2      	uxtb	r2, r2
 8003fa6:	440b      	add	r3, r1
 8003fa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003fac:	e00a      	b.n	8003fc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	b2da      	uxtb	r2, r3
 8003fb2:	4908      	ldr	r1, [pc, #32]	; (8003fd4 <__NVIC_SetPriority+0x50>)
 8003fb4:	79fb      	ldrb	r3, [r7, #7]
 8003fb6:	f003 030f 	and.w	r3, r3, #15
 8003fba:	3b04      	subs	r3, #4
 8003fbc:	0112      	lsls	r2, r2, #4
 8003fbe:	b2d2      	uxtb	r2, r2
 8003fc0:	440b      	add	r3, r1
 8003fc2:	761a      	strb	r2, [r3, #24]
}
 8003fc4:	bf00      	nop
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr
 8003fd0:	e000e100 	.word	0xe000e100
 8003fd4:	e000ed00 	.word	0xe000ed00

08003fd8 <LL_GPIO_GetPinMode>:
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b089      	sub	sp, #36	; 0x24
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
  return (uint32_t)(READ_BIT(GPIOx->MODER,
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	fa93 f3a3 	rbit	r3, r3
 8003ff0:	60bb      	str	r3, [r7, #8]
  return result;
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d101      	bne.n	8004000 <LL_GPIO_GetPinMode+0x28>
    return 32U;
 8003ffc:	2320      	movs	r3, #32
 8003ffe:	e003      	b.n	8004008 <LL_GPIO_GetPinMode+0x30>
  return __builtin_clz(value);
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	fab3 f383 	clz	r3, r3
 8004006:	b2db      	uxtb	r3, r3
 8004008:	005b      	lsls	r3, r3, #1
 800400a:	2103      	movs	r1, #3
 800400c:	fa01 f303 	lsl.w	r3, r1, r3
 8004010:	401a      	ands	r2, r3
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	fa93 f3a3 	rbit	r3, r3
 800401c:	617b      	str	r3, [r7, #20]
  return result;
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d101      	bne.n	800402c <LL_GPIO_GetPinMode+0x54>
    return 32U;
 8004028:	2320      	movs	r3, #32
 800402a:	e003      	b.n	8004034 <LL_GPIO_GetPinMode+0x5c>
  return __builtin_clz(value);
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	fab3 f383 	clz	r3, r3
 8004032:	b2db      	uxtb	r3, r3
                             (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U))) >> (POSITION_VAL(Pin) * 2U));
 8004034:	005b      	lsls	r3, r3, #1
  return (uint32_t)(READ_BIT(GPIOx->MODER,
 8004036:	fa22 f303 	lsr.w	r3, r2, r3
}
 800403a:	4618      	mov	r0, r3
 800403c:	3724      	adds	r7, #36	; 0x24
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr

08004046 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8004046:	b480      	push	{r7}
 8004048:	b083      	sub	sp, #12
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
 800404e:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	691a      	ldr	r2, [r3, #16]
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	4013      	ands	r3, r2
 8004058:	683a      	ldr	r2, [r7, #0]
 800405a:	429a      	cmp	r2, r3
 800405c:	d101      	bne.n	8004062 <LL_GPIO_IsInputPinSet+0x1c>
 800405e:	2301      	movs	r3, #1
 8004060:	e000      	b.n	8004064 <LL_GPIO_IsInputPinSet+0x1e>
 8004062:	2300      	movs	r3, #0
}
 8004064:	4618      	mov	r0, r3
 8004066:	370c      	adds	r7, #12
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <LL_GPIO_IsOutputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsOutputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->ODR, PinMask) == (PinMask)) ? 1UL : 0UL);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	695a      	ldr	r2, [r3, #20]
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	4013      	ands	r3, r2
 8004082:	683a      	ldr	r2, [r7, #0]
 8004084:	429a      	cmp	r2, r3
 8004086:	d101      	bne.n	800408c <LL_GPIO_IsOutputPinSet+0x1c>
 8004088:	2301      	movs	r3, #1
 800408a:	e000      	b.n	800408e <LL_GPIO_IsOutputPinSet+0x1e>
 800408c:	2300      	movs	r3, #0
}
 800408e:	4618      	mov	r0, r3
 8004090:	370c      	adds	r7, #12
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr

0800409a <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800409a:	b480      	push	{r7}
 800409c:	b083      	sub	sp, #12
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
 80040a2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	683a      	ldr	r2, [r7, #0]
 80040a8:	619a      	str	r2, [r3, #24]
}
 80040aa:	bf00      	nop
 80040ac:	370c      	adds	r7, #12
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr

080040b6 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80040b6:	b480      	push	{r7}
 80040b8:	b083      	sub	sp, #12
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
 80040be:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	683a      	ldr	r2, [r7, #0]
 80040c4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80040c6:	bf00      	nop
 80040c8:	370c      	adds	r7, #12
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
	...

080040d4 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b085      	sub	sp, #20
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80040dc:	4b08      	ldr	r3, [pc, #32]	; (8004100 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80040de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80040e0:	4907      	ldr	r1, [pc, #28]	; (8004100 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80040e8:	4b05      	ldr	r3, [pc, #20]	; (8004100 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80040ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4013      	ands	r3, r2
 80040f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80040f2:	68fb      	ldr	r3, [r7, #12]
}
 80040f4:	bf00      	nop
 80040f6:	3714      	adds	r7, #20
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr
 8004100:	40021000 	.word	0x40021000

08004104 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 800410c:	4b07      	ldr	r3, [pc, #28]	; (800412c <LL_EXTI_IsActiveFlag_0_31+0x28>)
 800410e:	695a      	ldr	r2, [r3, #20]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4013      	ands	r3, r2
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	429a      	cmp	r2, r3
 8004118:	d101      	bne.n	800411e <LL_EXTI_IsActiveFlag_0_31+0x1a>
 800411a:	2301      	movs	r3, #1
 800411c:	e000      	b.n	8004120 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 800411e:	2300      	movs	r3, #0
}
 8004120:	4618      	mov	r0, r3
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr
 800412c:	40010400 	.word	0x40010400

08004130 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8004138:	4a04      	ldr	r2, [pc, #16]	; (800414c <LL_EXTI_ClearFlag_0_31+0x1c>)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6153      	str	r3, [r2, #20]
}
 800413e:	bf00      	nop
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	40010400 	.word	0x40010400

08004150 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8004150:	b480      	push	{r7}
 8004152:	b087      	sub	sp, #28
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 800415a:	4a17      	ldr	r2, [pc, #92]	; (80041b8 <LL_SYSCFG_SetEXTISource+0x68>)
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	b2db      	uxtb	r3, r3
 8004160:	3302      	adds	r3, #2
 8004162:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	0c1b      	lsrs	r3, r3, #16
 800416a:	43db      	mvns	r3, r3
 800416c:	ea02 0103 	and.w	r1, r2, r3
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	0c1b      	lsrs	r3, r3, #16
 8004174:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	fa93 f3a3 	rbit	r3, r3
 800417c:	60fb      	str	r3, [r7, #12]
  return result;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d101      	bne.n	800418c <LL_SYSCFG_SetEXTISource+0x3c>
    return 32U;
 8004188:	2320      	movs	r3, #32
 800418a:	e003      	b.n	8004194 <LL_SYSCFG_SetEXTISource+0x44>
  return __builtin_clz(value);
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	fab3 f383 	clz	r3, r3
 8004192:	b2db      	uxtb	r3, r3
 8004194:	461a      	mov	r2, r3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	fa03 f202 	lsl.w	r2, r3, r2
 800419c:	4806      	ldr	r0, [pc, #24]	; (80041b8 <LL_SYSCFG_SetEXTISource+0x68>)
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	430a      	orrs	r2, r1
 80041a4:	3302      	adds	r3, #2
 80041a6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80041aa:	bf00      	nop
 80041ac:	371c      	adds	r7, #28
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	40010000 	.word	0x40010000

080041bc <smtc_hal_mcu_gpio_init_output>:
 */

smtc_hal_mcu_status_t smtc_hal_mcu_gpio_init_output( smtc_hal_mcu_gpio_cfg_t               cfg,
                                                     const smtc_hal_mcu_gpio_output_cfg_t* output_cfg,
                                                     smtc_hal_mcu_gpio_inst_t*             inst )
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b08c      	sub	sp, #48	; 0x30
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	60b9      	str	r1, [r7, #8]
 80041c6:	607a      	str	r2, [r7, #4]
    smtc_hal_mcu_status_t status = SMTC_HAL_MCU_STATUS_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if( smtc_hal_mcu_gpio_stm32l4_is_configured( cfg ) == true )
 80041ce:	68f8      	ldr	r0, [r7, #12]
 80041d0:	f000 f9ba 	bl	8004548 <smtc_hal_mcu_gpio_stm32l4_is_configured>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d001      	beq.n	80041de <smtc_hal_mcu_gpio_init_output+0x22>
    {
        return SMTC_HAL_MCU_STATUS_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e056      	b.n	800428c <smtc_hal_mcu_gpio_init_output+0xd0>
    }

    struct smtc_hal_mcu_gpio_inst_s* gpio_cfg_slot = smtc_hal_mcu_gpio_stm32l4_get_free_slot( );
 80041de:	f000 f9ef 	bl	80045c0 <smtc_hal_mcu_gpio_stm32l4_get_free_slot>
 80041e2:	62b8      	str	r0, [r7, #40]	; 0x28

    if( gpio_cfg_slot == NULL )
 80041e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d101      	bne.n	80041ee <smtc_hal_mcu_gpio_init_output+0x32>
    {
        return SMTC_HAL_MCU_STATUS_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e04e      	b.n	800428c <smtc_hal_mcu_gpio_init_output+0xd0>
    }

    gpio_cfg_slot->is_cfged     = false;
 80041ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f0:	2200      	movs	r2, #0
 80041f2:	701a      	strb	r2, [r3, #0]
    gpio_cfg_slot->is_irq_cfged = false;
 80041f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f6:	2200      	movs	r2, #0
 80041f8:	731a      	strb	r2, [r3, #12]
    gpio_cfg_slot->port         = cfg->port;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004200:	605a      	str	r2, [r3, #4]
    gpio_cfg_slot->pin          = cfg->pin;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	685a      	ldr	r2, [r3, #4]
 8004206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004208:	609a      	str	r2, [r3, #8]

    LL_GPIO_InitTypeDef GPIO_InitStruct = {
 800420a:	f107 0310 	add.w	r3, r7, #16
 800420e:	2200      	movs	r2, #0
 8004210:	601a      	str	r2, [r3, #0]
 8004212:	605a      	str	r2, [r3, #4]
 8004214:	609a      	str	r2, [r3, #8]
 8004216:	60da      	str	r2, [r3, #12]
 8004218:	611a      	str	r2, [r3, #16]
 800421a:	615a      	str	r2, [r3, #20]
        .Pin        = gpio_cfg_slot->pin,
 800421c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800421e:	689b      	ldr	r3, [r3, #8]
    LL_GPIO_InitTypeDef GPIO_InitStruct = {
 8004220:	613b      	str	r3, [r7, #16]
 8004222:	2301      	movs	r3, #1
 8004224:	617b      	str	r3, [r7, #20]
        .Speed      = LL_GPIO_SPEED_FREQ_LOW,
        .OutputType = LL_GPIO_OUTPUT_PUSHPULL,
        .Pull       = LL_GPIO_PULL_NO,
    };

    status = smtc_hal_mcu_gpio_stm32l4_enable_clock( gpio_cfg_slot->port );
 8004226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	4618      	mov	r0, r3
 800422c:	f000 fa14 	bl	8004658 <smtc_hal_mcu_gpio_stm32l4_enable_clock>
 8004230:	4603      	mov	r3, r0
 8004232:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if( status != SMTC_HAL_MCU_STATUS_OK )
 8004236:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800423a:	2b00      	cmp	r3, #0
 800423c:	d002      	beq.n	8004244 <smtc_hal_mcu_gpio_init_output+0x88>
    {
        return status;
 800423e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004242:	e023      	b.n	800428c <smtc_hal_mcu_gpio_init_output+0xd0>
    }

    status = smtc_hal_mcu_gpio_set_state( gpio_cfg_slot, output_cfg->initial_state );
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	4619      	mov	r1, r3
 800424a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800424c:	f000 f8ca 	bl	80043e4 <smtc_hal_mcu_gpio_set_state>
 8004250:	4603      	mov	r3, r0
 8004252:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if( status != SMTC_HAL_MCU_STATUS_OK )
 8004256:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800425a:	2b00      	cmp	r3, #0
 800425c:	d002      	beq.n	8004264 <smtc_hal_mcu_gpio_init_output+0xa8>
    {
        return status;
 800425e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004262:	e013      	b.n	800428c <smtc_hal_mcu_gpio_init_output+0xd0>
    }

    if( LL_GPIO_Init( gpio_cfg_slot->port, &GPIO_InitStruct ) != SUCCESS )
 8004264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	f107 0210 	add.w	r2, r7, #16
 800426c:	4611      	mov	r1, r2
 800426e:	4618      	mov	r0, r3
 8004270:	f7fe fadf 	bl	8002832 <LL_GPIO_Init>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d001      	beq.n	800427e <smtc_hal_mcu_gpio_init_output+0xc2>
    {
        return SMTC_HAL_MCU_STATUS_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e006      	b.n	800428c <smtc_hal_mcu_gpio_init_output+0xd0>
    }

    gpio_cfg_slot->is_cfged = true;
 800427e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004280:	2201      	movs	r2, #1
 8004282:	701a      	strb	r2, [r3, #0]

    *inst = gpio_cfg_slot;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004288:	601a      	str	r2, [r3, #0]

    return SMTC_HAL_MCU_STATUS_OK;
 800428a:	2300      	movs	r3, #0
}
 800428c:	4618      	mov	r0, r3
 800428e:	3730      	adds	r7, #48	; 0x30
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <smtc_hal_mcu_gpio_init_input>:

smtc_hal_mcu_status_t smtc_hal_mcu_gpio_init_input( smtc_hal_mcu_gpio_cfg_t              cfg,
                                                    const smtc_hal_mcu_gpio_input_cfg_t* input_cfg,
                                                    smtc_hal_mcu_gpio_inst_t*            inst )
{
 8004294:	b590      	push	{r4, r7, lr}
 8004296:	b095      	sub	sp, #84	; 0x54
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	607a      	str	r2, [r7, #4]
    smtc_hal_mcu_status_t status = SMTC_HAL_MCU_STATUS_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

    if( smtc_hal_mcu_gpio_stm32l4_is_configured( cfg ) == true )
 80042a6:	68f8      	ldr	r0, [r7, #12]
 80042a8:	f000 f94e 	bl	8004548 <smtc_hal_mcu_gpio_stm32l4_is_configured>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d001      	beq.n	80042b6 <smtc_hal_mcu_gpio_init_input+0x22>
    {
        return SMTC_HAL_MCU_STATUS_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e092      	b.n	80043dc <smtc_hal_mcu_gpio_init_input+0x148>
    }

    struct smtc_hal_mcu_gpio_inst_s* gpio_cfg_slot = smtc_hal_mcu_gpio_stm32l4_get_free_slot( );
 80042b6:	f000 f983 	bl	80045c0 <smtc_hal_mcu_gpio_stm32l4_get_free_slot>
 80042ba:	64b8      	str	r0, [r7, #72]	; 0x48

    if( gpio_cfg_slot == NULL )
 80042bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d101      	bne.n	80042c6 <smtc_hal_mcu_gpio_init_input+0x32>
    {
        return SMTC_HAL_MCU_STATUS_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e08a      	b.n	80043dc <smtc_hal_mcu_gpio_init_input+0x148>
    }

    gpio_cfg_slot->is_cfged     = false;
 80042c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042c8:	2200      	movs	r2, #0
 80042ca:	701a      	strb	r2, [r3, #0]
    gpio_cfg_slot->is_irq_cfged = false;
 80042cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042ce:	2200      	movs	r2, #0
 80042d0:	731a      	strb	r2, [r3, #12]
    gpio_cfg_slot->port         = cfg->port;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042d8:	605a      	str	r2, [r3, #4]
    gpio_cfg_slot->pin          = cfg->pin;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	685a      	ldr	r2, [r3, #4]
 80042de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042e0:	609a      	str	r2, [r3, #8]

    LL_GPIO_InitTypeDef GPIO_InitStruct = {
 80042e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80042e6:	2200      	movs	r2, #0
 80042e8:	601a      	str	r2, [r3, #0]
 80042ea:	605a      	str	r2, [r3, #4]
 80042ec:	609a      	str	r2, [r3, #8]
 80042ee:	60da      	str	r2, [r3, #12]
 80042f0:	611a      	str	r2, [r3, #16]
 80042f2:	615a      	str	r2, [r3, #20]
        .Pin        = gpio_cfg_slot->pin,
 80042f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042f6:	689b      	ldr	r3, [r3, #8]
    LL_GPIO_InitTypeDef GPIO_InitStruct = {
 80042f8:	633b      	str	r3, [r7, #48]	; 0x30
 80042fa:	2301      	movs	r3, #1
 80042fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        .Speed      = LL_GPIO_SPEED_FREQ_LOW,
        .OutputType = LL_GPIO_OUTPUT_OPENDRAIN,
        .Pull       = LL_GPIO_PULL_NO,
    };

    status = smtc_hal_mcu_gpio_stm32l4_enable_clock( gpio_cfg_slot->port );
 80042fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	4618      	mov	r0, r3
 8004304:	f000 f9a8 	bl	8004658 <smtc_hal_mcu_gpio_stm32l4_enable_clock>
 8004308:	4603      	mov	r3, r0
 800430a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if( status != SMTC_HAL_MCU_STATUS_OK )
 800430e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004312:	2b00      	cmp	r3, #0
 8004314:	d002      	beq.n	800431c <smtc_hal_mcu_gpio_init_input+0x88>
    {
        return status;
 8004316:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800431a:	e05f      	b.n	80043dc <smtc_hal_mcu_gpio_init_input+0x148>
    }

    if( LL_GPIO_Init( gpio_cfg_slot->port, &GPIO_InitStruct ) != SUCCESS )
 800431c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004324:	4611      	mov	r1, r2
 8004326:	4618      	mov	r0, r3
 8004328:	f7fe fa83 	bl	8002832 <LL_GPIO_Init>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d001      	beq.n	8004336 <smtc_hal_mcu_gpio_init_input+0xa2>
    {
        return SMTC_HAL_MCU_STATUS_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e052      	b.n	80043dc <smtc_hal_mcu_gpio_init_input+0x148>
    }

    if( input_cfg->irq_mode != SMTC_HAL_MCU_GPIO_IRQ_MODE_OFF )
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	785b      	ldrb	r3, [r3, #1]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d046      	beq.n	80043cc <smtc_hal_mcu_gpio_init_input+0x138>
    {
        uint32_t trigger;

        smtc_hal_mcu_gpio_irq_exti_cfg_t exti_cfg;

        status = smtc_hal_mcu_gpio_stm32l4_get_exti_cfg( gpio_cfg_slot, &exti_cfg );
 800433e:	f107 031c 	add.w	r3, r7, #28
 8004342:	4619      	mov	r1, r3
 8004344:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004346:	f000 f9e1 	bl	800470c <smtc_hal_mcu_gpio_stm32l4_get_exti_cfg>
 800434a:	4603      	mov	r3, r0
 800434c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        if( status != SMTC_HAL_MCU_STATUS_OK )
 8004350:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004354:	2b00      	cmp	r3, #0
 8004356:	d002      	beq.n	800435e <smtc_hal_mcu_gpio_init_input+0xca>
        {
            return status;
 8004358:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800435c:	e03e      	b.n	80043dc <smtc_hal_mcu_gpio_init_input+0x148>
        }

        status = smtc_hal_mcu_gpio_stm32l4_get_trigger( input_cfg->irq_mode, &trigger );
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	785b      	ldrb	r3, [r3, #1]
 8004362:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8004366:	4611      	mov	r1, r2
 8004368:	4618      	mov	r0, r3
 800436a:	f000 fb41 	bl	80049f0 <smtc_hal_mcu_gpio_stm32l4_get_trigger>
 800436e:	4603      	mov	r3, r0
 8004370:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        if( status != SMTC_HAL_MCU_STATUS_OK )
 8004374:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004378:	2b00      	cmp	r3, #0
 800437a:	d002      	beq.n	8004382 <smtc_hal_mcu_gpio_init_input+0xee>
        {
            return status;
 800437c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004380:	e02c      	b.n	80043dc <smtc_hal_mcu_gpio_init_input+0x148>
        }

        gpio_cfg_slot->irq_cfg.input_cfg      = *input_cfg;
 8004382:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004384:	68ba      	ldr	r2, [r7, #8]
 8004386:	3314      	adds	r3, #20
 8004388:	ca07      	ldmia	r2, {r0, r1, r2}
 800438a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        gpio_cfg_slot->irq_cfg.is_irq_enabled = false;
 800438e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004390:	2200      	movs	r2, #0
 8004392:	741a      	strb	r2, [r3, #16]
        gpio_cfg_slot->irq_cfg.exti_cfg       = exti_cfg;
 8004394:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004396:	f103 0420 	add.w	r4, r3, #32
 800439a:	f107 031c 	add.w	r3, r7, #28
 800439e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80043a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

        LL_EXTI_InitTypeDef EXTI_InitStruct = {
            .Line_0_31   = gpio_cfg_slot->irq_cfg.exti_cfg.exti_line,
 80043a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        LL_EXTI_InitTypeDef EXTI_InitStruct = {
 80043a8:	613b      	str	r3, [r7, #16]
 80043aa:	2300      	movs	r3, #0
 80043ac:	617b      	str	r3, [r7, #20]
 80043ae:	2301      	movs	r3, #1
 80043b0:	763b      	strb	r3, [r7, #24]
 80043b2:	2300      	movs	r3, #0
 80043b4:	767b      	strb	r3, [r7, #25]
 80043b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	76bb      	strb	r3, [r7, #26]
            .LineCommand = ENABLE,
            .Mode        = LL_EXTI_MODE_IT,
            .Trigger     = trigger,
        };

        LL_EXTI_Init( &EXTI_InitStruct );
 80043bc:	f107 0310 	add.w	r3, r7, #16
 80043c0:	4618      	mov	r0, r3
 80043c2:	f7fd fff7 	bl	80023b4 <LL_EXTI_Init>

        gpio_cfg_slot->is_irq_cfged = true;
 80043c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043c8:	2201      	movs	r2, #1
 80043ca:	731a      	strb	r2, [r3, #12]
    }

    gpio_cfg_slot->is_cfged = true;
 80043cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043ce:	2201      	movs	r2, #1
 80043d0:	701a      	strb	r2, [r3, #0]

    *inst = gpio_cfg_slot;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043d6:	601a      	str	r2, [r3, #0]

    return status;
 80043d8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3754      	adds	r7, #84	; 0x54
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd90      	pop	{r4, r7, pc}

080043e4 <smtc_hal_mcu_gpio_set_state>:

    return SMTC_HAL_MCU_STATUS_OK;
}

smtc_hal_mcu_status_t smtc_hal_mcu_gpio_set_state( smtc_hal_mcu_gpio_inst_t inst, smtc_hal_mcu_gpio_state_t state )
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	460b      	mov	r3, r1
 80043ee:	70fb      	strb	r3, [r7, #3]
    if( smtc_hal_mcu_gpio_stm32l4_is_real_inst( inst ) == false )
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f000 f90f 	bl	8004614 <smtc_hal_mcu_gpio_stm32l4_is_real_inst>
 80043f6:	4603      	mov	r3, r0
 80043f8:	f083 0301 	eor.w	r3, r3, #1
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d001      	beq.n	8004406 <smtc_hal_mcu_gpio_set_state+0x22>
    {
        return SMTC_HAL_MCU_STATUS_BAD_PARAMETERS;
 8004402:	2302      	movs	r3, #2
 8004404:	e019      	b.n	800443a <smtc_hal_mcu_gpio_set_state+0x56>
    }

    switch( state )
 8004406:	78fb      	ldrb	r3, [r7, #3]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d00a      	beq.n	8004422 <smtc_hal_mcu_gpio_set_state+0x3e>
 800440c:	2b01      	cmp	r3, #1
 800440e:	d111      	bne.n	8004434 <smtc_hal_mcu_gpio_set_state+0x50>
    {
    case SMTC_HAL_MCU_GPIO_STATE_HIGH:
    {
        LL_GPIO_SetOutputPin( inst->port, inst->pin );
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	685a      	ldr	r2, [r3, #4]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	4619      	mov	r1, r3
 800441a:	4610      	mov	r0, r2
 800441c:	f7ff fe3d 	bl	800409a <LL_GPIO_SetOutputPin>
        break;
 8004420:	e00a      	b.n	8004438 <smtc_hal_mcu_gpio_set_state+0x54>
    }
    case SMTC_HAL_MCU_GPIO_STATE_LOW:
    {
        LL_GPIO_ResetOutputPin( inst->port, inst->pin );
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	685a      	ldr	r2, [r3, #4]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	4619      	mov	r1, r3
 800442c:	4610      	mov	r0, r2
 800442e:	f7ff fe42 	bl	80040b6 <LL_GPIO_ResetOutputPin>
        break;
 8004432:	e001      	b.n	8004438 <smtc_hal_mcu_gpio_set_state+0x54>
    }
    default:
    {
        return SMTC_HAL_MCU_STATUS_BAD_PARAMETERS;
 8004434:	2302      	movs	r3, #2
 8004436:	e000      	b.n	800443a <smtc_hal_mcu_gpio_set_state+0x56>
    }
    }

    return SMTC_HAL_MCU_STATUS_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3708      	adds	r7, #8
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}

08004442 <smtc_hal_mcu_gpio_get_state>:

smtc_hal_mcu_status_t smtc_hal_mcu_gpio_get_state( smtc_hal_mcu_gpio_inst_t inst, smtc_hal_mcu_gpio_state_t* state )
{
 8004442:	b580      	push	{r7, lr}
 8004444:	b084      	sub	sp, #16
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
 800444a:	6039      	str	r1, [r7, #0]
    if( smtc_hal_mcu_gpio_stm32l4_is_real_inst( inst ) == false )
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f000 f8e1 	bl	8004614 <smtc_hal_mcu_gpio_stm32l4_is_real_inst>
 8004452:	4603      	mov	r3, r0
 8004454:	f083 0301 	eor.w	r3, r3, #1
 8004458:	b2db      	uxtb	r3, r3
 800445a:	2b00      	cmp	r3, #0
 800445c:	d001      	beq.n	8004462 <smtc_hal_mcu_gpio_get_state+0x20>
    {
        return SMTC_HAL_MCU_STATUS_BAD_PARAMETERS;
 800445e:	2302      	movs	r3, #2
 8004460:	e035      	b.n	80044ce <smtc_hal_mcu_gpio_get_state+0x8c>
    }

    const uint32_t pin_mode = LL_GPIO_GetPinMode( inst->port, inst->pin );
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	685a      	ldr	r2, [r3, #4]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	4619      	mov	r1, r3
 800446c:	4610      	mov	r0, r2
 800446e:	f7ff fdb3 	bl	8003fd8 <LL_GPIO_GetPinMode>
 8004472:	60f8      	str	r0, [r7, #12]

    if( pin_mode == LL_GPIO_MODE_OUTPUT )
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2b01      	cmp	r3, #1
 8004478:	d111      	bne.n	800449e <smtc_hal_mcu_gpio_get_state+0x5c>
    {
        *state = ( LL_GPIO_IsOutputPinSet( inst->port, inst->pin ) == 1 ) ? SMTC_HAL_MCU_GPIO_STATE_HIGH
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685a      	ldr	r2, [r3, #4]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	4619      	mov	r1, r3
 8004484:	4610      	mov	r0, r2
 8004486:	f7ff fdf3 	bl	8004070 <LL_GPIO_IsOutputPinSet>
 800448a:	4603      	mov	r3, r0
                                                                          : SMTC_HAL_MCU_GPIO_STATE_LOW;
 800448c:	2b01      	cmp	r3, #1
 800448e:	bf0c      	ite	eq
 8004490:	2301      	moveq	r3, #1
 8004492:	2300      	movne	r3, #0
 8004494:	b2db      	uxtb	r3, r3
 8004496:	461a      	mov	r2, r3
        *state = ( LL_GPIO_IsOutputPinSet( inst->port, inst->pin ) == 1 ) ? SMTC_HAL_MCU_GPIO_STATE_HIGH
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	701a      	strb	r2, [r3, #0]
 800449c:	e016      	b.n	80044cc <smtc_hal_mcu_gpio_get_state+0x8a>
    }
    else if( pin_mode == LL_GPIO_MODE_INPUT )
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d111      	bne.n	80044c8 <smtc_hal_mcu_gpio_get_state+0x86>
    {
         *state = ( LL_GPIO_IsInputPinSet( inst->port, inst->pin ) == 1 ) ? SMTC_HAL_MCU_GPIO_STATE_HIGH
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685a      	ldr	r2, [r3, #4]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	4619      	mov	r1, r3
 80044ae:	4610      	mov	r0, r2
 80044b0:	f7ff fdc9 	bl	8004046 <LL_GPIO_IsInputPinSet>
 80044b4:	4603      	mov	r3, r0
                                                                         : SMTC_HAL_MCU_GPIO_STATE_LOW;
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	bf0c      	ite	eq
 80044ba:	2301      	moveq	r3, #1
 80044bc:	2300      	movne	r3, #0
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	461a      	mov	r2, r3
         *state = ( LL_GPIO_IsInputPinSet( inst->port, inst->pin ) == 1 ) ? SMTC_HAL_MCU_GPIO_STATE_HIGH
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	701a      	strb	r2, [r3, #0]
 80044c6:	e001      	b.n	80044cc <smtc_hal_mcu_gpio_get_state+0x8a>
    }
    else
    {
        return SMTC_HAL_MCU_STATUS_NOT_INIT;
 80044c8:	2303      	movs	r3, #3
 80044ca:	e000      	b.n	80044ce <smtc_hal_mcu_gpio_get_state+0x8c>
    }

    return SMTC_HAL_MCU_STATUS_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3710      	adds	r7, #16
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}

080044d6 <smtc_hal_mcu_gpio_enable_irq>:

smtc_hal_mcu_status_t smtc_hal_mcu_gpio_enable_irq( smtc_hal_mcu_gpio_inst_t inst )
{
 80044d6:	b580      	push	{r7, lr}
 80044d8:	b082      	sub	sp, #8
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
    if( smtc_hal_mcu_gpio_stm32l4_is_real_inst( inst ) == false )
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 f898 	bl	8004614 <smtc_hal_mcu_gpio_stm32l4_is_real_inst>
 80044e4:	4603      	mov	r3, r0
 80044e6:	f083 0301 	eor.w	r3, r3, #1
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d001      	beq.n	80044f4 <smtc_hal_mcu_gpio_enable_irq+0x1e>
    {
        return SMTC_HAL_MCU_STATUS_BAD_PARAMETERS;
 80044f0:	2302      	movs	r3, #2
 80044f2:	e025      	b.n	8004540 <smtc_hal_mcu_gpio_enable_irq+0x6a>
    }

    if( inst->is_irq_cfged == true )
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	7b1b      	ldrb	r3, [r3, #12]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d020      	beq.n	800453e <smtc_hal_mcu_gpio_enable_irq+0x68>
    {
        if( inst->irq_cfg.is_irq_enabled == false )
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	7c1b      	ldrb	r3, [r3, #16]
 8004500:	f083 0301 	eor.w	r3, r3, #1
 8004504:	b2db      	uxtb	r3, r3
 8004506:	2b00      	cmp	r3, #0
 8004508:	d019      	beq.n	800453e <smtc_hal_mcu_gpio_enable_irq+0x68>
        {
            LL_SYSCFG_SetEXTISource( inst->irq_cfg.exti_cfg.syscfg_exti_port, inst->irq_cfg.exti_cfg.syscfg_exti_line );
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a1a      	ldr	r2, [r3, #32]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004512:	4619      	mov	r1, r3
 8004514:	4610      	mov	r0, r2
 8004516:	f7ff fe1b 	bl	8004150 <LL_SYSCFG_SetEXTISource>
            NVIC_EnableIRQ( inst->irq_cfg.exti_cfg.irq_number );
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800451e:	b25b      	sxtb	r3, r3
 8004520:	4618      	mov	r0, r3
 8004522:	f7ff fd11 	bl	8003f48 <__NVIC_EnableIRQ>
            NVIC_SetPriority( inst->irq_cfg.exti_cfg.irq_number, 0 );
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800452a:	b25b      	sxtb	r3, r3
 800452c:	2100      	movs	r1, #0
 800452e:	4618      	mov	r0, r3
 8004530:	f7ff fd28 	bl	8003f84 <__NVIC_SetPriority>

            inst->irq_cfg.is_irq_enabled = true;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	741a      	strb	r2, [r3, #16]

            return SMTC_HAL_MCU_STATUS_OK;
 800453a:	2300      	movs	r3, #0
 800453c:	e000      	b.n	8004540 <smtc_hal_mcu_gpio_enable_irq+0x6a>
        }
    }

    return SMTC_HAL_MCU_STATUS_BAD_PARAMETERS;
 800453e:	2302      	movs	r3, #2
}
 8004540:	4618      	mov	r0, r3
 8004542:	3708      	adds	r7, #8
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <smtc_hal_mcu_gpio_stm32l4_is_configured>:
 * -----------------------------------------------------------------------------
 * --- PRIVATE FUNCTIONS DEFINITION --------------------------------------------
 */

static bool smtc_hal_mcu_gpio_stm32l4_is_configured( smtc_hal_mcu_gpio_cfg_t cfg )
{
 8004548:	b480      	push	{r7}
 800454a:	b085      	sub	sp, #20
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
    for( int i = 0; i < SMTC_HAL_MCU_GPIO_STM32L4_ARRAY_SIZE; i++ )
 8004550:	2300      	movs	r3, #0
 8004552:	60fb      	str	r3, [r7, #12]
 8004554:	e028      	b.n	80045a8 <smtc_hal_mcu_gpio_stm32l4_is_configured+0x60>
    {
        if( gpio_inst_array[i].is_cfged == true )
 8004556:	4919      	ldr	r1, [pc, #100]	; (80045bc <smtc_hal_mcu_gpio_stm32l4_is_configured+0x74>)
 8004558:	68fa      	ldr	r2, [r7, #12]
 800455a:	4613      	mov	r3, r2
 800455c:	005b      	lsls	r3, r3, #1
 800455e:	4413      	add	r3, r2
 8004560:	011b      	lsls	r3, r3, #4
 8004562:	440b      	add	r3, r1
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d01b      	beq.n	80045a2 <smtc_hal_mcu_gpio_stm32l4_is_configured+0x5a>
        {
            if( ( gpio_inst_array[i].port == cfg->port ) && ( gpio_inst_array[i].pin == cfg->pin ) )
 800456a:	4914      	ldr	r1, [pc, #80]	; (80045bc <smtc_hal_mcu_gpio_stm32l4_is_configured+0x74>)
 800456c:	68fa      	ldr	r2, [r7, #12]
 800456e:	4613      	mov	r3, r2
 8004570:	005b      	lsls	r3, r3, #1
 8004572:	4413      	add	r3, r2
 8004574:	011b      	lsls	r3, r3, #4
 8004576:	440b      	add	r3, r1
 8004578:	3304      	adds	r3, #4
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	429a      	cmp	r2, r3
 8004582:	d10e      	bne.n	80045a2 <smtc_hal_mcu_gpio_stm32l4_is_configured+0x5a>
 8004584:	490d      	ldr	r1, [pc, #52]	; (80045bc <smtc_hal_mcu_gpio_stm32l4_is_configured+0x74>)
 8004586:	68fa      	ldr	r2, [r7, #12]
 8004588:	4613      	mov	r3, r2
 800458a:	005b      	lsls	r3, r3, #1
 800458c:	4413      	add	r3, r2
 800458e:	011b      	lsls	r3, r3, #4
 8004590:	440b      	add	r3, r1
 8004592:	3308      	adds	r3, #8
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	429a      	cmp	r2, r3
 800459c:	d101      	bne.n	80045a2 <smtc_hal_mcu_gpio_stm32l4_is_configured+0x5a>
            {
                return true;
 800459e:	2301      	movs	r3, #1
 80045a0:	e006      	b.n	80045b0 <smtc_hal_mcu_gpio_stm32l4_is_configured+0x68>
    for( int i = 0; i < SMTC_HAL_MCU_GPIO_STM32L4_ARRAY_SIZE; i++ )
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	3301      	adds	r3, #1
 80045a6:	60fb      	str	r3, [r7, #12]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2b0f      	cmp	r3, #15
 80045ac:	ddd3      	ble.n	8004556 <smtc_hal_mcu_gpio_stm32l4_is_configured+0xe>
            }
        }
    }

    return false;
 80045ae:	2300      	movs	r3, #0
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3714      	adds	r7, #20
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr
 80045bc:	2000070c 	.word	0x2000070c

080045c0 <smtc_hal_mcu_gpio_stm32l4_get_free_slot>:

static struct smtc_hal_mcu_gpio_inst_s* smtc_hal_mcu_gpio_stm32l4_get_free_slot( void )
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
    for( int i = 0; i < SMTC_HAL_MCU_GPIO_STM32L4_ARRAY_SIZE; i++ )
 80045c6:	2300      	movs	r3, #0
 80045c8:	607b      	str	r3, [r7, #4]
 80045ca:	e017      	b.n	80045fc <smtc_hal_mcu_gpio_stm32l4_get_free_slot+0x3c>
    {
        if( gpio_inst_array[i].is_cfged == false )
 80045cc:	4910      	ldr	r1, [pc, #64]	; (8004610 <smtc_hal_mcu_gpio_stm32l4_get_free_slot+0x50>)
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	4613      	mov	r3, r2
 80045d2:	005b      	lsls	r3, r3, #1
 80045d4:	4413      	add	r3, r2
 80045d6:	011b      	lsls	r3, r3, #4
 80045d8:	440b      	add	r3, r1
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	f083 0301 	eor.w	r3, r3, #1
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d007      	beq.n	80045f6 <smtc_hal_mcu_gpio_stm32l4_get_free_slot+0x36>
        {
            return &gpio_inst_array[i];
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	4613      	mov	r3, r2
 80045ea:	005b      	lsls	r3, r3, #1
 80045ec:	4413      	add	r3, r2
 80045ee:	011b      	lsls	r3, r3, #4
 80045f0:	4a07      	ldr	r2, [pc, #28]	; (8004610 <smtc_hal_mcu_gpio_stm32l4_get_free_slot+0x50>)
 80045f2:	4413      	add	r3, r2
 80045f4:	e006      	b.n	8004604 <smtc_hal_mcu_gpio_stm32l4_get_free_slot+0x44>
    for( int i = 0; i < SMTC_HAL_MCU_GPIO_STM32L4_ARRAY_SIZE; i++ )
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	3301      	adds	r3, #1
 80045fa:	607b      	str	r3, [r7, #4]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2b0f      	cmp	r3, #15
 8004600:	dde4      	ble.n	80045cc <smtc_hal_mcu_gpio_stm32l4_get_free_slot+0xc>
        }
    }

    return NULL;
 8004602:	2300      	movs	r3, #0
}
 8004604:	4618      	mov	r0, r3
 8004606:	370c      	adds	r7, #12
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr
 8004610:	2000070c 	.word	0x2000070c

08004614 <smtc_hal_mcu_gpio_stm32l4_is_real_inst>:

static bool smtc_hal_mcu_gpio_stm32l4_is_real_inst( smtc_hal_mcu_gpio_inst_t inst )
{
 8004614:	b480      	push	{r7}
 8004616:	b085      	sub	sp, #20
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
    for( int i = 0; i < SMTC_HAL_MCU_GPIO_STM32L4_ARRAY_SIZE; i++ )
 800461c:	2300      	movs	r3, #0
 800461e:	60fb      	str	r3, [r7, #12]
 8004620:	e00e      	b.n	8004640 <smtc_hal_mcu_gpio_stm32l4_is_real_inst+0x2c>
    {
        if( inst == &gpio_inst_array[i] )
 8004622:	68fa      	ldr	r2, [r7, #12]
 8004624:	4613      	mov	r3, r2
 8004626:	005b      	lsls	r3, r3, #1
 8004628:	4413      	add	r3, r2
 800462a:	011b      	lsls	r3, r3, #4
 800462c:	4a09      	ldr	r2, [pc, #36]	; (8004654 <smtc_hal_mcu_gpio_stm32l4_is_real_inst+0x40>)
 800462e:	4413      	add	r3, r2
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	429a      	cmp	r2, r3
 8004634:	d101      	bne.n	800463a <smtc_hal_mcu_gpio_stm32l4_is_real_inst+0x26>
        {
            return true;
 8004636:	2301      	movs	r3, #1
 8004638:	e006      	b.n	8004648 <smtc_hal_mcu_gpio_stm32l4_is_real_inst+0x34>
    for( int i = 0; i < SMTC_HAL_MCU_GPIO_STM32L4_ARRAY_SIZE; i++ )
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	3301      	adds	r3, #1
 800463e:	60fb      	str	r3, [r7, #12]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2b0f      	cmp	r3, #15
 8004644:	dded      	ble.n	8004622 <smtc_hal_mcu_gpio_stm32l4_is_real_inst+0xe>
        }
    }

    return false;
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	3714      	adds	r7, #20
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr
 8004654:	2000070c 	.word	0x2000070c

08004658 <smtc_hal_mcu_gpio_stm32l4_enable_clock>:

static smtc_hal_mcu_status_t smtc_hal_mcu_gpio_stm32l4_enable_clock( GPIO_TypeDef* port )
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
    if( port == GPIOA )
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004666:	d103      	bne.n	8004670 <smtc_hal_mcu_gpio_stm32l4_enable_clock+0x18>
    {
        LL_AHB2_GRP1_EnableClock( LL_AHB2_GRP1_PERIPH_GPIOA );
 8004668:	2001      	movs	r0, #1
 800466a:	f7ff fd33 	bl	80040d4 <LL_AHB2_GRP1_EnableClock>
 800466e:	e039      	b.n	80046e4 <smtc_hal_mcu_gpio_stm32l4_enable_clock+0x8c>
    }
    else if( port == GPIOB )
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4a1f      	ldr	r2, [pc, #124]	; (80046f0 <smtc_hal_mcu_gpio_stm32l4_enable_clock+0x98>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d103      	bne.n	8004680 <smtc_hal_mcu_gpio_stm32l4_enable_clock+0x28>
    {
        LL_AHB2_GRP1_EnableClock( LL_AHB2_GRP1_PERIPH_GPIOB );
 8004678:	2002      	movs	r0, #2
 800467a:	f7ff fd2b 	bl	80040d4 <LL_AHB2_GRP1_EnableClock>
 800467e:	e031      	b.n	80046e4 <smtc_hal_mcu_gpio_stm32l4_enable_clock+0x8c>
    }
    else if( port == GPIOC )
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4a1c      	ldr	r2, [pc, #112]	; (80046f4 <smtc_hal_mcu_gpio_stm32l4_enable_clock+0x9c>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d103      	bne.n	8004690 <smtc_hal_mcu_gpio_stm32l4_enable_clock+0x38>
    {
        LL_AHB2_GRP1_EnableClock( LL_AHB2_GRP1_PERIPH_GPIOC );
 8004688:	2004      	movs	r0, #4
 800468a:	f7ff fd23 	bl	80040d4 <LL_AHB2_GRP1_EnableClock>
 800468e:	e029      	b.n	80046e4 <smtc_hal_mcu_gpio_stm32l4_enable_clock+0x8c>
    }
    else if( port == GPIOD )
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4a19      	ldr	r2, [pc, #100]	; (80046f8 <smtc_hal_mcu_gpio_stm32l4_enable_clock+0xa0>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d103      	bne.n	80046a0 <smtc_hal_mcu_gpio_stm32l4_enable_clock+0x48>
    {
        LL_AHB2_GRP1_EnableClock( LL_AHB2_GRP1_PERIPH_GPIOD );
 8004698:	2008      	movs	r0, #8
 800469a:	f7ff fd1b 	bl	80040d4 <LL_AHB2_GRP1_EnableClock>
 800469e:	e021      	b.n	80046e4 <smtc_hal_mcu_gpio_stm32l4_enable_clock+0x8c>
    }
#if defined( GPIOE )
    else if( port == GPIOE )
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a16      	ldr	r2, [pc, #88]	; (80046fc <smtc_hal_mcu_gpio_stm32l4_enable_clock+0xa4>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d103      	bne.n	80046b0 <smtc_hal_mcu_gpio_stm32l4_enable_clock+0x58>
    {
        LL_AHB2_GRP1_EnableClock( LL_AHB2_GRP1_PERIPH_GPIOE );
 80046a8:	2010      	movs	r0, #16
 80046aa:	f7ff fd13 	bl	80040d4 <LL_AHB2_GRP1_EnableClock>
 80046ae:	e019      	b.n	80046e4 <smtc_hal_mcu_gpio_stm32l4_enable_clock+0x8c>
    }
#endif
#if defined( GPIOF )
    else if( port == GPIOF )
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4a13      	ldr	r2, [pc, #76]	; (8004700 <smtc_hal_mcu_gpio_stm32l4_enable_clock+0xa8>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d103      	bne.n	80046c0 <smtc_hal_mcu_gpio_stm32l4_enable_clock+0x68>
    {
        LL_AHB2_GRP1_EnableClock( LL_AHB2_GRP1_PERIPH_GPIOF );
 80046b8:	2020      	movs	r0, #32
 80046ba:	f7ff fd0b 	bl	80040d4 <LL_AHB2_GRP1_EnableClock>
 80046be:	e011      	b.n	80046e4 <smtc_hal_mcu_gpio_stm32l4_enable_clock+0x8c>
    }
#endif
#if defined( GPIOG )
    else if( port == GPIOG )
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4a10      	ldr	r2, [pc, #64]	; (8004704 <smtc_hal_mcu_gpio_stm32l4_enable_clock+0xac>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d103      	bne.n	80046d0 <smtc_hal_mcu_gpio_stm32l4_enable_clock+0x78>
    {
        LL_AHB2_GRP1_EnableClock( LL_AHB2_GRP1_PERIPH_GPIOG );
 80046c8:	2040      	movs	r0, #64	; 0x40
 80046ca:	f7ff fd03 	bl	80040d4 <LL_AHB2_GRP1_EnableClock>
 80046ce:	e009      	b.n	80046e4 <smtc_hal_mcu_gpio_stm32l4_enable_clock+0x8c>
    }
#endif
#if defined( GPIOH )
    else if( port == GPIOH )
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4a0d      	ldr	r2, [pc, #52]	; (8004708 <smtc_hal_mcu_gpio_stm32l4_enable_clock+0xb0>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d103      	bne.n	80046e0 <smtc_hal_mcu_gpio_stm32l4_enable_clock+0x88>
    {
        LL_AHB2_GRP1_EnableClock( LL_AHB2_GRP1_PERIPH_GPIOH );
 80046d8:	2080      	movs	r0, #128	; 0x80
 80046da:	f7ff fcfb 	bl	80040d4 <LL_AHB2_GRP1_EnableClock>
 80046de:	e001      	b.n	80046e4 <smtc_hal_mcu_gpio_stm32l4_enable_clock+0x8c>
        LL_AHB2_GRP1_EnableClock( LL_AHB2_GRP1_PERIPH_GPIOI );
    }
#endif
    else
    {
        return SMTC_HAL_MCU_STATUS_BAD_PARAMETERS;
 80046e0:	2302      	movs	r3, #2
 80046e2:	e000      	b.n	80046e6 <smtc_hal_mcu_gpio_stm32l4_enable_clock+0x8e>
    }

    return SMTC_HAL_MCU_STATUS_OK;
 80046e4:	2300      	movs	r3, #0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3708      	adds	r7, #8
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	48000400 	.word	0x48000400
 80046f4:	48000800 	.word	0x48000800
 80046f8:	48000c00 	.word	0x48000c00
 80046fc:	48001000 	.word	0x48001000
 8004700:	48001400 	.word	0x48001400
 8004704:	48001800 	.word	0x48001800
 8004708:	48001c00 	.word	0x48001c00

0800470c <smtc_hal_mcu_gpio_stm32l4_get_exti_cfg>:
    return ( is_enabled_int != 0 ) ? true : false;
}

static smtc_hal_mcu_status_t smtc_hal_mcu_gpio_stm32l4_get_exti_cfg( smtc_hal_mcu_gpio_inst_t          inst,
                                                                     smtc_hal_mcu_gpio_irq_exti_cfg_t* exti_cfg )
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
    if( inst->pin == LL_GPIO_PIN_0 )
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	2b01      	cmp	r3, #1
 800471c:	d10a      	bne.n	8004734 <smtc_hal_mcu_gpio_stm32l4_get_exti_cfg+0x28>
    {
        exti_cfg->exti_line        = LL_EXTI_LINE_0;
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	2201      	movs	r2, #1
 8004722:	609a      	str	r2, [r3, #8]
        exti_cfg->syscfg_exti_line = LL_SYSCFG_EXTI_LINE0;
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 800472a:	605a      	str	r2, [r3, #4]
        exti_cfg->irq_number       = EXTI0_IRQn;
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	2206      	movs	r2, #6
 8004730:	60da      	str	r2, [r3, #12]
 8004732:	e0e6      	b.n	8004902 <smtc_hal_mcu_gpio_stm32l4_get_exti_cfg+0x1f6>
    }
    else if( inst->pin == LL_GPIO_PIN_1 )
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	2b02      	cmp	r3, #2
 800473a:	d10a      	bne.n	8004752 <smtc_hal_mcu_gpio_stm32l4_get_exti_cfg+0x46>
    {
        exti_cfg->exti_line        = LL_EXTI_LINE_1;
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	2202      	movs	r2, #2
 8004740:	609a      	str	r2, [r3, #8]
        exti_cfg->syscfg_exti_line = LL_SYSCFG_EXTI_LINE1;
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
 8004748:	605a      	str	r2, [r3, #4]
        exti_cfg->irq_number       = EXTI1_IRQn;
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	2207      	movs	r2, #7
 800474e:	60da      	str	r2, [r3, #12]
 8004750:	e0d7      	b.n	8004902 <smtc_hal_mcu_gpio_stm32l4_get_exti_cfg+0x1f6>
    }
    else if( inst->pin == LL_GPIO_PIN_2 )
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	2b04      	cmp	r3, #4
 8004758:	d10a      	bne.n	8004770 <smtc_hal_mcu_gpio_stm32l4_get_exti_cfg+0x64>
    {
        exti_cfg->exti_line        = LL_EXTI_LINE_2;
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	2204      	movs	r2, #4
 800475e:	609a      	str	r2, [r3, #8]
        exti_cfg->syscfg_exti_line = LL_SYSCFG_EXTI_LINE2;
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 8004766:	605a      	str	r2, [r3, #4]
        exti_cfg->irq_number       = EXTI2_IRQn;
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	2208      	movs	r2, #8
 800476c:	60da      	str	r2, [r3, #12]
 800476e:	e0c8      	b.n	8004902 <smtc_hal_mcu_gpio_stm32l4_get_exti_cfg+0x1f6>
    }
    else if( inst->pin == LL_GPIO_PIN_3 )
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	2b08      	cmp	r3, #8
 8004776:	d10a      	bne.n	800478e <smtc_hal_mcu_gpio_stm32l4_get_exti_cfg+0x82>
    {
        exti_cfg->exti_line        = LL_EXTI_LINE_3;
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	2208      	movs	r2, #8
 800477c:	609a      	str	r2, [r3, #8]
        exti_cfg->syscfg_exti_line = LL_SYSCFG_EXTI_LINE3;
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8004784:	605a      	str	r2, [r3, #4]
        exti_cfg->irq_number       = EXTI3_IRQn;
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	2209      	movs	r2, #9
 800478a:	60da      	str	r2, [r3, #12]
 800478c:	e0b9      	b.n	8004902 <smtc_hal_mcu_gpio_stm32l4_get_exti_cfg+0x1f6>
    }
    else if( inst->pin == LL_GPIO_PIN_4 )
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	2b10      	cmp	r3, #16
 8004794:	d109      	bne.n	80047aa <smtc_hal_mcu_gpio_stm32l4_get_exti_cfg+0x9e>
    {
        exti_cfg->exti_line        = LL_EXTI_LINE_4;
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	2210      	movs	r2, #16
 800479a:	609a      	str	r2, [r3, #8]
        exti_cfg->syscfg_exti_line = LL_SYSCFG_EXTI_LINE4;
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	4a81      	ldr	r2, [pc, #516]	; (80049a4 <smtc_hal_mcu_gpio_stm32l4_get_exti_cfg+0x298>)
 80047a0:	605a      	str	r2, [r3, #4]
        exti_cfg->irq_number       = EXTI4_IRQn;
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	220a      	movs	r2, #10
 80047a6:	60da      	str	r2, [r3, #12]
 80047a8:	e0ab      	b.n	8004902 <smtc_hal_mcu_gpio_stm32l4_get_exti_cfg+0x1f6>
    }
    else if( inst->pin == LL_GPIO_PIN_5 )
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	2b20      	cmp	r3, #32
 80047b0:	d109      	bne.n	80047c6 <smtc_hal_mcu_gpio_stm32l4_get_exti_cfg+0xba>
    {
        exti_cfg->exti_line        = LL_EXTI_LINE_5;
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	2220      	movs	r2, #32
 80047b6:	609a      	str	r2, [r3, #8]
        exti_cfg->syscfg_exti_line = LL_SYSCFG_EXTI_LINE5;
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	4a7b      	ldr	r2, [pc, #492]	; (80049a8 <smtc_hal_mcu_gpio_stm32l4_get_exti_cfg+0x29c>)
 80047bc:	605a      	str	r2, [r3, #4]
        exti_cfg->irq_number       = EXTI9_5_IRQn;
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	2217      	movs	r2, #23
 80047c2:	60da      	str	r2, [r3, #12]
 80047c4:	e09d      	b.n	8004902 <smtc_hal_mcu_gpio_stm32l4_get_exti_cfg+0x1f6>
    }
    else if( inst->pin == LL_GPIO_PIN_6 )
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	2b40      	cmp	r3, #64	; 0x40
 80047cc:	d109      	bne.n	80047e2 <smtc_hal_mcu_gpio_stm32l4_get_exti_cfg+0xd6>
    {
        exti_cfg->exti_line        = LL_EXTI_LINE_6;
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	2240      	movs	r2, #64	; 0x40
 80047d2:	609a      	str	r2, [r3, #8]
        exti_cfg->syscfg_exti_line = LL_SYSCFG_EXTI_LINE6;
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	4a75      	ldr	r2, [pc, #468]	; (80049ac <smtc_hal_mcu_gpio_stm32l4_get_exti_cfg+0x2a0>)
 80047d8:	605a      	str	r2, [r3, #4]
        exti_cfg->irq_number       = EXTI9_5_IRQn;
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	2217      	movs	r2, #23
 80047de:	60da      	str	r2, [r3, #12]
 80047e0:	e08f      	b.n	8004902 <smtc_hal_mcu_gpio_stm32l4_get_exti_cfg+0x1f6>
    }
    else if( inst->pin == LL_GPIO_PIN_7 )
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	2b80      	cmp	r3, #128	; 0x80
 80047e8:	d109      	bne.n	80047fe <smtc_hal_mcu_gpio_stm32l4_get_exti_cfg+0xf2>
    {
        exti_cfg->exti_line        = LL_EXTI_LINE_7;
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	2280      	movs	r2, #128	; 0x80
 80047ee:	609a      	str	r2, [r3, #8]
        exti_cfg->syscfg_exti_line = LL_SYSCFG_EXTI_LINE7;
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	4a6f      	ldr	r2, [pc, #444]	; (80049b0 <smtc_hal_mcu_gpio_stm32l4_get_exti_cfg+0x2a4>)
 80047f4:	605a      	str	r2, [r3, #4]
        exti_cfg->irq_number       = EXTI9_5_IRQn;
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	2217      	movs	r2, #23
 80047fa:	60da      	str	r2, [r3, #12]
 80047fc:	e081      	b.n	8004902 <smtc_hal_mcu_gpio_stm32l4_get_exti_cfg+0x1f6>
    }
    else if( inst->pin == LL_GPIO_PIN_8 )
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004806:	d10a      	bne.n	800481e <smtc_hal_mcu_gpio_stm32l4_get_exti_cfg+0x112>
    {
        exti_cfg->exti_line        = LL_EXTI_LINE_8;
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800480e:	609a      	str	r2, [r3, #8]
        exti_cfg->syscfg_exti_line = LL_SYSCFG_EXTI_LINE8;
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	4a68      	ldr	r2, [pc, #416]	; (80049b4 <smtc_hal_mcu_gpio_stm32l4_get_exti_cfg+0x2a8>)
 8004814:	605a      	str	r2, [r3, #4]
        exti_cfg->irq_number       = EXTI9_5_IRQn;
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	2217      	movs	r2, #23
 800481a:	60da      	str	r2, [r3, #12]
 800481c:	e071      	b.n	8004902 <smtc_hal_mcu_gpio_stm32l4_get_exti_cfg+0x1f6>
    }
    else if( inst->pin == LL_GPIO_PIN_9 )
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004826:	d10a      	bne.n	800483e <smtc_hal_mcu_gpio_stm32l4_get_exti_cfg+0x132>
    {
        exti_cfg->exti_line        = LL_EXTI_LINE_9;
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800482e:	609a      	str	r2, [r3, #8]
        exti_cfg->syscfg_exti_line = LL_SYSCFG_EXTI_LINE9;
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	4a61      	ldr	r2, [pc, #388]	; (80049b8 <smtc_hal_mcu_gpio_stm32l4_get_exti_cfg+0x2ac>)
 8004834:	605a      	str	r2, [r3, #4]
        exti_cfg->irq_number       = EXTI9_5_IRQn;
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	2217      	movs	r2, #23
 800483a:	60da      	str	r2, [r3, #12]
 800483c:	e061      	b.n	8004902 <smtc_hal_mcu_gpio_stm32l4_get_exti_cfg+0x1f6>
    }
    else if( inst->pin == LL_GPIO_PIN_10 )
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004846:	d10a      	bne.n	800485e <smtc_hal_mcu_gpio_stm32l4_get_exti_cfg+0x152>
    {
        exti_cfg->exti_line        = LL_EXTI_LINE_10;
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800484e:	609a      	str	r2, [r3, #8]
        exti_cfg->syscfg_exti_line = LL_SYSCFG_EXTI_LINE10;
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	4a5a      	ldr	r2, [pc, #360]	; (80049bc <smtc_hal_mcu_gpio_stm32l4_get_exti_cfg+0x2b0>)
 8004854:	605a      	str	r2, [r3, #4]
        exti_cfg->irq_number       = EXTI15_10_IRQn;
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	2228      	movs	r2, #40	; 0x28
 800485a:	60da      	str	r2, [r3, #12]
 800485c:	e051      	b.n	8004902 <smtc_hal_mcu_gpio_stm32l4_get_exti_cfg+0x1f6>
    }
    else if( inst->pin == LL_GPIO_PIN_11 )
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004866:	d10a      	bne.n	800487e <smtc_hal_mcu_gpio_stm32l4_get_exti_cfg+0x172>
    {
        exti_cfg->exti_line        = LL_EXTI_LINE_11;
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800486e:	609a      	str	r2, [r3, #8]
        exti_cfg->syscfg_exti_line = LL_SYSCFG_EXTI_LINE11;
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	4a53      	ldr	r2, [pc, #332]	; (80049c0 <smtc_hal_mcu_gpio_stm32l4_get_exti_cfg+0x2b4>)
 8004874:	605a      	str	r2, [r3, #4]
        exti_cfg->irq_number       = EXTI15_10_IRQn;
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	2228      	movs	r2, #40	; 0x28
 800487a:	60da      	str	r2, [r3, #12]
 800487c:	e041      	b.n	8004902 <smtc_hal_mcu_gpio_stm32l4_get_exti_cfg+0x1f6>
    }
    else if( inst->pin == LL_GPIO_PIN_12 )
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004886:	d10a      	bne.n	800489e <smtc_hal_mcu_gpio_stm32l4_get_exti_cfg+0x192>
    {
        exti_cfg->exti_line        = LL_EXTI_LINE_12;
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800488e:	609a      	str	r2, [r3, #8]
        exti_cfg->syscfg_exti_line = LL_SYSCFG_EXTI_LINE12;
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	4a4c      	ldr	r2, [pc, #304]	; (80049c4 <smtc_hal_mcu_gpio_stm32l4_get_exti_cfg+0x2b8>)
 8004894:	605a      	str	r2, [r3, #4]
        exti_cfg->irq_number       = EXTI15_10_IRQn;
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	2228      	movs	r2, #40	; 0x28
 800489a:	60da      	str	r2, [r3, #12]
 800489c:	e031      	b.n	8004902 <smtc_hal_mcu_gpio_stm32l4_get_exti_cfg+0x1f6>
    }
    else if( inst->pin == LL_GPIO_PIN_13 )
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048a6:	d10a      	bne.n	80048be <smtc_hal_mcu_gpio_stm32l4_get_exti_cfg+0x1b2>
    {
        exti_cfg->exti_line        = LL_EXTI_LINE_13;
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80048ae:	609a      	str	r2, [r3, #8]
        exti_cfg->syscfg_exti_line = LL_SYSCFG_EXTI_LINE13;
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	4a45      	ldr	r2, [pc, #276]	; (80049c8 <smtc_hal_mcu_gpio_stm32l4_get_exti_cfg+0x2bc>)
 80048b4:	605a      	str	r2, [r3, #4]
        exti_cfg->irq_number       = EXTI15_10_IRQn;
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	2228      	movs	r2, #40	; 0x28
 80048ba:	60da      	str	r2, [r3, #12]
 80048bc:	e021      	b.n	8004902 <smtc_hal_mcu_gpio_stm32l4_get_exti_cfg+0x1f6>
    }
    else if( inst->pin == LL_GPIO_PIN_14 )
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048c6:	d10a      	bne.n	80048de <smtc_hal_mcu_gpio_stm32l4_get_exti_cfg+0x1d2>
    {
        exti_cfg->exti_line        = LL_EXTI_LINE_14;
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80048ce:	609a      	str	r2, [r3, #8]
        exti_cfg->syscfg_exti_line = LL_SYSCFG_EXTI_LINE14;
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	4a3e      	ldr	r2, [pc, #248]	; (80049cc <smtc_hal_mcu_gpio_stm32l4_get_exti_cfg+0x2c0>)
 80048d4:	605a      	str	r2, [r3, #4]
        exti_cfg->irq_number       = EXTI15_10_IRQn;
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	2228      	movs	r2, #40	; 0x28
 80048da:	60da      	str	r2, [r3, #12]
 80048dc:	e011      	b.n	8004902 <smtc_hal_mcu_gpio_stm32l4_get_exti_cfg+0x1f6>
    }
    else if( inst->pin == LL_GPIO_PIN_15 )
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048e6:	d10a      	bne.n	80048fe <smtc_hal_mcu_gpio_stm32l4_get_exti_cfg+0x1f2>
    {
        exti_cfg->exti_line        = LL_EXTI_LINE_15;
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80048ee:	609a      	str	r2, [r3, #8]
        exti_cfg->syscfg_exti_line = LL_SYSCFG_EXTI_LINE15;
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	4a37      	ldr	r2, [pc, #220]	; (80049d0 <smtc_hal_mcu_gpio_stm32l4_get_exti_cfg+0x2c4>)
 80048f4:	605a      	str	r2, [r3, #4]
        exti_cfg->irq_number       = EXTI15_10_IRQn;
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	2228      	movs	r2, #40	; 0x28
 80048fa:	60da      	str	r2, [r3, #12]
 80048fc:	e001      	b.n	8004902 <smtc_hal_mcu_gpio_stm32l4_get_exti_cfg+0x1f6>
    }
    else
    {
        return SMTC_HAL_MCU_STATUS_BAD_PARAMETERS;
 80048fe:	2302      	movs	r3, #2
 8004900:	e04a      	b.n	8004998 <smtc_hal_mcu_gpio_stm32l4_get_exti_cfg+0x28c>
    }

    if( inst->port == GPIOA )
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800490a:	d103      	bne.n	8004914 <smtc_hal_mcu_gpio_stm32l4_get_exti_cfg+0x208>
    {
        exti_cfg->syscfg_exti_port = LL_SYSCFG_EXTI_PORTA;
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	2200      	movs	r2, #0
 8004910:	601a      	str	r2, [r3, #0]
 8004912:	e040      	b.n	8004996 <smtc_hal_mcu_gpio_stm32l4_get_exti_cfg+0x28a>
    }
    else if( inst->port == GPIOB )
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	4a2e      	ldr	r2, [pc, #184]	; (80049d4 <smtc_hal_mcu_gpio_stm32l4_get_exti_cfg+0x2c8>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d103      	bne.n	8004926 <smtc_hal_mcu_gpio_stm32l4_get_exti_cfg+0x21a>
    {
        exti_cfg->syscfg_exti_port = LL_SYSCFG_EXTI_PORTB;
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	2201      	movs	r2, #1
 8004922:	601a      	str	r2, [r3, #0]
 8004924:	e037      	b.n	8004996 <smtc_hal_mcu_gpio_stm32l4_get_exti_cfg+0x28a>
    }
    else if( inst->port == GPIOC )
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	4a2b      	ldr	r2, [pc, #172]	; (80049d8 <smtc_hal_mcu_gpio_stm32l4_get_exti_cfg+0x2cc>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d103      	bne.n	8004938 <smtc_hal_mcu_gpio_stm32l4_get_exti_cfg+0x22c>
    {
        exti_cfg->syscfg_exti_port = LL_SYSCFG_EXTI_PORTC;
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	2202      	movs	r2, #2
 8004934:	601a      	str	r2, [r3, #0]
 8004936:	e02e      	b.n	8004996 <smtc_hal_mcu_gpio_stm32l4_get_exti_cfg+0x28a>
    }
    else if( inst->port == GPIOD )
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	4a27      	ldr	r2, [pc, #156]	; (80049dc <smtc_hal_mcu_gpio_stm32l4_get_exti_cfg+0x2d0>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d103      	bne.n	800494a <smtc_hal_mcu_gpio_stm32l4_get_exti_cfg+0x23e>
    {
        exti_cfg->syscfg_exti_port = LL_SYSCFG_EXTI_PORTD;
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	2203      	movs	r2, #3
 8004946:	601a      	str	r2, [r3, #0]
 8004948:	e025      	b.n	8004996 <smtc_hal_mcu_gpio_stm32l4_get_exti_cfg+0x28a>
    }
#if defined( GPIOE )
    else if( inst->port == GPIOE )
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	4a24      	ldr	r2, [pc, #144]	; (80049e0 <smtc_hal_mcu_gpio_stm32l4_get_exti_cfg+0x2d4>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d103      	bne.n	800495c <smtc_hal_mcu_gpio_stm32l4_get_exti_cfg+0x250>
    {
        exti_cfg->syscfg_exti_port = LL_SYSCFG_EXTI_PORTE;
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	2204      	movs	r2, #4
 8004958:	601a      	str	r2, [r3, #0]
 800495a:	e01c      	b.n	8004996 <smtc_hal_mcu_gpio_stm32l4_get_exti_cfg+0x28a>
    }
#endif
#if defined( GPIOF )
    else if( inst->port == GPIOF )
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	4a20      	ldr	r2, [pc, #128]	; (80049e4 <smtc_hal_mcu_gpio_stm32l4_get_exti_cfg+0x2d8>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d103      	bne.n	800496e <smtc_hal_mcu_gpio_stm32l4_get_exti_cfg+0x262>
    {
        exti_cfg->syscfg_exti_port = LL_SYSCFG_EXTI_PORTF;
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	2205      	movs	r2, #5
 800496a:	601a      	str	r2, [r3, #0]
 800496c:	e013      	b.n	8004996 <smtc_hal_mcu_gpio_stm32l4_get_exti_cfg+0x28a>
    }
#endif
#if defined( GPIOG )
    else if( inst->port == GPIOG )
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	4a1d      	ldr	r2, [pc, #116]	; (80049e8 <smtc_hal_mcu_gpio_stm32l4_get_exti_cfg+0x2dc>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d103      	bne.n	8004980 <smtc_hal_mcu_gpio_stm32l4_get_exti_cfg+0x274>
    {
        exti_cfg->syscfg_exti_port = LL_SYSCFG_EXTI_PORTG;
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	2206      	movs	r2, #6
 800497c:	601a      	str	r2, [r3, #0]
 800497e:	e00a      	b.n	8004996 <smtc_hal_mcu_gpio_stm32l4_get_exti_cfg+0x28a>
    }
#endif
#if defined( GPIOH )
    else if( inst->port == GPIOH )
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	4a19      	ldr	r2, [pc, #100]	; (80049ec <smtc_hal_mcu_gpio_stm32l4_get_exti_cfg+0x2e0>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d103      	bne.n	8004992 <smtc_hal_mcu_gpio_stm32l4_get_exti_cfg+0x286>
    {
        exti_cfg->syscfg_exti_port = LL_SYSCFG_EXTI_PORTH;
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	2207      	movs	r2, #7
 800498e:	601a      	str	r2, [r3, #0]
 8004990:	e001      	b.n	8004996 <smtc_hal_mcu_gpio_stm32l4_get_exti_cfg+0x28a>
        exti_cfg->syscfg_exti_port = LL_SYSCFG_EXTI_PORTI;
    }
#endif
    else
    {
        return SMTC_HAL_MCU_STATUS_BAD_PARAMETERS;
 8004992:	2302      	movs	r3, #2
 8004994:	e000      	b.n	8004998 <smtc_hal_mcu_gpio_stm32l4_get_exti_cfg+0x28c>
    }

    return SMTC_HAL_MCU_STATUS_OK;
 8004996:	2300      	movs	r3, #0
}
 8004998:	4618      	mov	r0, r3
 800499a:	370c      	adds	r7, #12
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr
 80049a4:	000f0001 	.word	0x000f0001
 80049a8:	00f00001 	.word	0x00f00001
 80049ac:	0f000001 	.word	0x0f000001
 80049b0:	f0000001 	.word	0xf0000001
 80049b4:	000f0002 	.word	0x000f0002
 80049b8:	00f00002 	.word	0x00f00002
 80049bc:	0f000002 	.word	0x0f000002
 80049c0:	f0000002 	.word	0xf0000002
 80049c4:	000f0003 	.word	0x000f0003
 80049c8:	00f00003 	.word	0x00f00003
 80049cc:	0f000003 	.word	0x0f000003
 80049d0:	f0000003 	.word	0xf0000003
 80049d4:	48000400 	.word	0x48000400
 80049d8:	48000800 	.word	0x48000800
 80049dc:	48000c00 	.word	0x48000c00
 80049e0:	48001000 	.word	0x48001000
 80049e4:	48001400 	.word	0x48001400
 80049e8:	48001800 	.word	0x48001800
 80049ec:	48001c00 	.word	0x48001c00

080049f0 <smtc_hal_mcu_gpio_stm32l4_get_trigger>:

static smtc_hal_mcu_status_t smtc_hal_mcu_gpio_stm32l4_get_trigger( smtc_hal_mcu_gpio_irq_mode_t mode,
                                                                    uint32_t*                    trigger )
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	4603      	mov	r3, r0
 80049f8:	6039      	str	r1, [r7, #0]
 80049fa:	71fb      	strb	r3, [r7, #7]
    switch( mode )
 80049fc:	79fb      	ldrb	r3, [r7, #7]
 80049fe:	2b03      	cmp	r3, #3
 8004a00:	d81a      	bhi.n	8004a38 <smtc_hal_mcu_gpio_stm32l4_get_trigger+0x48>
 8004a02:	a201      	add	r2, pc, #4	; (adr r2, 8004a08 <smtc_hal_mcu_gpio_stm32l4_get_trigger+0x18>)
 8004a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a08:	08004a19 	.word	0x08004a19
 8004a0c:	08004a21 	.word	0x08004a21
 8004a10:	08004a29 	.word	0x08004a29
 8004a14:	08004a31 	.word	0x08004a31
    {
    case SMTC_HAL_MCU_GPIO_IRQ_MODE_OFF:
    {
        *trigger = LL_EXTI_TRIGGER_NONE;
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	601a      	str	r2, [r3, #0]
        break;
 8004a1e:	e00d      	b.n	8004a3c <smtc_hal_mcu_gpio_stm32l4_get_trigger+0x4c>
    }
    case SMTC_HAL_MCU_GPIO_IRQ_MODE_RISING:
    {
        *trigger = LL_EXTI_TRIGGER_RISING;
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	2201      	movs	r2, #1
 8004a24:	601a      	str	r2, [r3, #0]
        break;
 8004a26:	e009      	b.n	8004a3c <smtc_hal_mcu_gpio_stm32l4_get_trigger+0x4c>
    }
    case SMTC_HAL_MCU_GPIO_IRQ_MODE_FALLING:
    {
        *trigger = LL_EXTI_TRIGGER_FALLING;
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	2202      	movs	r2, #2
 8004a2c:	601a      	str	r2, [r3, #0]
        break;
 8004a2e:	e005      	b.n	8004a3c <smtc_hal_mcu_gpio_stm32l4_get_trigger+0x4c>
    }
    case SMTC_HAL_MCU_GPIO_IRQ_MODE_RISING_FALLING:
    {
        *trigger = LL_EXTI_TRIGGER_RISING_FALLING;
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	2203      	movs	r2, #3
 8004a34:	601a      	str	r2, [r3, #0]
        break;
 8004a36:	e001      	b.n	8004a3c <smtc_hal_mcu_gpio_stm32l4_get_trigger+0x4c>
    }
    default:
    {
        return SMTC_HAL_MCU_STATUS_BAD_PARAMETERS;
 8004a38:	2302      	movs	r3, #2
 8004a3a:	e000      	b.n	8004a3e <smtc_hal_mcu_gpio_stm32l4_get_trigger+0x4e>
    }
    }

    return SMTC_HAL_MCU_STATUS_OK;
 8004a3c:	2300      	movs	r3, #0
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	370c      	adds	r7, #12
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr
 8004a4a:	bf00      	nop

08004a4c <smtc_hal_mcu_gpio_stm32l4_call_exti_callback>:

static smtc_hal_mcu_status_t smtc_hal_mcu_gpio_stm32l4_call_exti_callback( uint32_t pin )
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
    for( uint32_t i = 0; i < SMTC_HAL_MCU_GPIO_STM32L4_ARRAY_SIZE; i++ )
 8004a54:	2300      	movs	r3, #0
 8004a56:	60fb      	str	r3, [r7, #12]
 8004a58:	e03a      	b.n	8004ad0 <smtc_hal_mcu_gpio_stm32l4_call_exti_callback+0x84>
    {
        if( pin == gpio_inst_array[i].pin )
 8004a5a:	4921      	ldr	r1, [pc, #132]	; (8004ae0 <smtc_hal_mcu_gpio_stm32l4_call_exti_callback+0x94>)
 8004a5c:	68fa      	ldr	r2, [r7, #12]
 8004a5e:	4613      	mov	r3, r2
 8004a60:	005b      	lsls	r3, r3, #1
 8004a62:	4413      	add	r3, r2
 8004a64:	011b      	lsls	r3, r3, #4
 8004a66:	440b      	add	r3, r1
 8004a68:	3308      	adds	r3, #8
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d12b      	bne.n	8004aca <smtc_hal_mcu_gpio_stm32l4_call_exti_callback+0x7e>
        {
            if( gpio_inst_array[i].irq_cfg.is_irq_enabled == true )
 8004a72:	491b      	ldr	r1, [pc, #108]	; (8004ae0 <smtc_hal_mcu_gpio_stm32l4_call_exti_callback+0x94>)
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	4613      	mov	r3, r2
 8004a78:	005b      	lsls	r3, r3, #1
 8004a7a:	4413      	add	r3, r2
 8004a7c:	011b      	lsls	r3, r3, #4
 8004a7e:	440b      	add	r3, r1
 8004a80:	3310      	adds	r3, #16
 8004a82:	781b      	ldrb	r3, [r3, #0]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d020      	beq.n	8004aca <smtc_hal_mcu_gpio_stm32l4_call_exti_callback+0x7e>
            {
                if( gpio_inst_array[i].irq_cfg.input_cfg.callback != NULL )
 8004a88:	4915      	ldr	r1, [pc, #84]	; (8004ae0 <smtc_hal_mcu_gpio_stm32l4_call_exti_callback+0x94>)
 8004a8a:	68fa      	ldr	r2, [r7, #12]
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	005b      	lsls	r3, r3, #1
 8004a90:	4413      	add	r3, r2
 8004a92:	011b      	lsls	r3, r3, #4
 8004a94:	440b      	add	r3, r1
 8004a96:	3318      	adds	r3, #24
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d015      	beq.n	8004aca <smtc_hal_mcu_gpio_stm32l4_call_exti_callback+0x7e>
                {
                    gpio_inst_array[i].irq_cfg.input_cfg.callback( gpio_inst_array[i].irq_cfg.input_cfg.context );
 8004a9e:	4910      	ldr	r1, [pc, #64]	; (8004ae0 <smtc_hal_mcu_gpio_stm32l4_call_exti_callback+0x94>)
 8004aa0:	68fa      	ldr	r2, [r7, #12]
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	005b      	lsls	r3, r3, #1
 8004aa6:	4413      	add	r3, r2
 8004aa8:	011b      	lsls	r3, r3, #4
 8004aaa:	440b      	add	r3, r1
 8004aac:	3318      	adds	r3, #24
 8004aae:	6819      	ldr	r1, [r3, #0]
 8004ab0:	480b      	ldr	r0, [pc, #44]	; (8004ae0 <smtc_hal_mcu_gpio_stm32l4_call_exti_callback+0x94>)
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	4613      	mov	r3, r2
 8004ab6:	005b      	lsls	r3, r3, #1
 8004ab8:	4413      	add	r3, r2
 8004aba:	011b      	lsls	r3, r3, #4
 8004abc:	4403      	add	r3, r0
 8004abe:	331c      	adds	r3, #28
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	4788      	blx	r1
                    return SMTC_HAL_MCU_STATUS_OK;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	e006      	b.n	8004ad8 <smtc_hal_mcu_gpio_stm32l4_call_exti_callback+0x8c>
    for( uint32_t i = 0; i < SMTC_HAL_MCU_GPIO_STM32L4_ARRAY_SIZE; i++ )
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	3301      	adds	r3, #1
 8004ace:	60fb      	str	r3, [r7, #12]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2b0f      	cmp	r3, #15
 8004ad4:	d9c1      	bls.n	8004a5a <smtc_hal_mcu_gpio_stm32l4_call_exti_callback+0xe>
                }
            }
        }
    }
    return SMTC_HAL_MCU_STATUS_ERROR;
 8004ad6:	2301      	movs	r3, #1
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3710      	adds	r7, #16
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	2000070c 	.word	0x2000070c

08004ae4 <EXTI0_IRQHandler>:

/**
 * @brief This function handles EXTI line0 interrupt.
 */
void EXTI0_IRQHandler( void )
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	af00      	add	r7, sp, #0
    if( LL_EXTI_IsActiveFlag_0_31( LL_EXTI_LINE_0 ) != RESET )
 8004ae8:	2001      	movs	r0, #1
 8004aea:	f7ff fb0b 	bl	8004104 <LL_EXTI_IsActiveFlag_0_31>
 8004aee:	4603      	mov	r3, r0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d005      	beq.n	8004b00 <EXTI0_IRQHandler+0x1c>
    {
        LL_EXTI_ClearFlag_0_31( LL_EXTI_LINE_0 );
 8004af4:	2001      	movs	r0, #1
 8004af6:	f7ff fb1b 	bl	8004130 <LL_EXTI_ClearFlag_0_31>
        smtc_hal_mcu_gpio_stm32l4_call_exti_callback( LL_GPIO_PIN_0 );
 8004afa:	2001      	movs	r0, #1
 8004afc:	f7ff ffa6 	bl	8004a4c <smtc_hal_mcu_gpio_stm32l4_call_exti_callback>
    }
}
 8004b00:	bf00      	nop
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <EXTI1_IRQHandler>:

/**
 * @brief This function handles EXTI line1 interrupt.
 */
void EXTI1_IRQHandler( void )
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	af00      	add	r7, sp, #0
    if( LL_EXTI_IsActiveFlag_0_31( LL_EXTI_LINE_1 ) != RESET )
 8004b08:	2002      	movs	r0, #2
 8004b0a:	f7ff fafb 	bl	8004104 <LL_EXTI_IsActiveFlag_0_31>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d005      	beq.n	8004b20 <EXTI1_IRQHandler+0x1c>
    {
        LL_EXTI_ClearFlag_0_31( LL_EXTI_LINE_1 );
 8004b14:	2002      	movs	r0, #2
 8004b16:	f7ff fb0b 	bl	8004130 <LL_EXTI_ClearFlag_0_31>
        smtc_hal_mcu_gpio_stm32l4_call_exti_callback( LL_GPIO_PIN_1 );
 8004b1a:	2002      	movs	r0, #2
 8004b1c:	f7ff ff96 	bl	8004a4c <smtc_hal_mcu_gpio_stm32l4_call_exti_callback>
    }
}
 8004b20:	bf00      	nop
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <EXTI2_IRQHandler>:

/**
 * @brief This function handles EXTI line2 interrupt.
 */
void EXTI2_IRQHandler( void )
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	af00      	add	r7, sp, #0
    if( LL_EXTI_IsActiveFlag_0_31( LL_EXTI_LINE_2 ) != RESET )
 8004b28:	2004      	movs	r0, #4
 8004b2a:	f7ff faeb 	bl	8004104 <LL_EXTI_IsActiveFlag_0_31>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d005      	beq.n	8004b40 <EXTI2_IRQHandler+0x1c>
    {
        LL_EXTI_ClearFlag_0_31( LL_EXTI_LINE_2 );
 8004b34:	2004      	movs	r0, #4
 8004b36:	f7ff fafb 	bl	8004130 <LL_EXTI_ClearFlag_0_31>
        smtc_hal_mcu_gpio_stm32l4_call_exti_callback( LL_GPIO_PIN_2 );
 8004b3a:	2004      	movs	r0, #4
 8004b3c:	f7ff ff86 	bl	8004a4c <smtc_hal_mcu_gpio_stm32l4_call_exti_callback>
    }
}
 8004b40:	bf00      	nop
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <EXTI3_IRQHandler>:

/**
 * @brief This function handles EXTI line3 interrupt.
 */
void EXTI3_IRQHandler( void )
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	af00      	add	r7, sp, #0
    if( LL_EXTI_IsActiveFlag_0_31( LL_EXTI_LINE_3 ) != RESET )
 8004b48:	2008      	movs	r0, #8
 8004b4a:	f7ff fadb 	bl	8004104 <LL_EXTI_IsActiveFlag_0_31>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d005      	beq.n	8004b60 <EXTI3_IRQHandler+0x1c>
    {
        LL_EXTI_ClearFlag_0_31( LL_EXTI_LINE_3 );
 8004b54:	2008      	movs	r0, #8
 8004b56:	f7ff faeb 	bl	8004130 <LL_EXTI_ClearFlag_0_31>
        smtc_hal_mcu_gpio_stm32l4_call_exti_callback( LL_GPIO_PIN_3 );
 8004b5a:	2008      	movs	r0, #8
 8004b5c:	f7ff ff76 	bl	8004a4c <smtc_hal_mcu_gpio_stm32l4_call_exti_callback>
    }
}
 8004b60:	bf00      	nop
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <EXTI4_IRQHandler>:

/**
 * @brief This function handles EXTI line4 interrupt.
 */
void EXTI4_IRQHandler( void )
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	af00      	add	r7, sp, #0
    if( LL_EXTI_IsActiveFlag_0_31( LL_EXTI_LINE_4 ) != RESET )
 8004b68:	2010      	movs	r0, #16
 8004b6a:	f7ff facb 	bl	8004104 <LL_EXTI_IsActiveFlag_0_31>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d005      	beq.n	8004b80 <EXTI4_IRQHandler+0x1c>
    {
        LL_EXTI_ClearFlag_0_31( LL_EXTI_LINE_4 );
 8004b74:	2010      	movs	r0, #16
 8004b76:	f7ff fadb 	bl	8004130 <LL_EXTI_ClearFlag_0_31>
        smtc_hal_mcu_gpio_stm32l4_call_exti_callback( LL_GPIO_PIN_4 );
 8004b7a:	2010      	movs	r0, #16
 8004b7c:	f7ff ff66 	bl	8004a4c <smtc_hal_mcu_gpio_stm32l4_call_exti_callback>
    }
}
 8004b80:	bf00      	nop
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <EXTI9_5_IRQHandler>:

/**
 * @brief This function handles EXTI line[9:5] interrupts.
 */
void EXTI9_5_IRQHandler( void )
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	af00      	add	r7, sp, #0
    if( LL_EXTI_IsActiveFlag_0_31( LL_EXTI_LINE_5 ) != RESET )
 8004b88:	2020      	movs	r0, #32
 8004b8a:	f7ff fabb 	bl	8004104 <LL_EXTI_IsActiveFlag_0_31>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d005      	beq.n	8004ba0 <EXTI9_5_IRQHandler+0x1c>
    {
        LL_EXTI_ClearFlag_0_31( LL_EXTI_LINE_5 );
 8004b94:	2020      	movs	r0, #32
 8004b96:	f7ff facb 	bl	8004130 <LL_EXTI_ClearFlag_0_31>
        smtc_hal_mcu_gpio_stm32l4_call_exti_callback( LL_GPIO_PIN_5 );
 8004b9a:	2020      	movs	r0, #32
 8004b9c:	f7ff ff56 	bl	8004a4c <smtc_hal_mcu_gpio_stm32l4_call_exti_callback>
    }
    if( LL_EXTI_IsActiveFlag_0_31( LL_EXTI_LINE_6 ) != RESET )
 8004ba0:	2040      	movs	r0, #64	; 0x40
 8004ba2:	f7ff faaf 	bl	8004104 <LL_EXTI_IsActiveFlag_0_31>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d005      	beq.n	8004bb8 <EXTI9_5_IRQHandler+0x34>
    {
        LL_EXTI_ClearFlag_0_31( LL_EXTI_LINE_6 );
 8004bac:	2040      	movs	r0, #64	; 0x40
 8004bae:	f7ff fabf 	bl	8004130 <LL_EXTI_ClearFlag_0_31>
        smtc_hal_mcu_gpio_stm32l4_call_exti_callback( LL_GPIO_PIN_6 );
 8004bb2:	2040      	movs	r0, #64	; 0x40
 8004bb4:	f7ff ff4a 	bl	8004a4c <smtc_hal_mcu_gpio_stm32l4_call_exti_callback>
    }
    if( LL_EXTI_IsActiveFlag_0_31( LL_EXTI_LINE_7 ) != RESET )
 8004bb8:	2080      	movs	r0, #128	; 0x80
 8004bba:	f7ff faa3 	bl	8004104 <LL_EXTI_IsActiveFlag_0_31>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d005      	beq.n	8004bd0 <EXTI9_5_IRQHandler+0x4c>
    {
        LL_EXTI_ClearFlag_0_31( LL_EXTI_LINE_7 );
 8004bc4:	2080      	movs	r0, #128	; 0x80
 8004bc6:	f7ff fab3 	bl	8004130 <LL_EXTI_ClearFlag_0_31>
        smtc_hal_mcu_gpio_stm32l4_call_exti_callback( LL_GPIO_PIN_7 );
 8004bca:	2080      	movs	r0, #128	; 0x80
 8004bcc:	f7ff ff3e 	bl	8004a4c <smtc_hal_mcu_gpio_stm32l4_call_exti_callback>
    }
    if( LL_EXTI_IsActiveFlag_0_31( LL_EXTI_LINE_8 ) != RESET )
 8004bd0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004bd4:	f7ff fa96 	bl	8004104 <LL_EXTI_IsActiveFlag_0_31>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d007      	beq.n	8004bee <EXTI9_5_IRQHandler+0x6a>
    {
        LL_EXTI_ClearFlag_0_31( LL_EXTI_LINE_8 );
 8004bde:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004be2:	f7ff faa5 	bl	8004130 <LL_EXTI_ClearFlag_0_31>
        smtc_hal_mcu_gpio_stm32l4_call_exti_callback( LL_GPIO_PIN_8 );
 8004be6:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004bea:	f7ff ff2f 	bl	8004a4c <smtc_hal_mcu_gpio_stm32l4_call_exti_callback>
    }
    if( LL_EXTI_IsActiveFlag_0_31( LL_EXTI_LINE_9 ) != RESET )
 8004bee:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004bf2:	f7ff fa87 	bl	8004104 <LL_EXTI_IsActiveFlag_0_31>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d007      	beq.n	8004c0c <EXTI9_5_IRQHandler+0x88>
    {
        LL_EXTI_ClearFlag_0_31( LL_EXTI_LINE_9 );
 8004bfc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004c00:	f7ff fa96 	bl	8004130 <LL_EXTI_ClearFlag_0_31>
        smtc_hal_mcu_gpio_stm32l4_call_exti_callback( LL_GPIO_PIN_9 );
 8004c04:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004c08:	f7ff ff20 	bl	8004a4c <smtc_hal_mcu_gpio_stm32l4_call_exti_callback>
    }
}
 8004c0c:	bf00      	nop
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <EXTI15_10_IRQHandler>:

/**
 * @brief This function handles EXTI line[15:10] interrupts.
 */
void EXTI15_10_IRQHandler( void )
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	af00      	add	r7, sp, #0
    if( LL_EXTI_IsActiveFlag_0_31( LL_EXTI_LINE_10 ) != RESET )
 8004c14:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004c18:	f7ff fa74 	bl	8004104 <LL_EXTI_IsActiveFlag_0_31>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d007      	beq.n	8004c32 <EXTI15_10_IRQHandler+0x22>
    {
        LL_EXTI_ClearFlag_0_31( LL_EXTI_LINE_10 );
 8004c22:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004c26:	f7ff fa83 	bl	8004130 <LL_EXTI_ClearFlag_0_31>
        smtc_hal_mcu_gpio_stm32l4_call_exti_callback( LL_GPIO_PIN_10 );
 8004c2a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004c2e:	f7ff ff0d 	bl	8004a4c <smtc_hal_mcu_gpio_stm32l4_call_exti_callback>
    }
    if( LL_EXTI_IsActiveFlag_0_31( LL_EXTI_LINE_11 ) != RESET )
 8004c32:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004c36:	f7ff fa65 	bl	8004104 <LL_EXTI_IsActiveFlag_0_31>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d007      	beq.n	8004c50 <EXTI15_10_IRQHandler+0x40>
    {
        LL_EXTI_ClearFlag_0_31( LL_EXTI_LINE_11 );
 8004c40:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004c44:	f7ff fa74 	bl	8004130 <LL_EXTI_ClearFlag_0_31>
        smtc_hal_mcu_gpio_stm32l4_call_exti_callback( LL_GPIO_PIN_11 );
 8004c48:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004c4c:	f7ff fefe 	bl	8004a4c <smtc_hal_mcu_gpio_stm32l4_call_exti_callback>
    }
    if( LL_EXTI_IsActiveFlag_0_31( LL_EXTI_LINE_12 ) != RESET )
 8004c50:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004c54:	f7ff fa56 	bl	8004104 <LL_EXTI_IsActiveFlag_0_31>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d007      	beq.n	8004c6e <EXTI15_10_IRQHandler+0x5e>
    {
        LL_EXTI_ClearFlag_0_31( LL_EXTI_LINE_12 );
 8004c5e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004c62:	f7ff fa65 	bl	8004130 <LL_EXTI_ClearFlag_0_31>
        smtc_hal_mcu_gpio_stm32l4_call_exti_callback( LL_GPIO_PIN_12 );
 8004c66:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004c6a:	f7ff feef 	bl	8004a4c <smtc_hal_mcu_gpio_stm32l4_call_exti_callback>
    }
    if( LL_EXTI_IsActiveFlag_0_31( LL_EXTI_LINE_13 ) != RESET )
 8004c6e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004c72:	f7ff fa47 	bl	8004104 <LL_EXTI_IsActiveFlag_0_31>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d007      	beq.n	8004c8c <EXTI15_10_IRQHandler+0x7c>
    {
        LL_EXTI_ClearFlag_0_31( LL_EXTI_LINE_13 );
 8004c7c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004c80:	f7ff fa56 	bl	8004130 <LL_EXTI_ClearFlag_0_31>
        smtc_hal_mcu_gpio_stm32l4_call_exti_callback( LL_GPIO_PIN_13 );
 8004c84:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004c88:	f7ff fee0 	bl	8004a4c <smtc_hal_mcu_gpio_stm32l4_call_exti_callback>
    }
    if( LL_EXTI_IsActiveFlag_0_31( LL_EXTI_LINE_14 ) != RESET )
 8004c8c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004c90:	f7ff fa38 	bl	8004104 <LL_EXTI_IsActiveFlag_0_31>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d007      	beq.n	8004caa <EXTI15_10_IRQHandler+0x9a>
    {
        LL_EXTI_ClearFlag_0_31( LL_EXTI_LINE_14 );
 8004c9a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004c9e:	f7ff fa47 	bl	8004130 <LL_EXTI_ClearFlag_0_31>
        smtc_hal_mcu_gpio_stm32l4_call_exti_callback( LL_GPIO_PIN_14 );
 8004ca2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004ca6:	f7ff fed1 	bl	8004a4c <smtc_hal_mcu_gpio_stm32l4_call_exti_callback>
    }
    if( LL_EXTI_IsActiveFlag_0_31( LL_EXTI_LINE_15 ) != RESET )
 8004caa:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004cae:	f7ff fa29 	bl	8004104 <LL_EXTI_IsActiveFlag_0_31>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d007      	beq.n	8004cc8 <EXTI15_10_IRQHandler+0xb8>
    {
        LL_EXTI_ClearFlag_0_31( LL_EXTI_LINE_15 );
 8004cb8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004cbc:	f7ff fa38 	bl	8004130 <LL_EXTI_ClearFlag_0_31>
        smtc_hal_mcu_gpio_stm32l4_call_exti_callback( LL_GPIO_PIN_15 );
 8004cc0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004cc4:	f7ff fec2 	bl	8004a4c <smtc_hal_mcu_gpio_stm32l4_call_exti_callback>
    }
}
 8004cc8:	bf00      	nop
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <LL_SPI_Enable>:
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	601a      	str	r2, [r3, #0]
}
 8004ce0:	bf00      	nop
 8004ce2:	370c      	adds	r7, #12
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <LL_SPI_IsEnabled>:
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cfc:	2b40      	cmp	r3, #64	; 0x40
 8004cfe:	d101      	bne.n	8004d04 <LL_SPI_IsEnabled+0x18>
 8004d00:	2301      	movs	r3, #1
 8004d02:	e000      	b.n	8004d06 <LL_SPI_IsEnabled+0x1a>
 8004d04:	2300      	movs	r3, #0
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	370c      	adds	r7, #12
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr

08004d12 <LL_SPI_SetStandard>:
{
 8004d12:	b480      	push	{r7}
 8004d14:	b083      	sub	sp, #12
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
 8004d1a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	f023 0210 	bic.w	r2, r3, #16
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	431a      	orrs	r2, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	605a      	str	r2, [r3, #4]
}
 8004d2c:	bf00      	nop
 8004d2e:	370c      	adds	r7, #12
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <LL_SPI_SetRxFIFOThreshold>:
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b083      	sub	sp, #12
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	431a      	orrs	r2, r3
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	605a      	str	r2, [r3, #4]
}
 8004d52:	bf00      	nop
 8004d54:	370c      	adds	r7, #12
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr

08004d5e <LL_SPI_DisableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_DisableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 8004d5e:	b480      	push	{r7}
 8004d60:	b083      	sub	sp, #12
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_NSSP);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	f023 0208 	bic.w	r2, r3, #8
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	605a      	str	r2, [r3, #4]
}
 8004d72:	bf00      	nop
 8004d74:	370c      	adds	r7, #12
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr

08004d7e <LL_SPI_GetRxFIFOLevel>:
  *         @arg @ref LL_SPI_RX_FIFO_QUARTER_FULL
  *         @arg @ref LL_SPI_RX_FIFO_HALF_FULL
  *         @arg @ref LL_SPI_RX_FIFO_FULL
  */
__STATIC_INLINE uint32_t LL_SPI_GetRxFIFOLevel(SPI_TypeDef *SPIx)
{
 8004d7e:	b480      	push	{r7}
 8004d80:	b083      	sub	sp, #12
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(SPIx->SR, SPI_SR_FRLVL));
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	370c      	adds	r7, #12
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr

08004d9a <LL_SPI_GetTxFIFOLevel>:
  *         @arg @ref LL_SPI_TX_FIFO_QUARTER_FULL
  *         @arg @ref LL_SPI_TX_FIFO_HALF_FULL
  *         @arg @ref LL_SPI_TX_FIFO_FULL
  */
__STATIC_INLINE uint32_t LL_SPI_GetTxFIFOLevel(SPI_TypeDef *SPIx)
{
 8004d9a:	b480      	push	{r7}
 8004d9c:	b083      	sub	sp, #12
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(SPIx->SR, SPI_SR_FTLVL));
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	370c      	adds	r7, #12
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr

08004db6 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8004db6:	b480      	push	{r7}
 8004db8:	b083      	sub	sp, #12
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	330c      	adds	r3, #12
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	b2db      	uxtb	r3, r3
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	370c      	adds	r7, #12
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr

08004dd2 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8004dd2:	b480      	push	{r7}
 8004dd4:	b085      	sub	sp, #20
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]
 8004dda:	460b      	mov	r3, r1
 8004ddc:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	330c      	adds	r3, #12
 8004de2:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	78fa      	ldrb	r2, [r7, #3]
 8004de8:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8004dea:	bf00      	nop
 8004dec:	3714      	adds	r7, #20
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr
	...

08004df8 <LL_AHB2_GRP1_EnableClock>:
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b085      	sub	sp, #20
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004e00:	4b08      	ldr	r3, [pc, #32]	; (8004e24 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8004e02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e04:	4907      	ldr	r1, [pc, #28]	; (8004e24 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004e0c:	4b05      	ldr	r3, [pc, #20]	; (8004e24 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8004e0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4013      	ands	r3, r2
 8004e14:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004e16:	68fb      	ldr	r3, [r7, #12]
}
 8004e18:	bf00      	nop
 8004e1a:	3714      	adds	r7, #20
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr
 8004e24:	40021000 	.word	0x40021000

08004e28 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b085      	sub	sp, #20
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8004e30:	4b08      	ldr	r3, [pc, #32]	; (8004e54 <LL_APB1_GRP1_EnableClock+0x2c>)
 8004e32:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004e34:	4907      	ldr	r1, [pc, #28]	; (8004e54 <LL_APB1_GRP1_EnableClock+0x2c>)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8004e3c:	4b05      	ldr	r3, [pc, #20]	; (8004e54 <LL_APB1_GRP1_EnableClock+0x2c>)
 8004e3e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4013      	ands	r3, r2
 8004e44:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004e46:	68fb      	ldr	r3, [r7, #12]
}
 8004e48:	bf00      	nop
 8004e4a:	3714      	adds	r7, #20
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr
 8004e54:	40021000 	.word	0x40021000

08004e58 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b085      	sub	sp, #20
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8004e60:	4b08      	ldr	r3, [pc, #32]	; (8004e84 <LL_APB2_GRP1_EnableClock+0x2c>)
 8004e62:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004e64:	4907      	ldr	r1, [pc, #28]	; (8004e84 <LL_APB2_GRP1_EnableClock+0x2c>)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8004e6c:	4b05      	ldr	r3, [pc, #20]	; (8004e84 <LL_APB2_GRP1_EnableClock+0x2c>)
 8004e6e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	4013      	ands	r3, r2
 8004e74:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004e76:	68fb      	ldr	r3, [r7, #12]
}
 8004e78:	bf00      	nop
 8004e7a:	3714      	adds	r7, #20
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr
 8004e84:	40021000 	.word	0x40021000

08004e88 <smtc_hal_mcu_spi_init>:
 * -----------------------------------------------------------------------------
 * --- PUBLIC FUNCTIONS DEFINITION ---------------------------------------------
 */

smtc_hal_mcu_status_t smtc_hal_mcu_spi_init( smtc_hal_mcu_spi_cfg_t cfg, smtc_hal_mcu_spi_inst_t* inst )
{
 8004e88:	b5b0      	push	{r4, r5, r7, lr}
 8004e8a:	b09a      	sub	sp, #104	; 0x68
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]
    struct smtc_hal_mcu_spi_inst_s* spi_cfg_slot = smtc_hal_mcu_spi_stm32l4_get_free_slot( );
 8004e92:	f000 f905 	bl	80050a0 <smtc_hal_mcu_spi_stm32l4_get_free_slot>
 8004e96:	6678      	str	r0, [r7, #100]	; 0x64

    if( spi_cfg_slot == NULL )
 8004e98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d101      	bne.n	8004ea2 <smtc_hal_mcu_spi_init+0x1a>
    {
        return SMTC_HAL_MCU_STATUS_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e080      	b.n	8004fa4 <smtc_hal_mcu_spi_init+0x11c>
    }

    spi_cfg_slot->spi = cfg->spi;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ea8:	605a      	str	r2, [r3, #4]

    if( spi_cfg_slot->spi == SPI1 )
 8004eaa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	4a3f      	ldr	r2, [pc, #252]	; (8004fac <smtc_hal_mcu_spi_init+0x124>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d118      	bne.n	8004ee6 <smtc_hal_mcu_spi_init+0x5e>
    {
        /* Peripheral clock enable */
        LL_APB2_GRP1_EnableClock( LL_APB2_GRP1_PERIPH_SPI1 );
 8004eb4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004eb8:	f7ff ffce 	bl	8004e58 <LL_APB2_GRP1_EnableClock>
        LL_AHB2_GRP1_EnableClock( LL_AHB2_GRP1_PERIPH_GPIOA );
 8004ebc:	2001      	movs	r0, #1
 8004ebe:	f7ff ff9b 	bl	8004df8 <LL_AHB2_GRP1_EnableClock>
        /** SPI1 GPIO Configuration
        PA5   ------> SPI1_SCK
        PA6   ------> SPI1_MISO
        PA7   ------> SPI1_MOSI
        */
        LL_GPIO_InitTypeDef GPIO_InitStruct = {
 8004ec2:	4b3b      	ldr	r3, [pc, #236]	; (8004fb0 <smtc_hal_mcu_spi_init+0x128>)
 8004ec4:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8004ec8:	461d      	mov	r5, r3
 8004eca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ecc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ece:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004ed2:	e884 0003 	stmia.w	r4, {r0, r1}
            .OutputType = LL_GPIO_OUTPUT_PUSHPULL,
            .Pull       = LL_GPIO_PULL_NO,
            .Alternate  = LL_GPIO_AF_5,
        };

        LL_GPIO_Init( GPIOA, &GPIO_InitStruct );
 8004ed6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004eda:	4619      	mov	r1, r3
 8004edc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ee0:	f7fd fca7 	bl	8002832 <LL_GPIO_Init>
 8004ee4:	e01e      	b.n	8004f24 <smtc_hal_mcu_spi_init+0x9c>
    }
    else if( spi_cfg_slot->spi == SPI3 )
 8004ee6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	4a32      	ldr	r2, [pc, #200]	; (8004fb4 <smtc_hal_mcu_spi_init+0x12c>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d117      	bne.n	8004f20 <smtc_hal_mcu_spi_init+0x98>
    {
        /* Peripheral clock enable */
        LL_APB1_GRP1_EnableClock( LL_APB1_GRP1_PERIPH_SPI3 );
 8004ef0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004ef4:	f7ff ff98 	bl	8004e28 <LL_APB1_GRP1_EnableClock>
        LL_AHB2_GRP1_EnableClock( LL_AHB2_GRP1_PERIPH_GPIOC );
 8004ef8:	2004      	movs	r0, #4
 8004efa:	f7ff ff7d 	bl	8004df8 <LL_AHB2_GRP1_EnableClock>
        /** SPI3 GPIO Configuration
        PC10   ------> SPI3_SCK
        PC11   ------> SPI3_MISO
        PC12   ------> SPI3_MOSI
        */
        LL_GPIO_InitTypeDef GPIO_InitStruct = {
 8004efe:	4b2e      	ldr	r3, [pc, #184]	; (8004fb8 <smtc_hal_mcu_spi_init+0x130>)
 8004f00:	f107 040c 	add.w	r4, r7, #12
 8004f04:	461d      	mov	r5, r3
 8004f06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004f0a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004f0e:	e884 0003 	stmia.w	r4, {r0, r1}
            .OutputType = LL_GPIO_OUTPUT_PUSHPULL,
            .Pull       = LL_GPIO_PULL_NO,
            .Alternate  = LL_GPIO_AF_6,
        };

        LL_GPIO_Init( GPIOC, &GPIO_InitStruct );
 8004f12:	f107 030c 	add.w	r3, r7, #12
 8004f16:	4619      	mov	r1, r3
 8004f18:	4828      	ldr	r0, [pc, #160]	; (8004fbc <smtc_hal_mcu_spi_init+0x134>)
 8004f1a:	f7fd fc8a 	bl	8002832 <LL_GPIO_Init>
 8004f1e:	e001      	b.n	8004f24 <smtc_hal_mcu_spi_init+0x9c>
    }
    else
    {
        return SMTC_HAL_MCU_STATUS_BAD_PARAMETERS;
 8004f20:	2302      	movs	r3, #2
 8004f22:	e03f      	b.n	8004fa4 <smtc_hal_mcu_spi_init+0x11c>
    }

    LL_SPI_InitTypeDef SPI_InitStruct = {
 8004f24:	4b26      	ldr	r3, [pc, #152]	; (8004fc0 <smtc_hal_mcu_spi_init+0x138>)
 8004f26:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8004f2a:	461d      	mov	r5, r3
 8004f2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004f30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004f34:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004f38:	e884 0003 	stmia.w	r4, {r0, r1}
        .BitOrder          = LL_SPI_MSB_FIRST,
        .CRCCalculation    = LL_SPI_CRCCALCULATION_DISABLE,
        .CRCPoly           = 7,
    };

    if( LL_SPI_Init( spi_cfg_slot->spi, &SPI_InitStruct ) != SUCCESS )
 8004f3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004f44:	4611      	mov	r1, r2
 8004f46:	4618      	mov	r0, r3
 8004f48:	f7fe f8d6 	bl	80030f8 <LL_SPI_Init>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d001      	beq.n	8004f56 <smtc_hal_mcu_spi_init+0xce>
    {
        return SMTC_HAL_MCU_STATUS_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e026      	b.n	8004fa4 <smtc_hal_mcu_spi_init+0x11c>
    }

    LL_SPI_SetRxFIFOThreshold( spi_cfg_slot->spi, LL_SPI_RX_FIFO_TH_QUARTER );
 8004f56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f7ff feea 	bl	8004d38 <LL_SPI_SetRxFIFOThreshold>
    LL_SPI_SetStandard( spi_cfg_slot->spi, LL_SPI_PROTOCOL_MOTOROLA );
 8004f64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	2100      	movs	r1, #0
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f7ff fed1 	bl	8004d12 <LL_SPI_SetStandard>
    LL_SPI_DisableNSSPulseMgt( spi_cfg_slot->spi );
 8004f70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	4618      	mov	r0, r3
 8004f76:	f7ff fef2 	bl	8004d5e <LL_SPI_DisableNSSPulseMgt>

    LL_SPI_Enable( spi_cfg_slot->spi );
 8004f7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f7ff fea4 	bl	8004ccc <LL_SPI_Enable>
    while( LL_SPI_IsEnabled( spi_cfg_slot->spi ) == 0 )
 8004f84:	bf00      	nop
 8004f86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f7ff feae 	bl	8004cec <LL_SPI_IsEnabled>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d0f7      	beq.n	8004f86 <smtc_hal_mcu_spi_init+0xfe>
        ;

    spi_cfg_slot->is_cfged = true;
 8004f96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f98:	2201      	movs	r2, #1
 8004f9a:	701a      	strb	r2, [r3, #0]

    *inst = spi_cfg_slot;
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004fa0:	601a      	str	r2, [r3, #0]

    return SMTC_HAL_MCU_STATUS_OK;
 8004fa2:	2300      	movs	r3, #0
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3768      	adds	r7, #104	; 0x68
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bdb0      	pop	{r4, r5, r7, pc}
 8004fac:	40013000 	.word	0x40013000
 8004fb0:	0800bec8 	.word	0x0800bec8
 8004fb4:	40003c00 	.word	0x40003c00
 8004fb8:	0800bee0 	.word	0x0800bee0
 8004fbc:	48000800 	.word	0x48000800
 8004fc0:	0800bef8 	.word	0x0800bef8

08004fc4 <smtc_hal_mcu_spi_rw_buffer>:
    return SMTC_HAL_MCU_STATUS_OK;
}

smtc_hal_mcu_status_t smtc_hal_mcu_spi_rw_buffer( smtc_hal_mcu_spi_inst_t inst, const uint8_t* data_out,
                                                  uint8_t* data_in, uint16_t data_length )
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b086      	sub	sp, #24
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	607a      	str	r2, [r7, #4]
 8004fd0:	807b      	strh	r3, [r7, #2]
    uint16_t rem_bytes_to_send    = data_length;
 8004fd2:	887b      	ldrh	r3, [r7, #2]
 8004fd4:	82fb      	strh	r3, [r7, #22]
    uint16_t rem_bytes_to_receive = data_length;
 8004fd6:	887b      	ldrh	r3, [r7, #2]
 8004fd8:	82bb      	strh	r3, [r7, #20]

    if( smtc_hal_mcu_spi_stm32l4_is_real_inst( inst ) == false )
 8004fda:	68f8      	ldr	r0, [r7, #12]
 8004fdc:	f000 f884 	bl	80050e8 <smtc_hal_mcu_spi_stm32l4_is_real_inst>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	f083 0301 	eor.w	r3, r3, #1
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d001      	beq.n	8004ff0 <smtc_hal_mcu_spi_rw_buffer+0x2c>
    {
        return SMTC_HAL_MCU_STATUS_BAD_PARAMETERS;
 8004fec:	2302      	movs	r3, #2
 8004fee:	e052      	b.n	8005096 <smtc_hal_mcu_spi_rw_buffer+0xd2>
    }

    if( inst->is_cfged == false )
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	f083 0301 	eor.w	r3, r3, #1
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d044      	beq.n	8005088 <smtc_hal_mcu_spi_rw_buffer+0xc4>
    {
        return SMTC_HAL_MCU_STATUS_NOT_INIT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e049      	b.n	8005096 <smtc_hal_mcu_spi_rw_buffer+0xd2>
    }

    while( ( rem_bytes_to_send > 0 ) || ( rem_bytes_to_receive > 0 ) )
    {
        if( ( LL_SPI_GetTxFIFOLevel( inst->spi ) != LL_SPI_TX_FIFO_FULL ) && ( rem_bytes_to_send > 0 ) )
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	4618      	mov	r0, r3
 8005008:	f7ff fec7 	bl	8004d9a <LL_SPI_GetTxFIFOLevel>
 800500c:	4603      	mov	r3, r0
 800500e:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8005012:	d019      	beq.n	8005048 <smtc_hal_mcu_spi_rw_buffer+0x84>
 8005014:	8afb      	ldrh	r3, [r7, #22]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d016      	beq.n	8005048 <smtc_hal_mcu_spi_rw_buffer+0x84>
        {
            const uint8_t byte_to_transmit = ( data_out == NULL ) ? 0x00 : data_out[data_length - rem_bytes_to_send];
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d007      	beq.n	8005030 <smtc_hal_mcu_spi_rw_buffer+0x6c>
 8005020:	887a      	ldrh	r2, [r7, #2]
 8005022:	8afb      	ldrh	r3, [r7, #22]
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	461a      	mov	r2, r3
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	4413      	add	r3, r2
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	e000      	b.n	8005032 <smtc_hal_mcu_spi_rw_buffer+0x6e>
 8005030:	2300      	movs	r3, #0
 8005032:	74fb      	strb	r3, [r7, #19]

            LL_SPI_TransmitData8( inst->spi, byte_to_transmit );
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	7cfa      	ldrb	r2, [r7, #19]
 800503a:	4611      	mov	r1, r2
 800503c:	4618      	mov	r0, r3
 800503e:	f7ff fec8 	bl	8004dd2 <LL_SPI_TransmitData8>

            rem_bytes_to_send--;
 8005042:	8afb      	ldrh	r3, [r7, #22]
 8005044:	3b01      	subs	r3, #1
 8005046:	82fb      	strh	r3, [r7, #22]
        }

        if( ( LL_SPI_GetRxFIFOLevel( inst->spi ) != LL_SPI_RX_FIFO_EMPTY ) && ( rem_bytes_to_receive > 0 ) )
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	4618      	mov	r0, r3
 800504e:	f7ff fe96 	bl	8004d7e <LL_SPI_GetRxFIFOLevel>
 8005052:	4603      	mov	r3, r0
 8005054:	2b00      	cmp	r3, #0
 8005056:	d017      	beq.n	8005088 <smtc_hal_mcu_spi_rw_buffer+0xc4>
 8005058:	8abb      	ldrh	r3, [r7, #20]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d014      	beq.n	8005088 <smtc_hal_mcu_spi_rw_buffer+0xc4>
        {
            const uint8_t byte_received = LL_SPI_ReceiveData8( inst->spi );
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	4618      	mov	r0, r3
 8005064:	f7ff fea7 	bl	8004db6 <LL_SPI_ReceiveData8>
 8005068:	4603      	mov	r3, r0
 800506a:	74bb      	strb	r3, [r7, #18]

            if( data_in != NULL )
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d007      	beq.n	8005082 <smtc_hal_mcu_spi_rw_buffer+0xbe>
            {
                data_in[data_length - rem_bytes_to_receive] = byte_received;
 8005072:	887a      	ldrh	r2, [r7, #2]
 8005074:	8abb      	ldrh	r3, [r7, #20]
 8005076:	1ad3      	subs	r3, r2, r3
 8005078:	461a      	mov	r2, r3
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4413      	add	r3, r2
 800507e:	7cba      	ldrb	r2, [r7, #18]
 8005080:	701a      	strb	r2, [r3, #0]
            }

            rem_bytes_to_receive--;
 8005082:	8abb      	ldrh	r3, [r7, #20]
 8005084:	3b01      	subs	r3, #1
 8005086:	82bb      	strh	r3, [r7, #20]
    while( ( rem_bytes_to_send > 0 ) || ( rem_bytes_to_receive > 0 ) )
 8005088:	8afb      	ldrh	r3, [r7, #22]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d1b9      	bne.n	8005002 <smtc_hal_mcu_spi_rw_buffer+0x3e>
 800508e:	8abb      	ldrh	r3, [r7, #20]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d1b6      	bne.n	8005002 <smtc_hal_mcu_spi_rw_buffer+0x3e>
        }
    }

    return SMTC_HAL_MCU_STATUS_OK;
 8005094:	2300      	movs	r3, #0
}
 8005096:	4618      	mov	r0, r3
 8005098:	3718      	adds	r7, #24
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
	...

080050a0 <smtc_hal_mcu_spi_stm32l4_get_free_slot>:
 * -----------------------------------------------------------------------------
 * --- PRIVATE FUNCTIONS DEFINITION --------------------------------------------
 */

static struct smtc_hal_mcu_spi_inst_s* smtc_hal_mcu_spi_stm32l4_get_free_slot( void )
{
 80050a0:	b480      	push	{r7}
 80050a2:	b083      	sub	sp, #12
 80050a4:	af00      	add	r7, sp, #0
    for( int i = 0; i < SMTC_HAL_MCU_SPI_STM32L4_N_INSTANCES_MAX; i++ )
 80050a6:	2300      	movs	r3, #0
 80050a8:	607b      	str	r3, [r7, #4]
 80050aa:	e010      	b.n	80050ce <smtc_hal_mcu_spi_stm32l4_get_free_slot+0x2e>
    {
        if( spi_inst_array[i].is_cfged == false )
 80050ac:	4a0d      	ldr	r2, [pc, #52]	; (80050e4 <smtc_hal_mcu_spi_stm32l4_get_free_slot+0x44>)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80050b4:	f083 0301 	eor.w	r3, r3, #1
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d004      	beq.n	80050c8 <smtc_hal_mcu_spi_stm32l4_get_free_slot+0x28>
        {
            return &spi_inst_array[i];
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	00db      	lsls	r3, r3, #3
 80050c2:	4a08      	ldr	r2, [pc, #32]	; (80050e4 <smtc_hal_mcu_spi_stm32l4_get_free_slot+0x44>)
 80050c4:	4413      	add	r3, r2
 80050c6:	e006      	b.n	80050d6 <smtc_hal_mcu_spi_stm32l4_get_free_slot+0x36>
    for( int i = 0; i < SMTC_HAL_MCU_SPI_STM32L4_N_INSTANCES_MAX; i++ )
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	3301      	adds	r3, #1
 80050cc:	607b      	str	r3, [r7, #4]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2b03      	cmp	r3, #3
 80050d2:	ddeb      	ble.n	80050ac <smtc_hal_mcu_spi_stm32l4_get_free_slot+0xc>
        }
    }

    return NULL;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	370c      	adds	r7, #12
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop
 80050e4:	20000a0c 	.word	0x20000a0c

080050e8 <smtc_hal_mcu_spi_stm32l4_is_real_inst>:

static bool smtc_hal_mcu_spi_stm32l4_is_real_inst( smtc_hal_mcu_spi_inst_t inst )
{
 80050e8:	b480      	push	{r7}
 80050ea:	b085      	sub	sp, #20
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
    for( int i = 0; i < SMTC_HAL_MCU_SPI_STM32L4_N_INSTANCES_MAX; i++ )
 80050f0:	2300      	movs	r3, #0
 80050f2:	60fb      	str	r3, [r7, #12]
 80050f4:	e00b      	b.n	800510e <smtc_hal_mcu_spi_stm32l4_is_real_inst+0x26>
    {
        if( inst == &spi_inst_array[i] )
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	00db      	lsls	r3, r3, #3
 80050fa:	4a0a      	ldr	r2, [pc, #40]	; (8005124 <smtc_hal_mcu_spi_stm32l4_is_real_inst+0x3c>)
 80050fc:	4413      	add	r3, r2
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	429a      	cmp	r2, r3
 8005102:	d101      	bne.n	8005108 <smtc_hal_mcu_spi_stm32l4_is_real_inst+0x20>
        {
            return true;
 8005104:	2301      	movs	r3, #1
 8005106:	e006      	b.n	8005116 <smtc_hal_mcu_spi_stm32l4_is_real_inst+0x2e>
    for( int i = 0; i < SMTC_HAL_MCU_SPI_STM32L4_N_INSTANCES_MAX; i++ )
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	3301      	adds	r3, #1
 800510c:	60fb      	str	r3, [r7, #12]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2b03      	cmp	r3, #3
 8005112:	ddf0      	ble.n	80050f6 <smtc_hal_mcu_spi_stm32l4_is_real_inst+0xe>
        }
    }

    return false;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	3714      	adds	r7, #20
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop
 8005124:	20000a0c 	.word	0x20000a0c

08005128 <LL_RCC_HSI_Enable>:
{
 8005128:	b480      	push	{r7}
 800512a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800512c:	4b05      	ldr	r3, [pc, #20]	; (8005144 <LL_RCC_HSI_Enable+0x1c>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a04      	ldr	r2, [pc, #16]	; (8005144 <LL_RCC_HSI_Enable+0x1c>)
 8005132:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005136:	6013      	str	r3, [r2, #0]
}
 8005138:	bf00      	nop
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr
 8005142:	bf00      	nop
 8005144:	40021000 	.word	0x40021000

08005148 <LL_RCC_HSI_IsReady>:
{
 8005148:	b480      	push	{r7}
 800514a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 800514c:	4b07      	ldr	r3, [pc, #28]	; (800516c <LL_RCC_HSI_IsReady+0x24>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005154:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005158:	d101      	bne.n	800515e <LL_RCC_HSI_IsReady+0x16>
 800515a:	2301      	movs	r3, #1
 800515c:	e000      	b.n	8005160 <LL_RCC_HSI_IsReady+0x18>
 800515e:	2300      	movs	r3, #0
}
 8005160:	4618      	mov	r0, r3
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr
 800516a:	bf00      	nop
 800516c:	40021000 	.word	0x40021000

08005170 <LL_RCC_HSI_SetCalibTrimming>:
{
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005178:	4b07      	ldr	r3, [pc, #28]	; (8005198 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	061b      	lsls	r3, r3, #24
 8005184:	4904      	ldr	r1, [pc, #16]	; (8005198 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8005186:	4313      	orrs	r3, r2
 8005188:	604b      	str	r3, [r1, #4]
}
 800518a:	bf00      	nop
 800518c:	370c      	adds	r7, #12
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop
 8005198:	40021000 	.word	0x40021000

0800519c <LL_RCC_LSI_Enable>:
{
 800519c:	b480      	push	{r7}
 800519e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80051a0:	4b06      	ldr	r3, [pc, #24]	; (80051bc <LL_RCC_LSI_Enable+0x20>)
 80051a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051a6:	4a05      	ldr	r2, [pc, #20]	; (80051bc <LL_RCC_LSI_Enable+0x20>)
 80051a8:	f043 0301 	orr.w	r3, r3, #1
 80051ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80051b0:	bf00      	nop
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr
 80051ba:	bf00      	nop
 80051bc:	40021000 	.word	0x40021000

080051c0 <LL_RCC_LSI_IsReady>:
{
 80051c0:	b480      	push	{r7}
 80051c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) ? 1UL : 0UL);
 80051c4:	4b07      	ldr	r3, [pc, #28]	; (80051e4 <LL_RCC_LSI_IsReady+0x24>)
 80051c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051ca:	f003 0302 	and.w	r3, r3, #2
 80051ce:	2b02      	cmp	r3, #2
 80051d0:	d101      	bne.n	80051d6 <LL_RCC_LSI_IsReady+0x16>
 80051d2:	2301      	movs	r3, #1
 80051d4:	e000      	b.n	80051d8 <LL_RCC_LSI_IsReady+0x18>
 80051d6:	2300      	movs	r3, #0
}
 80051d8:	4618      	mov	r0, r3
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop
 80051e4:	40021000 	.word	0x40021000

080051e8 <LL_RCC_SetSysClkSource>:
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80051f0:	4b06      	ldr	r3, [pc, #24]	; (800520c <LL_RCC_SetSysClkSource+0x24>)
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	f023 0203 	bic.w	r2, r3, #3
 80051f8:	4904      	ldr	r1, [pc, #16]	; (800520c <LL_RCC_SetSysClkSource+0x24>)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	608b      	str	r3, [r1, #8]
}
 8005200:	bf00      	nop
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr
 800520c:	40021000 	.word	0x40021000

08005210 <LL_RCC_GetSysClkSource>:
{
 8005210:	b480      	push	{r7}
 8005212:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005214:	4b04      	ldr	r3, [pc, #16]	; (8005228 <LL_RCC_GetSysClkSource+0x18>)
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	f003 030c 	and.w	r3, r3, #12
}
 800521c:	4618      	mov	r0, r3
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr
 8005226:	bf00      	nop
 8005228:	40021000 	.word	0x40021000

0800522c <LL_RCC_SetAHBPrescaler>:
{
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005234:	4b06      	ldr	r3, [pc, #24]	; (8005250 <LL_RCC_SetAHBPrescaler+0x24>)
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800523c:	4904      	ldr	r1, [pc, #16]	; (8005250 <LL_RCC_SetAHBPrescaler+0x24>)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4313      	orrs	r3, r2
 8005242:	608b      	str	r3, [r1, #8]
}
 8005244:	bf00      	nop
 8005246:	370c      	adds	r7, #12
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr
 8005250:	40021000 	.word	0x40021000

08005254 <LL_RCC_SetAPB1Prescaler>:
{
 8005254:	b480      	push	{r7}
 8005256:	b083      	sub	sp, #12
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800525c:	4b06      	ldr	r3, [pc, #24]	; (8005278 <LL_RCC_SetAPB1Prescaler+0x24>)
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005264:	4904      	ldr	r1, [pc, #16]	; (8005278 <LL_RCC_SetAPB1Prescaler+0x24>)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4313      	orrs	r3, r2
 800526a:	608b      	str	r3, [r1, #8]
}
 800526c:	bf00      	nop
 800526e:	370c      	adds	r7, #12
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr
 8005278:	40021000 	.word	0x40021000

0800527c <LL_RCC_SetAPB2Prescaler>:
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005284:	4b06      	ldr	r3, [pc, #24]	; (80052a0 <LL_RCC_SetAPB2Prescaler+0x24>)
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800528c:	4904      	ldr	r1, [pc, #16]	; (80052a0 <LL_RCC_SetAPB2Prescaler+0x24>)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4313      	orrs	r3, r2
 8005292:	608b      	str	r3, [r1, #8]
}
 8005294:	bf00      	nop
 8005296:	370c      	adds	r7, #12
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr
 80052a0:	40021000 	.word	0x40021000

080052a4 <LL_RCC_PLL_Enable>:
{
 80052a4:	b480      	push	{r7}
 80052a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80052a8:	4b05      	ldr	r3, [pc, #20]	; (80052c0 <LL_RCC_PLL_Enable+0x1c>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a04      	ldr	r2, [pc, #16]	; (80052c0 <LL_RCC_PLL_Enable+0x1c>)
 80052ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052b2:	6013      	str	r3, [r2, #0]
}
 80052b4:	bf00      	nop
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	40021000 	.word	0x40021000

080052c4 <LL_RCC_PLL_IsReady>:
{
 80052c4:	b480      	push	{r7}
 80052c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 80052c8:	4b07      	ldr	r3, [pc, #28]	; (80052e8 <LL_RCC_PLL_IsReady+0x24>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80052d4:	d101      	bne.n	80052da <LL_RCC_PLL_IsReady+0x16>
 80052d6:	2301      	movs	r3, #1
 80052d8:	e000      	b.n	80052dc <LL_RCC_PLL_IsReady+0x18>
 80052da:	2300      	movs	r3, #0
}
 80052dc:	4618      	mov	r0, r3
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr
 80052e6:	bf00      	nop
 80052e8:	40021000 	.word	0x40021000

080052ec <LL_RCC_PLL_ConfigDomain_SYS>:
{
 80052ec:	b480      	push	{r7}
 80052ee:	b085      	sub	sp, #20
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	607a      	str	r2, [r7, #4]
 80052f8:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 80052fa:	4b0a      	ldr	r3, [pc, #40]	; (8005324 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80052fc:	68da      	ldr	r2, [r3, #12]
 80052fe:	4b0a      	ldr	r3, [pc, #40]	; (8005328 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8005300:	4013      	ands	r3, r2
 8005302:	68f9      	ldr	r1, [r7, #12]
 8005304:	68ba      	ldr	r2, [r7, #8]
 8005306:	4311      	orrs	r1, r2
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	0212      	lsls	r2, r2, #8
 800530c:	4311      	orrs	r1, r2
 800530e:	683a      	ldr	r2, [r7, #0]
 8005310:	430a      	orrs	r2, r1
 8005312:	4904      	ldr	r1, [pc, #16]	; (8005324 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8005314:	4313      	orrs	r3, r2
 8005316:	60cb      	str	r3, [r1, #12]
}
 8005318:	bf00      	nop
 800531a:	3714      	adds	r7, #20
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr
 8005324:	40021000 	.word	0x40021000
 8005328:	f9ff808c 	.word	0xf9ff808c

0800532c <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 800532c:	b480      	push	{r7}
 800532e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8005330:	4b05      	ldr	r3, [pc, #20]	; (8005348 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	4a04      	ldr	r2, [pc, #16]	; (8005348 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8005336:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800533a:	60d3      	str	r3, [r2, #12]
}
 800533c:	bf00      	nop
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr
 8005346:	bf00      	nop
 8005348:	40021000 	.word	0x40021000

0800534c <LL_RCC_PLLSAI1_Enable>:
  * @brief  Enable PLLSAI1
  * @rmtoll CR           PLLSAI1ON     LL_RCC_PLLSAI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLLSAI1_Enable(void)
{
 800534c:	b480      	push	{r7}
 800534e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005350:	4b05      	ldr	r3, [pc, #20]	; (8005368 <LL_RCC_PLLSAI1_Enable+0x1c>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a04      	ldr	r2, [pc, #16]	; (8005368 <LL_RCC_PLLSAI1_Enable+0x1c>)
 8005356:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800535a:	6013      	str	r3, [r2, #0]
}
 800535c:	bf00      	nop
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop
 8005368:	40021000 	.word	0x40021000

0800536c <LL_RCC_PLLSAI1_IsReady>:
  * @brief  Check if PLLSAI1 Ready
  * @rmtoll CR           PLLSAI1RDY    LL_RCC_PLLSAI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLLSAI1_IsReady(void)
{
 800536c:	b480      	push	{r7}
 800536e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RCC_CR_PLLSAI1RDY) ? 1UL : 0UL);
 8005370:	4b07      	ldr	r3, [pc, #28]	; (8005390 <LL_RCC_PLLSAI1_IsReady+0x24>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005378:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800537c:	d101      	bne.n	8005382 <LL_RCC_PLLSAI1_IsReady+0x16>
 800537e:	2301      	movs	r3, #1
 8005380:	e000      	b.n	8005384 <LL_RCC_PLLSAI1_IsReady+0x18>
 8005382:	2300      	movs	r3, #0
}
 8005384:	4618      	mov	r0, r3
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr
 800538e:	bf00      	nop
 8005390:	40021000 	.word	0x40021000

08005394 <LL_RCC_PLLSAI1_ConfigDomain_48M>:
  *         @arg @ref LL_RCC_PLLSAI1Q_DIV_6
  *         @arg @ref LL_RCC_PLLSAI1Q_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLLSAI1_ConfigDomain_48M(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLQ)
{
 8005394:	b480      	push	{r7}
 8005396:	b085      	sub	sp, #20
 8005398:	af00      	add	r7, sp, #0
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	607a      	str	r2, [r7, #4]
 80053a0:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, Source | PLLM);
 80053a2:	4b0e      	ldr	r3, [pc, #56]	; (80053dc <LL_RCC_PLLSAI1_ConfigDomain_48M+0x48>)
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80053aa:	68f9      	ldr	r1, [r7, #12]
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	430b      	orrs	r3, r1
 80053b0:	490a      	ldr	r1, [pc, #40]	; (80053dc <LL_RCC_PLLSAI1_ConfigDomain_48M+0x48>)
 80053b2:	4313      	orrs	r3, r2
 80053b4:	60cb      	str	r3, [r1, #12]
  MODIFY_REG(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1Q, PLLN << RCC_PLLSAI1CFGR_PLLSAI1N_Pos | PLLQ);
 80053b6:	4b09      	ldr	r3, [pc, #36]	; (80053dc <LL_RCC_PLLSAI1_ConfigDomain_48M+0x48>)
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80053be:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	0211      	lsls	r1, r2, #8
 80053c6:	683a      	ldr	r2, [r7, #0]
 80053c8:	430a      	orrs	r2, r1
 80053ca:	4904      	ldr	r1, [pc, #16]	; (80053dc <LL_RCC_PLLSAI1_ConfigDomain_48M+0x48>)
 80053cc:	4313      	orrs	r3, r2
 80053ce:	610b      	str	r3, [r1, #16]
}
 80053d0:	bf00      	nop
 80053d2:	3714      	adds	r7, #20
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr
 80053dc:	40021000 	.word	0x40021000

080053e0 <LL_RCC_PLLSAI1_EnableDomain_48M>:
  * @brief  Enable PLLSAI1 output mapped on 48MHz domain clock
  * @rmtoll PLLSAI1CFGR  PLLSAI1QEN    LL_RCC_PLLSAI1_EnableDomain_48M
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLLSAI1_EnableDomain_48M(void)
{
 80053e0:	b480      	push	{r7}
 80053e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN);
 80053e4:	4b05      	ldr	r3, [pc, #20]	; (80053fc <LL_RCC_PLLSAI1_EnableDomain_48M+0x1c>)
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	4a04      	ldr	r2, [pc, #16]	; (80053fc <LL_RCC_PLLSAI1_EnableDomain_48M+0x1c>)
 80053ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053ee:	6113      	str	r3, [r2, #16]
}
 80053f0:	bf00      	nop
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr
 80053fa:	bf00      	nop
 80053fc:	40021000 	.word	0x40021000

08005400 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8005408:	4b06      	ldr	r3, [pc, #24]	; (8005424 <LL_FLASH_SetLatency+0x24>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f023 0207 	bic.w	r2, r3, #7
 8005410:	4904      	ldr	r1, [pc, #16]	; (8005424 <LL_FLASH_SetLatency+0x24>)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4313      	orrs	r3, r2
 8005416:	600b      	str	r3, [r1, #0]
}
 8005418:	bf00      	nop
 800541a:	370c      	adds	r7, #12
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr
 8005424:	40022000 	.word	0x40022000

08005428 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8005428:	b480      	push	{r7}
 800542a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800542c:	4b04      	ldr	r3, [pc, #16]	; (8005440 <LL_FLASH_GetLatency+0x18>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f003 0307 	and.w	r3, r3, #7
}
 8005434:	4618      	mov	r0, r3
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop
 8005440:	40022000 	.word	0x40022000

08005444 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800544c:	4b06      	ldr	r3, [pc, #24]	; (8005468 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8005454:	4904      	ldr	r1, [pc, #16]	; (8005468 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4313      	orrs	r3, r2
 800545a:	600b      	str	r3, [r1, #0]
}
 800545c:	bf00      	nop
 800545e:	370c      	adds	r7, #12
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr
 8005468:	40007000 	.word	0x40007000

0800546c <LL_APB2_GRP1_EnableClock>:
{
 800546c:	b480      	push	{r7}
 800546e:	b085      	sub	sp, #20
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8005474:	4b08      	ldr	r3, [pc, #32]	; (8005498 <LL_APB2_GRP1_EnableClock+0x2c>)
 8005476:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005478:	4907      	ldr	r1, [pc, #28]	; (8005498 <LL_APB2_GRP1_EnableClock+0x2c>)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4313      	orrs	r3, r2
 800547e:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8005480:	4b05      	ldr	r3, [pc, #20]	; (8005498 <LL_APB2_GRP1_EnableClock+0x2c>)
 8005482:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	4013      	ands	r3, r2
 8005488:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800548a:	68fb      	ldr	r3, [r7, #12]
}
 800548c:	bf00      	nop
 800548e:	3714      	adds	r7, #20
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr
 8005498:	40021000 	.word	0x40021000

0800549c <smtc_hal_mcu_init>:
 * -----------------------------------------------------------------------------
 * --- PUBLIC FUNCTIONS DEFINITION ---------------------------------------------
 */

smtc_hal_mcu_status_t smtc_hal_mcu_init( )
{
 800549c:	b580      	push	{r7, lr}
 800549e:	af00      	add	r7, sp, #0
    LL_FLASH_SetLatency( LL_FLASH_LATENCY_4 );
 80054a0:	2004      	movs	r0, #4
 80054a2:	f7ff ffad 	bl	8005400 <LL_FLASH_SetLatency>
    while( LL_FLASH_GetLatency( ) != LL_FLASH_LATENCY_4 )
 80054a6:	bf00      	nop
 80054a8:	f7ff ffbe 	bl	8005428 <LL_FLASH_GetLatency>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b04      	cmp	r3, #4
 80054b0:	d1fa      	bne.n	80054a8 <smtc_hal_mcu_init+0xc>
    {
    }

    LL_PWR_SetRegulVoltageScaling( LL_PWR_REGU_VOLTAGE_SCALE1 );
 80054b2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80054b6:	f7ff ffc5 	bl	8005444 <LL_PWR_SetRegulVoltageScaling>

    LL_RCC_HSI_Enable( );
 80054ba:	f7ff fe35 	bl	8005128 <LL_RCC_HSI_Enable>
    while( LL_RCC_HSI_IsReady( ) != 1 )
 80054be:	bf00      	nop
 80054c0:	f7ff fe42 	bl	8005148 <LL_RCC_HSI_IsReady>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d1fa      	bne.n	80054c0 <smtc_hal_mcu_init+0x24>
    {
    }

    LL_RCC_LSI_Enable( );
 80054ca:	f7ff fe67 	bl	800519c <LL_RCC_LSI_Enable>
    while( LL_RCC_LSI_IsReady( ) != 1 )
 80054ce:	bf00      	nop
 80054d0:	f7ff fe76 	bl	80051c0 <LL_RCC_LSI_IsReady>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d1fa      	bne.n	80054d0 <smtc_hal_mcu_init+0x34>
    {
    }

    LL_RCC_HSI_SetCalibTrimming( 16 );
 80054da:	2010      	movs	r0, #16
 80054dc:	f7ff fe48 	bl	8005170 <LL_RCC_HSI_SetCalibTrimming>

    LL_RCC_PLL_ConfigDomain_SYS( LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_1, 10, LL_RCC_PLLR_DIV_2 );
 80054e0:	2300      	movs	r3, #0
 80054e2:	220a      	movs	r2, #10
 80054e4:	2100      	movs	r1, #0
 80054e6:	2002      	movs	r0, #2
 80054e8:	f7ff ff00 	bl	80052ec <LL_RCC_PLL_ConfigDomain_SYS>
    LL_RCC_PLL_Enable( );
 80054ec:	f7ff feda 	bl	80052a4 <LL_RCC_PLL_Enable>
    LL_RCC_PLL_EnableDomain_SYS( );
 80054f0:	f7ff ff1c 	bl	800532c <LL_RCC_PLL_EnableDomain_SYS>
    while( LL_RCC_PLL_IsReady( ) != 1 )
 80054f4:	bf00      	nop
 80054f6:	f7ff fee5 	bl	80052c4 <LL_RCC_PLL_IsReady>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d1fa      	bne.n	80054f6 <smtc_hal_mcu_init+0x5a>
    {
    }

    LL_RCC_PLLSAI1_ConfigDomain_48M( LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_1, 12, LL_RCC_PLLSAI1Q_DIV_4 );
 8005500:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005504:	220c      	movs	r2, #12
 8005506:	2100      	movs	r1, #0
 8005508:	2002      	movs	r0, #2
 800550a:	f7ff ff43 	bl	8005394 <LL_RCC_PLLSAI1_ConfigDomain_48M>
    LL_RCC_PLLSAI1_Enable( );
 800550e:	f7ff ff1d 	bl	800534c <LL_RCC_PLLSAI1_Enable>
    LL_RCC_PLLSAI1_EnableDomain_48M( );
 8005512:	f7ff ff65 	bl	80053e0 <LL_RCC_PLLSAI1_EnableDomain_48M>
    while( LL_RCC_PLLSAI1_IsReady( ) != 1 )
 8005516:	bf00      	nop
 8005518:	f7ff ff28 	bl	800536c <LL_RCC_PLLSAI1_IsReady>
 800551c:	4603      	mov	r3, r0
 800551e:	2b01      	cmp	r3, #1
 8005520:	d1fa      	bne.n	8005518 <smtc_hal_mcu_init+0x7c>
    {
    };

    LL_RCC_SetSysClkSource( LL_RCC_SYS_CLKSOURCE_PLL );
 8005522:	2003      	movs	r0, #3
 8005524:	f7ff fe60 	bl	80051e8 <LL_RCC_SetSysClkSource>
    while( LL_RCC_GetSysClkSource( ) != LL_RCC_SYS_CLKSOURCE_STATUS_PLL )
 8005528:	bf00      	nop
 800552a:	f7ff fe71 	bl	8005210 <LL_RCC_GetSysClkSource>
 800552e:	4603      	mov	r3, r0
 8005530:	2b0c      	cmp	r3, #12
 8005532:	d1fa      	bne.n	800552a <smtc_hal_mcu_init+0x8e>
    {
    }

    LL_RCC_SetAHBPrescaler( LL_RCC_SYSCLK_DIV_1 );
 8005534:	2000      	movs	r0, #0
 8005536:	f7ff fe79 	bl	800522c <LL_RCC_SetAHBPrescaler>
    LL_RCC_SetAPB1Prescaler( LL_RCC_APB1_DIV_1 );
 800553a:	2000      	movs	r0, #0
 800553c:	f7ff fe8a 	bl	8005254 <LL_RCC_SetAPB1Prescaler>
    LL_RCC_SetAPB2Prescaler( LL_RCC_APB2_DIV_1 );
 8005540:	2000      	movs	r0, #0
 8005542:	f7ff fe9b 	bl	800527c <LL_RCC_SetAPB2Prescaler>

    LL_Init1msTick( 80000000 );
 8005546:	4806      	ldr	r0, [pc, #24]	; (8005560 <smtc_hal_mcu_init+0xc4>)
 8005548:	f7fd ff34 	bl	80033b4 <LL_Init1msTick>

    LL_SetSystemCoreClock( 80000000 );
 800554c:	4804      	ldr	r0, [pc, #16]	; (8005560 <smtc_hal_mcu_init+0xc4>)
 800554e:	f7fd ff67 	bl	8003420 <LL_SetSystemCoreClock>

    LL_APB2_GRP1_EnableClock( LL_APB2_GRP1_PERIPH_SYSCFG );
 8005552:	2001      	movs	r0, #1
 8005554:	f7ff ff8a 	bl	800546c <LL_APB2_GRP1_EnableClock>

    return SMTC_HAL_MCU_STATUS_OK;
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	bd80      	pop	{r7, pc}
 800555e:	bf00      	nop
 8005560:	04c4b400 	.word	0x04c4b400

08005564 <LL_LPTIM_ClearFlag_ARRM>:
  * @rmtoll ICR          ARRMCF        LL_LPTIM_ClearFlag_ARRM
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_ClearFlag_ARRM(LPTIM_TypeDef *LPTIMx)
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->ICR, LPTIM_ICR_ARRMCF);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	f043 0202 	orr.w	r2, r3, #2
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	605a      	str	r2, [r3, #4]
}
 8005578:	bf00      	nop
 800557a:	370c      	adds	r7, #12
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <LL_LPTIM_IsActiveFlag_ARRM>:
  * @rmtoll ISR          ARRM          LL_LPTIM_IsActiveFlag_ARRM
  * @param  LPTIMx Low-Power Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPTIM_IsActiveFlag_ARRM(const LPTIM_TypeDef *LPTIMx)
{
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  return (((READ_BIT(LPTIMx->ISR, LPTIM_ISR_ARRM) == LPTIM_ISR_ARRM) ? 1UL : 0UL));
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 0302 	and.w	r3, r3, #2
 8005594:	2b02      	cmp	r3, #2
 8005596:	d101      	bne.n	800559c <LL_LPTIM_IsActiveFlag_ARRM+0x18>
 8005598:	2301      	movs	r3, #1
 800559a:	e000      	b.n	800559e <LL_LPTIM_IsActiveFlag_ARRM+0x1a>
 800559c:	2300      	movs	r3, #0
}
 800559e:	4618      	mov	r0, r3
 80055a0:	370c      	adds	r7, #12
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr
	...

080055ac <LPTIM1_IRQHandler>:

/**
 * @brief  This function handles LPTIM1 interrupts.
 */
void LPTIM1_IRQHandler( void )
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b082      	sub	sp, #8
 80055b0:	af00      	add	r7, sp, #0
    /* Check whether Autoreload match interrupt is pending */
    if( LL_LPTIM_IsActiveFlag_ARRM( LPTIM1 ) == 1 )
 80055b2:	4817      	ldr	r0, [pc, #92]	; (8005610 <LPTIM1_IRQHandler+0x64>)
 80055b4:	f7ff ffe6 	bl	8005584 <LL_LPTIM_IsActiveFlag_ARRM>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d124      	bne.n	8005608 <LPTIM1_IRQHandler+0x5c>
    {
        /* Clear the Autoreload match interrupt flag */
        LL_LPTIM_ClearFLAG_ARRM( LPTIM1 );
 80055be:	4814      	ldr	r0, [pc, #80]	; (8005610 <LPTIM1_IRQHandler+0x64>)
 80055c0:	f7ff ffd0 	bl	8005564 <LL_LPTIM_ClearFlag_ARRM>

        for( int i = 0; i < SMTC_HAL_MCU_TIMER_STM32L4_N_INSTANCES_MAX; i++ )
 80055c4:	2300      	movs	r3, #0
 80055c6:	607b      	str	r3, [r7, #4]
 80055c8:	e01b      	b.n	8005602 <LPTIM1_IRQHandler+0x56>
        {
            if( tim_inst_array[i].tim == LPTIM1 )
 80055ca:	4a12      	ldr	r2, [pc, #72]	; (8005614 <LPTIM1_IRQHandler+0x68>)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	011b      	lsls	r3, r3, #4
 80055d0:	4413      	add	r3, r2
 80055d2:	3304      	adds	r3, #4
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a0e      	ldr	r2, [pc, #56]	; (8005610 <LPTIM1_IRQHandler+0x64>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d10f      	bne.n	80055fc <LPTIM1_IRQHandler+0x50>
            {
                if( tim_inst_array[i].callback_expiry != NULL )
 80055dc:	4a0d      	ldr	r2, [pc, #52]	; (8005614 <LPTIM1_IRQHandler+0x68>)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	011b      	lsls	r3, r3, #4
 80055e2:	4413      	add	r3, r2
 80055e4:	330c      	adds	r3, #12
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d007      	beq.n	80055fc <LPTIM1_IRQHandler+0x50>
                {
                    tim_inst_array[i].callback_expiry( );
 80055ec:	4a09      	ldr	r2, [pc, #36]	; (8005614 <LPTIM1_IRQHandler+0x68>)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	011b      	lsls	r3, r3, #4
 80055f2:	4413      	add	r3, r2
 80055f4:	330c      	adds	r3, #12
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4798      	blx	r3
                    return;
 80055fa:	e005      	b.n	8005608 <LPTIM1_IRQHandler+0x5c>
        for( int i = 0; i < SMTC_HAL_MCU_TIMER_STM32L4_N_INSTANCES_MAX; i++ )
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	3301      	adds	r3, #1
 8005600:	607b      	str	r3, [r7, #4]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2b00      	cmp	r3, #0
 8005606:	dde0      	ble.n	80055ca <LPTIM1_IRQHandler+0x1e>
                }
            }
        }
    }
}
 8005608:	3708      	adds	r7, #8
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
 800560e:	bf00      	nop
 8005610:	40007c00 	.word	0x40007c00
 8005614:	20000a2c 	.word	0x20000a2c

08005618 <__NVIC_EnableIRQ>:
{
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
 800561e:	4603      	mov	r3, r0
 8005620:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005626:	2b00      	cmp	r3, #0
 8005628:	db0b      	blt.n	8005642 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800562a:	79fb      	ldrb	r3, [r7, #7]
 800562c:	f003 021f 	and.w	r2, r3, #31
 8005630:	4907      	ldr	r1, [pc, #28]	; (8005650 <__NVIC_EnableIRQ+0x38>)
 8005632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005636:	095b      	lsrs	r3, r3, #5
 8005638:	2001      	movs	r0, #1
 800563a:	fa00 f202 	lsl.w	r2, r0, r2
 800563e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005642:	bf00      	nop
 8005644:	370c      	adds	r7, #12
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop
 8005650:	e000e100 	.word	0xe000e100

08005654 <__NVIC_SetPriority>:
{
 8005654:	b480      	push	{r7}
 8005656:	b083      	sub	sp, #12
 8005658:	af00      	add	r7, sp, #0
 800565a:	4603      	mov	r3, r0
 800565c:	6039      	str	r1, [r7, #0]
 800565e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005664:	2b00      	cmp	r3, #0
 8005666:	db0a      	blt.n	800567e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	b2da      	uxtb	r2, r3
 800566c:	490c      	ldr	r1, [pc, #48]	; (80056a0 <__NVIC_SetPriority+0x4c>)
 800566e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005672:	0112      	lsls	r2, r2, #4
 8005674:	b2d2      	uxtb	r2, r2
 8005676:	440b      	add	r3, r1
 8005678:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800567c:	e00a      	b.n	8005694 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	b2da      	uxtb	r2, r3
 8005682:	4908      	ldr	r1, [pc, #32]	; (80056a4 <__NVIC_SetPriority+0x50>)
 8005684:	79fb      	ldrb	r3, [r7, #7]
 8005686:	f003 030f 	and.w	r3, r3, #15
 800568a:	3b04      	subs	r3, #4
 800568c:	0112      	lsls	r2, r2, #4
 800568e:	b2d2      	uxtb	r2, r2
 8005690:	440b      	add	r3, r1
 8005692:	761a      	strb	r2, [r3, #24]
}
 8005694:	bf00      	nop
 8005696:	370c      	adds	r7, #12
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr
 80056a0:	e000e100 	.word	0xe000e100
 80056a4:	e000ed00 	.word	0xe000ed00

080056a8 <LL_USART_Enable>:
{
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f043 0201 	orr.w	r2, r3, #1
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	601a      	str	r2, [r3, #0]
}
 80056bc:	bf00      	nop
 80056be:	370c      	adds	r7, #12
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <LL_USART_IsEnabled>:
{
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 0301 	and.w	r3, r3, #1
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d101      	bne.n	80056e0 <LL_USART_IsEnabled+0x18>
 80056dc:	2301      	movs	r3, #1
 80056de:	e000      	b.n	80056e2 <LL_USART_IsEnabled+0x1a>
 80056e0:	2300      	movs	r3, #0
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	370c      	adds	r7, #12
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr

080056ee <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80056ee:	b480      	push	{r7}
 80056f0:	b083      	sub	sp, #12
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	609a      	str	r2, [r3, #8]
}
 800570e:	bf00      	nop
 8005710:	370c      	adds	r7, #12
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr

0800571a <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(const USART_TypeDef *USARTx)
{
 800571a:	b480      	push	{r7}
 800571c:	b083      	sub	sp, #12
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	69db      	ldr	r3, [r3, #28]
 8005726:	f003 0320 	and.w	r3, r3, #32
 800572a:	2b20      	cmp	r3, #32
 800572c:	d101      	bne.n	8005732 <LL_USART_IsActiveFlag_RXNE+0x18>
 800572e:	2301      	movs	r3, #1
 8005730:	e000      	b.n	8005734 <LL_USART_IsActiveFlag_RXNE+0x1a>
 8005732:	2300      	movs	r3, #0
}
 8005734:	4618      	mov	r0, r3
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
 8005740:	b480      	push	{r7}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	69db      	ldr	r3, [r3, #28]
 800574c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005750:	2b40      	cmp	r3, #64	; 0x40
 8005752:	d101      	bne.n	8005758 <LL_USART_IsActiveFlag_TC+0x18>
 8005754:	2301      	movs	r3, #1
 8005756:	e000      	b.n	800575a <LL_USART_IsActiveFlag_TC+0x1a>
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	370c      	adds	r7, #12
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr

08005766 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8005766:	b480      	push	{r7}
 8005768:	b083      	sub	sp, #12
 800576a:	af00      	add	r7, sp, #0
 800576c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	69db      	ldr	r3, [r3, #28]
 8005772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005776:	2b80      	cmp	r3, #128	; 0x80
 8005778:	d101      	bne.n	800577e <LL_USART_IsActiveFlag_TXE+0x18>
 800577a:	2301      	movs	r3, #1
 800577c:	e000      	b.n	8005780 <LL_USART_IsActiveFlag_TXE+0x1a>
 800577e:	2300      	movs	r3, #0
}
 8005780:	4618      	mov	r0, r3
 8005782:	370c      	adds	r7, #12
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 800578c:	b480      	push	{r7}
 800578e:	b089      	sub	sp, #36	; 0x24
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	e853 3f00 	ldrex	r3, [r3]
 800579e:	60bb      	str	r3, [r7, #8]
   return(result);
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	f043 0320 	orr.w	r3, r3, #32
 80057a6:	61fb      	str	r3, [r7, #28]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	69fa      	ldr	r2, [r7, #28]
 80057ac:	61ba      	str	r2, [r7, #24]
 80057ae:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b0:	6979      	ldr	r1, [r7, #20]
 80057b2:	69ba      	ldr	r2, [r7, #24]
 80057b4:	e841 2300 	strex	r3, r2, [r1]
 80057b8:	613b      	str	r3, [r7, #16]
   return(result);
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d1e9      	bne.n	8005794 <LL_USART_EnableIT_RXNE+0x8>
}
 80057c0:	bf00      	nop
 80057c2:	bf00      	nop
 80057c4:	3724      	adds	r7, #36	; 0x24
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr

080057ce <LL_USART_IsEnabledIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_IsEnabledIT_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE(const USART_TypeDef *USARTx)
{
 80057ce:	b480      	push	{r7}
 80057d0:	b083      	sub	sp, #12
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE)) ? 1U : 0U);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 0320 	and.w	r3, r3, #32
 80057de:	2b20      	cmp	r3, #32
 80057e0:	d101      	bne.n	80057e6 <LL_USART_IsEnabledIT_RXNE+0x18>
 80057e2:	2301      	movs	r3, #1
 80057e4:	e000      	b.n	80057e8 <LL_USART_IsEnabledIT_RXNE+0x1a>
 80057e6:	2300      	movs	r3, #0
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	370c      	adds	r7, #12
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr

080057f4 <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005800:	b29b      	uxth	r3, r3
 8005802:	b2db      	uxtb	r3, r3
}
 8005804:	4618      	mov	r0, r3
 8005806:	370c      	adds	r7, #12
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8005810:	b480      	push	{r7}
 8005812:	b083      	sub	sp, #12
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	460b      	mov	r3, r1
 800581a:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 800581c:	78fb      	ldrb	r3, [r7, #3]
 800581e:	b29a      	uxth	r2, r3
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8005824:	bf00      	nop
 8005826:	370c      	adds	r7, #12
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr

08005830 <LL_USART_RequestRxDataFlush>:
  * @rmtoll RQR          RXFRQ         LL_USART_RequestRxDataFlush
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_RequestRxDataFlush(USART_TypeDef *USARTx)
{
 8005830:	b480      	push	{r7}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->RQR, (uint16_t)USART_RQR_RXFRQ);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	8b1b      	ldrh	r3, [r3, #24]
 800583c:	b29b      	uxth	r3, r3
 800583e:	f043 0308 	orr.w	r3, r3, #8
 8005842:	b29a      	uxth	r2, r3
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	831a      	strh	r2, [r3, #24]
}
 8005848:	bf00      	nop
 800584a:	370c      	adds	r7, #12
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <LL_USART_RequestTxDataFlush>:
  * @rmtoll RQR          TXFRQ         LL_USART_RequestTxDataFlush
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_RequestTxDataFlush(USART_TypeDef *USARTx)
{
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->RQR, (uint16_t)USART_RQR_TXFRQ);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	8b1b      	ldrh	r3, [r3, #24]
 8005860:	b29b      	uxth	r3, r3
 8005862:	f043 0310 	orr.w	r3, r3, #16
 8005866:	b29a      	uxth	r2, r3
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	831a      	strh	r2, [r3, #24]
}
 800586c:	bf00      	nop
 800586e:	370c      	adds	r7, #12
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <LL_AHB2_GRP1_EnableClock>:
{
 8005878:	b480      	push	{r7}
 800587a:	b085      	sub	sp, #20
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8005880:	4b08      	ldr	r3, [pc, #32]	; (80058a4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8005882:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005884:	4907      	ldr	r1, [pc, #28]	; (80058a4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4313      	orrs	r3, r2
 800588a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800588c:	4b05      	ldr	r3, [pc, #20]	; (80058a4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800588e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4013      	ands	r3, r2
 8005894:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005896:	68fb      	ldr	r3, [r7, #12]
}
 8005898:	bf00      	nop
 800589a:	3714      	adds	r7, #20
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr
 80058a4:	40021000 	.word	0x40021000

080058a8 <LL_APB1_GRP1_EnableClock>:
{
 80058a8:	b480      	push	{r7}
 80058aa:	b085      	sub	sp, #20
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80058b0:	4b08      	ldr	r3, [pc, #32]	; (80058d4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80058b2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80058b4:	4907      	ldr	r1, [pc, #28]	; (80058d4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80058bc:	4b05      	ldr	r3, [pc, #20]	; (80058d4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80058be:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4013      	ands	r3, r2
 80058c4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80058c6:	68fb      	ldr	r3, [r7, #12]
}
 80058c8:	bf00      	nop
 80058ca:	3714      	adds	r7, #20
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr
 80058d4:	40021000 	.word	0x40021000

080058d8 <smtc_hal_mcu_uart_init>:
 */

smtc_hal_mcu_status_t smtc_hal_mcu_uart_init( const smtc_hal_mcu_uart_cfg_t      cfg,
                                              const smtc_hal_mcu_uart_cfg_app_t* cfg_app,
                                              smtc_hal_mcu_uart_inst_t*          inst )
{
 80058d8:	b5b0      	push	{r4, r5, r7, lr}
 80058da:	b092      	sub	sp, #72	; 0x48
 80058dc:	af00      	add	r7, sp, #0
 80058de:	60f8      	str	r0, [r7, #12]
 80058e0:	60b9      	str	r1, [r7, #8]
 80058e2:	607a      	str	r2, [r7, #4]
    struct smtc_hal_mcu_uart_inst_s* uart_cfg_slot = smtc_hal_mcu_uart_stm32l4_get_free_slot( );
 80058e4:	f000 f8b4 	bl	8005a50 <smtc_hal_mcu_uart_stm32l4_get_free_slot>
 80058e8:	6478      	str	r0, [r7, #68]	; 0x44

    if( uart_cfg_slot == NULL )
 80058ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d101      	bne.n	80058f4 <smtc_hal_mcu_uart_init+0x1c>
    {
        return SMTC_HAL_MCU_STATUS_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	e070      	b.n	80059d6 <smtc_hal_mcu_uart_init+0xfe>
    }

    if( cfg->usart == USART2 )
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a39      	ldr	r2, [pc, #228]	; (80059e0 <smtc_hal_mcu_uart_init+0x108>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d122      	bne.n	8005944 <smtc_hal_mcu_uart_init+0x6c>
    {
        uart_cfg_slot->usart = cfg->usart;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005904:	605a      	str	r2, [r3, #4]

        LL_APB1_GRP1_EnableClock( LL_APB1_GRP1_PERIPH_USART2 );
 8005906:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800590a:	f7ff ffcd 	bl	80058a8 <LL_APB1_GRP1_EnableClock>

        LL_AHB2_GRP1_EnableClock( LL_AHB2_GRP1_PERIPH_GPIOA );
 800590e:	2001      	movs	r0, #1
 8005910:	f7ff ffb2 	bl	8005878 <LL_AHB2_GRP1_EnableClock>

        LL_GPIO_InitTypeDef GPIO_InitStruct = {
 8005914:	4b33      	ldr	r3, [pc, #204]	; (80059e4 <smtc_hal_mcu_uart_init+0x10c>)
 8005916:	f107 0410 	add.w	r4, r7, #16
 800591a:	461d      	mov	r5, r3
 800591c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800591e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005920:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005924:	e884 0003 	stmia.w	r4, {r0, r1}
            .OutputType = LL_GPIO_OUTPUT_PUSHPULL,
            .Pull       = LL_GPIO_PULL_NO,
            .Alternate  = LL_GPIO_AF_7,
        };

        LL_GPIO_Init( GPIOA, &GPIO_InitStruct );
 8005928:	f107 0310 	add.w	r3, r7, #16
 800592c:	4619      	mov	r1, r3
 800592e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005932:	f7fc ff7e 	bl	8002832 <LL_GPIO_Init>

        NVIC_SetPriority( USART2_IRQn, 0 );
 8005936:	2100      	movs	r1, #0
 8005938:	2026      	movs	r0, #38	; 0x26
 800593a:	f7ff fe8b 	bl	8005654 <__NVIC_SetPriority>
        NVIC_EnableIRQ( USART2_IRQn );
 800593e:	2026      	movs	r0, #38	; 0x26
 8005940:	f7ff fe6a 	bl	8005618 <__NVIC_EnableIRQ>
    }

    LL_USART_InitTypeDef USART_InitStruct = {
        .BaudRate            = cfg_app->baudrate,
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	681b      	ldr	r3, [r3, #0]
    LL_USART_InitTypeDef USART_InitStruct = {
 8005948:	62bb      	str	r3, [r7, #40]	; 0x28
 800594a:	2300      	movs	r3, #0
 800594c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800594e:	2300      	movs	r3, #0
 8005950:	633b      	str	r3, [r7, #48]	; 0x30
 8005952:	2300      	movs	r3, #0
 8005954:	637b      	str	r3, [r7, #52]	; 0x34
 8005956:	230c      	movs	r3, #12
 8005958:	63bb      	str	r3, [r7, #56]	; 0x38
 800595a:	2300      	movs	r3, #0
 800595c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800595e:	2300      	movs	r3, #0
 8005960:	643b      	str	r3, [r7, #64]	; 0x40
        .TransferDirection   = LL_USART_DIRECTION_TX_RX,
        .HardwareFlowControl = LL_USART_HWCONTROL_NONE,
        .OverSampling        = LL_USART_OVERSAMPLING_16,
    };

    uart_cfg_slot->callback_rx = cfg_app->callback_rx;
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	685a      	ldr	r2, [r3, #4]
 8005966:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005968:	609a      	str	r2, [r3, #8]

    if( LL_USART_Init( uart_cfg_slot->usart, &USART_InitStruct ) == ERROR )
 800596a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005972:	4611      	mov	r1, r2
 8005974:	4618      	mov	r0, r3
 8005976:	f7fd fc87 	bl	8003288 <LL_USART_Init>
 800597a:	4603      	mov	r3, r0
 800597c:	2b01      	cmp	r3, #1
 800597e:	d101      	bne.n	8005984 <smtc_hal_mcu_uart_init+0xac>
    {
        return SMTC_HAL_MCU_STATUS_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	e028      	b.n	80059d6 <smtc_hal_mcu_uart_init+0xfe>
    }

    LL_USART_ConfigAsyncMode( uart_cfg_slot->usart );
 8005984:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	4618      	mov	r0, r3
 800598a:	f7ff feb0 	bl	80056ee <LL_USART_ConfigAsyncMode>

    LL_USART_Enable( uart_cfg_slot->usart );
 800598e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	4618      	mov	r0, r3
 8005994:	f7ff fe88 	bl	80056a8 <LL_USART_Enable>
    while( LL_USART_IsEnabled( uart_cfg_slot->usart ) == 0 )
 8005998:	bf00      	nop
 800599a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	4618      	mov	r0, r3
 80059a0:	f7ff fe92 	bl	80056c8 <LL_USART_IsEnabled>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d0f7      	beq.n	800599a <smtc_hal_mcu_uart_init+0xc2>
    {
    }

    LL_USART_RequestRxDataFlush( uart_cfg_slot->usart );
 80059aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	4618      	mov	r0, r3
 80059b0:	f7ff ff3e 	bl	8005830 <LL_USART_RequestRxDataFlush>
    LL_USART_RequestTxDataFlush( uart_cfg_slot->usart );
 80059b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	4618      	mov	r0, r3
 80059ba:	f7ff ff4b 	bl	8005854 <LL_USART_RequestTxDataFlush>

    LL_USART_EnableIT_RXNE( uart_cfg_slot->usart );
 80059be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	4618      	mov	r0, r3
 80059c4:	f7ff fee2 	bl	800578c <LL_USART_EnableIT_RXNE>

    uart_cfg_slot->is_cfged = true;
 80059c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059ca:	2201      	movs	r2, #1
 80059cc:	701a      	strb	r2, [r3, #0]

    *inst = uart_cfg_slot;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80059d2:	601a      	str	r2, [r3, #0]

    return SMTC_HAL_MCU_STATUS_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3748      	adds	r7, #72	; 0x48
 80059da:	46bd      	mov	sp, r7
 80059dc:	bdb0      	pop	{r4, r5, r7, pc}
 80059de:	bf00      	nop
 80059e0:	40004400 	.word	0x40004400
 80059e4:	0800bf38 	.word	0x0800bf38

080059e8 <smtc_hal_mcu_uart_send>:
    return SMTC_HAL_MCU_STATUS_OK;
}

smtc_hal_mcu_status_t smtc_hal_mcu_uart_send( smtc_hal_mcu_uart_inst_t inst, const uint8_t* buffer,
                                              unsigned int length )
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b086      	sub	sp, #24
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	60b9      	str	r1, [r7, #8]
 80059f2:	607a      	str	r2, [r7, #4]
    unsigned int data_remaining = length;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	617b      	str	r3, [r7, #20]

    if( length == 0 )
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d117      	bne.n	8005a2e <smtc_hal_mcu_uart_send+0x46>
    {
        return SMTC_HAL_MCU_STATUS_OK;
 80059fe:	2300      	movs	r3, #0
 8005a00:	e022      	b.n	8005a48 <smtc_hal_mcu_uart_send+0x60>
    }

    while( data_remaining > 0 )
    {
        while( !LL_USART_IsActiveFlag_TXE( inst->usart ) )
 8005a02:	bf00      	nop
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f7ff feac 	bl	8005766 <LL_USART_IsActiveFlag_TXE>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d0f7      	beq.n	8005a04 <smtc_hal_mcu_uart_send+0x1c>
        {
        }

        LL_USART_TransmitData8( inst->usart, buffer[length - data_remaining--] );
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	6858      	ldr	r0, [r3, #4]
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	1e5a      	subs	r2, r3, #1
 8005a1c:	617a      	str	r2, [r7, #20]
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	1ad3      	subs	r3, r2, r3
 8005a22:	68ba      	ldr	r2, [r7, #8]
 8005a24:	4413      	add	r3, r2
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	4619      	mov	r1, r3
 8005a2a:	f7ff fef1 	bl	8005810 <LL_USART_TransmitData8>
    while( data_remaining > 0 )
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d1e6      	bne.n	8005a02 <smtc_hal_mcu_uart_send+0x1a>
    }

    while( !LL_USART_IsActiveFlag_TC( inst->usart ) )
 8005a34:	bf00      	nop
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f7ff fe80 	bl	8005740 <LL_USART_IsActiveFlag_TC>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d0f7      	beq.n	8005a36 <smtc_hal_mcu_uart_send+0x4e>
    {
    }

    return SMTC_HAL_MCU_STATUS_OK;
 8005a46:	2300      	movs	r3, #0
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3718      	adds	r7, #24
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <smtc_hal_mcu_uart_stm32l4_get_free_slot>:
 * -----------------------------------------------------------------------------
 * --- PRIVATE FUNCTIONS DEFINITION --------------------------------------------
 */

static struct smtc_hal_mcu_uart_inst_s* smtc_hal_mcu_uart_stm32l4_get_free_slot( void )
{
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
    for( int i = 0; i < SMTC_HAL_MCU_UART_STM32L4_N_INSTANCES_MAX; i++ )
 8005a56:	2300      	movs	r3, #0
 8005a58:	607b      	str	r3, [r7, #4]
 8005a5a:	e017      	b.n	8005a8c <smtc_hal_mcu_uart_stm32l4_get_free_slot+0x3c>
    {
        if( uart_inst_array[i].is_cfged == false )
 8005a5c:	4910      	ldr	r1, [pc, #64]	; (8005aa0 <smtc_hal_mcu_uart_stm32l4_get_free_slot+0x50>)
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	4613      	mov	r3, r2
 8005a62:	005b      	lsls	r3, r3, #1
 8005a64:	4413      	add	r3, r2
 8005a66:	009b      	lsls	r3, r3, #2
 8005a68:	440b      	add	r3, r1
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	f083 0301 	eor.w	r3, r3, #1
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d007      	beq.n	8005a86 <smtc_hal_mcu_uart_stm32l4_get_free_slot+0x36>
        {
            return &uart_inst_array[i];
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	4613      	mov	r3, r2
 8005a7a:	005b      	lsls	r3, r3, #1
 8005a7c:	4413      	add	r3, r2
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	4a07      	ldr	r2, [pc, #28]	; (8005aa0 <smtc_hal_mcu_uart_stm32l4_get_free_slot+0x50>)
 8005a82:	4413      	add	r3, r2
 8005a84:	e006      	b.n	8005a94 <smtc_hal_mcu_uart_stm32l4_get_free_slot+0x44>
    for( int i = 0; i < SMTC_HAL_MCU_UART_STM32L4_N_INSTANCES_MAX; i++ )
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	3301      	adds	r3, #1
 8005a8a:	607b      	str	r3, [r7, #4]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	dde4      	ble.n	8005a5c <smtc_hal_mcu_uart_stm32l4_get_free_slot+0xc>
        }
    }

    return NULL;
 8005a92:	2300      	movs	r3, #0
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	370c      	adds	r7, #12
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr
 8005aa0:	20000a3c 	.word	0x20000a3c

08005aa4 <USART2_IRQHandler>:

    return false;
}

void USART2_IRQHandler( void )
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b082      	sub	sp, #8
 8005aa8:	af00      	add	r7, sp, #0
    /* Check RXNE flag value in ISR register */
    if( LL_USART_IsActiveFlag_RXNE( USART2 ) && LL_USART_IsEnabledIT_RXNE( USART2 ) )
 8005aaa:	4822      	ldr	r0, [pc, #136]	; (8005b34 <USART2_IRQHandler+0x90>)
 8005aac:	f7ff fe35 	bl	800571a <LL_USART_IsActiveFlag_RXNE>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d039      	beq.n	8005b2a <USART2_IRQHandler+0x86>
 8005ab6:	481f      	ldr	r0, [pc, #124]	; (8005b34 <USART2_IRQHandler+0x90>)
 8005ab8:	f7ff fe89 	bl	80057ce <LL_USART_IsEnabledIT_RXNE>
 8005abc:	4603      	mov	r3, r0
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d033      	beq.n	8005b2a <USART2_IRQHandler+0x86>
    {
        /* RXNE flag will be cleared by reading of RDR register (done in call) */
        const uint8_t data = LL_USART_ReceiveData8( USART2 );
 8005ac2:	481c      	ldr	r0, [pc, #112]	; (8005b34 <USART2_IRQHandler+0x90>)
 8005ac4:	f7ff fe96 	bl	80057f4 <LL_USART_ReceiveData8>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	70fb      	strb	r3, [r7, #3]

        for( int i = 0; i < SMTC_HAL_MCU_UART_STM32L4_N_INSTANCES_MAX; i++ )
 8005acc:	2300      	movs	r3, #0
 8005ace:	607b      	str	r3, [r7, #4]
 8005ad0:	e026      	b.n	8005b20 <USART2_IRQHandler+0x7c>
        {
            if( uart_inst_array[i].usart == USART2 )
 8005ad2:	4919      	ldr	r1, [pc, #100]	; (8005b38 <USART2_IRQHandler+0x94>)
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	4613      	mov	r3, r2
 8005ad8:	005b      	lsls	r3, r3, #1
 8005ada:	4413      	add	r3, r2
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	440b      	add	r3, r1
 8005ae0:	3304      	adds	r3, #4
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a13      	ldr	r2, [pc, #76]	; (8005b34 <USART2_IRQHandler+0x90>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d117      	bne.n	8005b1a <USART2_IRQHandler+0x76>
            {
                if( uart_inst_array[i].callback_rx != NULL )
 8005aea:	4913      	ldr	r1, [pc, #76]	; (8005b38 <USART2_IRQHandler+0x94>)
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	4613      	mov	r3, r2
 8005af0:	005b      	lsls	r3, r3, #1
 8005af2:	4413      	add	r3, r2
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	440b      	add	r3, r1
 8005af8:	3308      	adds	r3, #8
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d013      	beq.n	8005b28 <USART2_IRQHandler+0x84>
                {
                    uart_inst_array[i].callback_rx( data );
 8005b00:	490d      	ldr	r1, [pc, #52]	; (8005b38 <USART2_IRQHandler+0x94>)
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	4613      	mov	r3, r2
 8005b06:	005b      	lsls	r3, r3, #1
 8005b08:	4413      	add	r3, r2
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	440b      	add	r3, r1
 8005b0e:	3308      	adds	r3, #8
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	78fa      	ldrb	r2, [r7, #3]
 8005b14:	4610      	mov	r0, r2
 8005b16:	4798      	blx	r3
                }

                break;
 8005b18:	e006      	b.n	8005b28 <USART2_IRQHandler+0x84>
        for( int i = 0; i < SMTC_HAL_MCU_UART_STM32L4_N_INSTANCES_MAX; i++ )
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	3301      	adds	r3, #1
 8005b1e:	607b      	str	r3, [r7, #4]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	ddd5      	ble.n	8005ad2 <USART2_IRQHandler+0x2e>
            }
        }
    }
}
 8005b26:	e000      	b.n	8005b2a <USART2_IRQHandler+0x86>
                break;
 8005b28:	bf00      	nop
}
 8005b2a:	bf00      	nop
 8005b2c:	3708      	adds	r7, #8
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	bf00      	nop
 8005b34:	40004400 	.word	0x40004400
 8005b38:	20000a3c 	.word	0x20000a3c

08005b3c <smtc_shield_lr1121mb1dis_get_pa_pwr_cfg>:
 * --- PUBLIC FUNCTIONS DEFINITION ---------------------------------------------
 */

const smtc_shield_lr11xx_pa_pwr_cfg_t* smtc_shield_lr1121mb1dis_get_pa_pwr_cfg( const uint32_t rf_freq_in_hz,
                                                                                int8_t expected_output_pwr_in_dbm )
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	460b      	mov	r3, r1
 8005b46:	70fb      	strb	r3, [r7, #3]
    if( ( SMTC_SHIELD_LR11XX_SUBGHZ_FREQ_MIN <= rf_freq_in_hz ) &&
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4a22      	ldr	r2, [pc, #136]	; (8005bd4 <smtc_shield_lr1121mb1dis_get_pa_pwr_cfg+0x98>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d916      	bls.n	8005b7e <smtc_shield_lr1121mb1dis_get_pa_pwr_cfg+0x42>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4a21      	ldr	r2, [pc, #132]	; (8005bd8 <smtc_shield_lr1121mb1dis_get_pa_pwr_cfg+0x9c>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d812      	bhi.n	8005b7e <smtc_shield_lr1121mb1dis_get_pa_pwr_cfg+0x42>
        ( rf_freq_in_hz <= SMTC_SHIELD_LR11XX_SUBGHZ_FREQ_MAX ) )
    {
        if( ( SMTC_SHIELD_LR11XX_MIN_PWR <= expected_output_pwr_in_dbm ) &&
 8005b58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b5c:	f113 0f11 	cmn.w	r3, #17
 8005b60:	db30      	blt.n	8005bc4 <smtc_shield_lr1121mb1dis_get_pa_pwr_cfg+0x88>
 8005b62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b66:	2b16      	cmp	r3, #22
 8005b68:	dc2c      	bgt.n	8005bc4 <smtc_shield_lr1121mb1dis_get_pa_pwr_cfg+0x88>
            ( expected_output_pwr_in_dbm <= SMTC_SHIELD_LR11XX_MAX_PWR ) )
        {
            return &(
                smtc_shield_lr1121mb1dis_pa_pwr_cfg_table[expected_output_pwr_in_dbm - SMTC_SHIELD_LR11XX_MIN_PWR] );
 8005b6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b6e:	f103 0211 	add.w	r2, r3, #17
            return &(
 8005b72:	4613      	mov	r3, r2
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	4413      	add	r3, r2
 8005b78:	4a18      	ldr	r2, [pc, #96]	; (8005bdc <smtc_shield_lr1121mb1dis_get_pa_pwr_cfg+0xa0>)
 8005b7a:	4413      	add	r3, r2
 8005b7c:	e024      	b.n	8005bc8 <smtc_shield_lr1121mb1dis_get_pa_pwr_cfg+0x8c>
        }
    }
    else if( ( ( SMTC_SHIELD_LR112X_2GHZ_FREQ_MIN <= rf_freq_in_hz ) &&
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4a17      	ldr	r2, [pc, #92]	; (8005be0 <smtc_shield_lr1121mb1dis_get_pa_pwr_cfg+0xa4>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d903      	bls.n	8005b8e <smtc_shield_lr1121mb1dis_get_pa_pwr_cfg+0x52>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a16      	ldr	r2, [pc, #88]	; (8005be4 <smtc_shield_lr1121mb1dis_get_pa_pwr_cfg+0xa8>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d907      	bls.n	8005b9e <smtc_shield_lr1121mb1dis_get_pa_pwr_cfg+0x62>
               ( rf_freq_in_hz <= SMTC_SHIELD_LR112X_2GHZ_FREQ_MAX ) ) ||
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4a15      	ldr	r2, [pc, #84]	; (8005be8 <smtc_shield_lr1121mb1dis_get_pa_pwr_cfg+0xac>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d917      	bls.n	8005bc6 <smtc_shield_lr1121mb1dis_get_pa_pwr_cfg+0x8a>
             ( ( SMTC_SHIELD_LR112X_2_4GHZ_FREQ_MIN <= rf_freq_in_hz ) &&
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a14      	ldr	r2, [pc, #80]	; (8005bec <smtc_shield_lr1121mb1dis_get_pa_pwr_cfg+0xb0>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d813      	bhi.n	8005bc6 <smtc_shield_lr1121mb1dis_get_pa_pwr_cfg+0x8a>
               ( rf_freq_in_hz <= SMTC_SHIELD_LR112X_2_4GHZ_FREQ_MAX ) ) )
    {
        if( ( SMTC_SHIELD_LR112X_MIN_PWR_HF <= expected_output_pwr_in_dbm ) &&
 8005b9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005ba2:	f113 0f12 	cmn.w	r3, #18
 8005ba6:	db0e      	blt.n	8005bc6 <smtc_shield_lr1121mb1dis_get_pa_pwr_cfg+0x8a>
 8005ba8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005bac:	2b0d      	cmp	r3, #13
 8005bae:	dc0a      	bgt.n	8005bc6 <smtc_shield_lr1121mb1dis_get_pa_pwr_cfg+0x8a>
            ( expected_output_pwr_in_dbm <= SMTC_SHIELD_LR112X_MAX_PWR_HF ) )
        {
            return &( smtc_shield_lr1121mb1dis_pa_pwr_hf_cfg_table[expected_output_pwr_in_dbm -
 8005bb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005bb4:	f103 0212 	add.w	r2, r3, #18
 8005bb8:	4613      	mov	r3, r2
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	4413      	add	r3, r2
 8005bbe:	4a0c      	ldr	r2, [pc, #48]	; (8005bf0 <smtc_shield_lr1121mb1dis_get_pa_pwr_cfg+0xb4>)
 8005bc0:	4413      	add	r3, r2
 8005bc2:	e001      	b.n	8005bc8 <smtc_shield_lr1121mb1dis_get_pa_pwr_cfg+0x8c>
        if( ( SMTC_SHIELD_LR11XX_MIN_PWR <= expected_output_pwr_in_dbm ) &&
 8005bc4:	bf00      	nop
                                                                   SMTC_SHIELD_LR112X_MIN_PWR_HF] );
        }
    }

    return NULL;
 8005bc6:	2300      	movs	r3, #0
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	370c      	adds	r7, #12
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr
 8005bd4:	08f0d17f 	.word	0x08f0d17f
 8005bd8:	39387000 	.word	0x39387000
 8005bdc:	0800d8e0 	.word	0x0800d8e0
 8005be0:	773593ff 	.word	0x773593ff
 8005be4:	7d2b7500 	.word	0x7d2b7500
 8005be8:	8f0d17ff 	.word	0x8f0d17ff
 8005bec:	9502f900 	.word	0x9502f900
 8005bf0:	0800d9a8 	.word	0x0800d9a8

08005bf4 <smtc_shield_lr1121mb1dis_get_rssi_calibration_table>:

const lr11xx_radio_rssi_calibration_table_t* smtc_shield_lr1121mb1dis_get_rssi_calibration_table(
    const uint32_t rf_freq_in_hz )
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b082      	sub	sp, #8
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
    return smtc_shield_lr11xx_get_rssi_calibration_table( rf_freq_in_hz );
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f000 f843 	bl	8005c88 <smtc_shield_lr11xx_get_rssi_calibration_table>
 8005c02:	4603      	mov	r3, r0
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3708      	adds	r7, #8
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}

08005c0c <smtc_shield_lr1121mb1dis_get_rf_switch_cfg>:

const lr11xx_system_rfswitch_cfg_t* smtc_shield_lr1121mb1dis_get_rf_switch_cfg( void )
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	af00      	add	r7, sp, #0
    return smtc_shield_lr11xx_common_get_rf_switch_cfg( );
 8005c10:	f000 f860 	bl	8005cd4 <smtc_shield_lr11xx_common_get_rf_switch_cfg>
 8005c14:	4603      	mov	r3, r0
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	bd80      	pop	{r7, pc}

08005c1a <smtc_shield_lr1121mb1dis_get_reg_mode>:

lr11xx_system_reg_mode_t smtc_shield_lr1121mb1dis_get_reg_mode( void )
{
 8005c1a:	b580      	push	{r7, lr}
 8005c1c:	af00      	add	r7, sp, #0
    return smtc_shield_lr11xx_common_get_reg_mode( );
 8005c1e:	f000 f863 	bl	8005ce8 <smtc_shield_lr11xx_common_get_reg_mode>
 8005c22:	4603      	mov	r3, r0
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <smtc_shield_lr1121mb1dis_get_xosc_cfg>:

const smtc_shield_lr11xx_xosc_cfg_t* smtc_shield_lr1121mb1dis_get_xosc_cfg( void )
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	af00      	add	r7, sp, #0
    return smtc_shield_lr11x1_common_get_xosc_cfg( );
 8005c2c:	f000 f812 	bl	8005c54 <smtc_shield_lr11x1_common_get_xosc_cfg>
 8005c30:	4603      	mov	r3, r0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	bd80      	pop	{r7, pc}

08005c36 <smtc_shield_lr1121mb1dis_get_lfclk_cfg>:

const smtc_shield_lr11xx_lfclk_cfg_t* smtc_shield_lr1121mb1dis_get_lfclk_cfg( void )
{
 8005c36:	b580      	push	{r7, lr}
 8005c38:	af00      	add	r7, sp, #0
    return smtc_shield_lr11xx_common_get_lfclk_cfg( );
 8005c3a:	f000 f85d 	bl	8005cf8 <smtc_shield_lr11xx_common_get_lfclk_cfg>
 8005c3e:	4603      	mov	r3, r0
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <smtc_shield_lr1121mb1dis_get_pinout>:

const smtc_shield_lr11xx_pinout_t* smtc_shield_lr1121mb1dis_get_pinout( void )
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	af00      	add	r7, sp, #0
    return smtc_shield_lr11xx_common_get_pinout( );
 8005c48:	f000 f860 	bl	8005d0c <smtc_shield_lr11xx_common_get_pinout>
 8005c4c:	4603      	mov	r3, r0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	bd80      	pop	{r7, pc}
	...

08005c54 <smtc_shield_lr11x1_common_get_xosc_cfg>:
 * -----------------------------------------------------------------------------
 * --- PUBLIC FUNCTIONS DEFINITION ---------------------------------------------
 */

const smtc_shield_lr11xx_xosc_cfg_t* smtc_shield_lr11x1_common_get_xosc_cfg( void )
{
 8005c54:	b480      	push	{r7}
 8005c56:	af00      	add	r7, sp, #0
    return &smtc_shield_lr11x1_common_xosc_cfg;
 8005c58:	4b02      	ldr	r3, [pc, #8]	; (8005c64 <smtc_shield_lr11x1_common_get_xosc_cfg+0x10>)
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr
 8005c64:	0800da48 	.word	0x0800da48

08005c68 <smtc_shield_lr11x1_common_rttof_recommended_rx_tx_delay_indicator>:

bool smtc_shield_lr11x1_common_rttof_recommended_rx_tx_delay_indicator( lr11xx_radio_lora_bw_t bw,
                                                                        lr11xx_radio_lora_sf_t sf,
                                                                        uint32_t*              delay_indicator )
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b083      	sub	sp, #12
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	4603      	mov	r3, r0
 8005c70:	603a      	str	r2, [r7, #0]
 8005c72:	71fb      	strb	r3, [r7, #7]
 8005c74:	460b      	mov	r3, r1
 8005c76:	71bb      	strb	r3, [r7, #6]
    return false;
 8005c78:	2300      	movs	r3, #0
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	370c      	adds	r7, #12
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr
	...

08005c88 <smtc_shield_lr11xx_get_rssi_calibration_table>:
 * --- PUBLIC FUNCTIONS DEFINITION ---------------------------------------------
 */

const lr11xx_radio_rssi_calibration_table_t* smtc_shield_lr11xx_get_rssi_calibration_table(
    const uint32_t rf_freq_in_hz )
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
    if( rf_freq_in_hz < 600000000 )
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	4a0b      	ldr	r2, [pc, #44]	; (8005cc0 <smtc_shield_lr11xx_get_rssi_calibration_table+0x38>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d801      	bhi.n	8005c9c <smtc_shield_lr11xx_get_rssi_calibration_table+0x14>
    {
        return &smtc_shield_lr11xx_common_rssi_calibration_table_below_600mhz;
 8005c98:	4b0a      	ldr	r3, [pc, #40]	; (8005cc4 <smtc_shield_lr11xx_get_rssi_calibration_table+0x3c>)
 8005c9a:	e00a      	b.n	8005cb2 <smtc_shield_lr11xx_get_rssi_calibration_table+0x2a>
    }
    else if( ( 600000000 <= rf_freq_in_hz ) && ( rf_freq_in_hz <= 2000000000 ) )
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	4a08      	ldr	r2, [pc, #32]	; (8005cc0 <smtc_shield_lr11xx_get_rssi_calibration_table+0x38>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d905      	bls.n	8005cb0 <smtc_shield_lr11xx_get_rssi_calibration_table+0x28>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	4a08      	ldr	r2, [pc, #32]	; (8005cc8 <smtc_shield_lr11xx_get_rssi_calibration_table+0x40>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d801      	bhi.n	8005cb0 <smtc_shield_lr11xx_get_rssi_calibration_table+0x28>
    {
        return &smtc_shield_lr11xx_common_rssi_calibration_table_from_600mhz_to_2ghz;
 8005cac:	4b07      	ldr	r3, [pc, #28]	; (8005ccc <smtc_shield_lr11xx_get_rssi_calibration_table+0x44>)
 8005cae:	e000      	b.n	8005cb2 <smtc_shield_lr11xx_get_rssi_calibration_table+0x2a>
    }
    else
    {
        return &smtc_shield_lr11xx_common_rssi_calibration_table_above_2ghz;
 8005cb0:	4b07      	ldr	r3, [pc, #28]	; (8005cd0 <smtc_shield_lr11xx_get_rssi_calibration_table+0x48>)
    }
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	370c      	adds	r7, #12
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr
 8005cbe:	bf00      	nop
 8005cc0:	23c345ff 	.word	0x23c345ff
 8005cc4:	0800da50 	.word	0x0800da50
 8005cc8:	77359400 	.word	0x77359400
 8005ccc:	0800da64 	.word	0x0800da64
 8005cd0:	0800da78 	.word	0x0800da78

08005cd4 <smtc_shield_lr11xx_common_get_rf_switch_cfg>:

const lr11xx_system_rfswitch_cfg_t* smtc_shield_lr11xx_common_get_rf_switch_cfg( void )
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	af00      	add	r7, sp, #0
    return &smtc_shield_lr11xx_common_rf_switch_cfg;
 8005cd8:	4b02      	ldr	r3, [pc, #8]	; (8005ce4 <smtc_shield_lr11xx_common_get_rf_switch_cfg+0x10>)
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr
 8005ce4:	0800da8c 	.word	0x0800da8c

08005ce8 <smtc_shield_lr11xx_common_get_reg_mode>:

lr11xx_system_reg_mode_t smtc_shield_lr11xx_common_get_reg_mode( void )
{
 8005ce8:	b480      	push	{r7}
 8005cea:	af00      	add	r7, sp, #0
    return LR11XX_SYSTEM_REG_MODE_DCDC;
 8005cec:	2301      	movs	r3, #1
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr

08005cf8 <smtc_shield_lr11xx_common_get_lfclk_cfg>:

const smtc_shield_lr11xx_lfclk_cfg_t* smtc_shield_lr11xx_common_get_lfclk_cfg( void )
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	af00      	add	r7, sp, #0
    return &smtc_shield_lr11xx_common_lfclk_cfg;
 8005cfc:	4b02      	ldr	r3, [pc, #8]	; (8005d08 <smtc_shield_lr11xx_common_get_lfclk_cfg+0x10>)
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr
 8005d08:	0800da94 	.word	0x0800da94

08005d0c <smtc_shield_lr11xx_common_get_pinout>:

const smtc_shield_lr11xx_pinout_t* smtc_shield_lr11xx_common_get_pinout( void )
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	af00      	add	r7, sp, #0
    return &smtc_shield_lr11xx_common_pinout;
 8005d10:	4b02      	ldr	r3, [pc, #8]	; (8005d1c <smtc_shield_lr11xx_common_get_pinout+0x10>)
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr
 8005d1c:	0800da98 	.word	0x0800da98

08005d20 <LL_AHB2_GRP1_EnableClock>:
{
 8005d20:	b480      	push	{r7}
 8005d22:	b085      	sub	sp, #20
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8005d28:	4b08      	ldr	r3, [pc, #32]	; (8005d4c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8005d2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d2c:	4907      	ldr	r1, [pc, #28]	; (8005d4c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8005d34:	4b05      	ldr	r3, [pc, #20]	; (8005d4c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8005d36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	4013      	ands	r3, r2
 8005d3c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
}
 8005d40:	bf00      	nop
 8005d42:	3714      	adds	r7, #20
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr
 8005d4c:	40021000 	.word	0x40021000

08005d50 <LL_SYSCFG_SetEXTISource>:
{
 8005d50:	b480      	push	{r7}
 8005d52:	b087      	sub	sp, #28
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8005d5a:	4a17      	ldr	r2, [pc, #92]	; (8005db8 <LL_SYSCFG_SetEXTISource+0x68>)
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	3302      	adds	r3, #2
 8005d62:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	0c1b      	lsrs	r3, r3, #16
 8005d6a:	43db      	mvns	r3, r3
 8005d6c:	ea02 0103 	and.w	r1, r2, r3
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	0c1b      	lsrs	r3, r3, #16
 8005d74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	fa93 f3a3 	rbit	r3, r3
 8005d7c:	60fb      	str	r3, [r7, #12]
  return result;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d101      	bne.n	8005d8c <LL_SYSCFG_SetEXTISource+0x3c>
    return 32U;
 8005d88:	2320      	movs	r3, #32
 8005d8a:	e003      	b.n	8005d94 <LL_SYSCFG_SetEXTISource+0x44>
  return __builtin_clz(value);
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	fab3 f383 	clz	r3, r3
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	461a      	mov	r2, r3
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	fa03 f202 	lsl.w	r2, r3, r2
 8005d9c:	4806      	ldr	r0, [pc, #24]	; (8005db8 <LL_SYSCFG_SetEXTISource+0x68>)
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	430a      	orrs	r2, r1
 8005da4:	3302      	adds	r3, #2
 8005da6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8005daa:	bf00      	nop
 8005dac:	371c      	adds	r7, #28
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr
 8005db6:	bf00      	nop
 8005db8:	40010000 	.word	0x40010000

08005dbc <LL_GPIO_SetPinMode>:
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b08b      	sub	sp, #44	; 0x2c
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	fa93 f3a3 	rbit	r3, r3
 8005dd6:	613b      	str	r3, [r7, #16]
  return result;
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005ddc:	69bb      	ldr	r3, [r7, #24]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d101      	bne.n	8005de6 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8005de2:	2320      	movs	r3, #32
 8005de4:	e003      	b.n	8005dee <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8005de6:	69bb      	ldr	r3, [r7, #24]
 8005de8:	fab3 f383 	clz	r3, r3
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	005b      	lsls	r3, r3, #1
 8005df0:	2103      	movs	r1, #3
 8005df2:	fa01 f303 	lsl.w	r3, r1, r3
 8005df6:	43db      	mvns	r3, r3
 8005df8:	401a      	ands	r2, r3
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dfe:	6a3b      	ldr	r3, [r7, #32]
 8005e00:	fa93 f3a3 	rbit	r3, r3
 8005e04:	61fb      	str	r3, [r7, #28]
  return result;
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d101      	bne.n	8005e14 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8005e10:	2320      	movs	r3, #32
 8005e12:	e003      	b.n	8005e1c <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8005e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e16:	fab3 f383 	clz	r3, r3
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	005b      	lsls	r3, r3, #1
 8005e1e:	6879      	ldr	r1, [r7, #4]
 8005e20:	fa01 f303 	lsl.w	r3, r1, r3
 8005e24:	431a      	orrs	r2, r3
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	601a      	str	r2, [r3, #0]
}
 8005e2a:	bf00      	nop
 8005e2c:	372c      	adds	r7, #44	; 0x2c
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr

08005e36 <LL_GPIO_SetPinPull>:
{
 8005e36:	b480      	push	{r7}
 8005e38:	b08b      	sub	sp, #44	; 0x2c
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	60f8      	str	r0, [r7, #12]
 8005e3e:	60b9      	str	r1, [r7, #8]
 8005e40:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	68da      	ldr	r2, [r3, #12]
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	fa93 f3a3 	rbit	r3, r3
 8005e50:	613b      	str	r3, [r7, #16]
  return result;
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005e56:	69bb      	ldr	r3, [r7, #24]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d101      	bne.n	8005e60 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8005e5c:	2320      	movs	r3, #32
 8005e5e:	e003      	b.n	8005e68 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8005e60:	69bb      	ldr	r3, [r7, #24]
 8005e62:	fab3 f383 	clz	r3, r3
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	005b      	lsls	r3, r3, #1
 8005e6a:	2103      	movs	r1, #3
 8005e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8005e70:	43db      	mvns	r3, r3
 8005e72:	401a      	ands	r2, r3
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e78:	6a3b      	ldr	r3, [r7, #32]
 8005e7a:	fa93 f3a3 	rbit	r3, r3
 8005e7e:	61fb      	str	r3, [r7, #28]
  return result;
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d101      	bne.n	8005e8e <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8005e8a:	2320      	movs	r3, #32
 8005e8c:	e003      	b.n	8005e96 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8005e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e90:	fab3 f383 	clz	r3, r3
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	005b      	lsls	r3, r3, #1
 8005e98:	6879      	ldr	r1, [r7, #4]
 8005e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8005e9e:	431a      	orrs	r2, r3
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	60da      	str	r2, [r3, #12]
}
 8005ea4:	bf00      	nop
 8005ea6:	372c      	adds	r7, #44	; 0x2c
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <LL_GPIO_ResetOutputPin>:
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	683a      	ldr	r2, [r7, #0]
 8005ebe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005ec0:	bf00      	nop
 8005ec2:	370c      	adds	r7, #12
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <platform_write>:
 * @param  len       number of consecutive register to write
 *
 */
int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp,
                              uint16_t len)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b088      	sub	sp, #32
 8005ed0:	af04      	add	r7, sp, #16
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	607a      	str	r2, [r7, #4]
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	460b      	mov	r3, r1
 8005eda:	72fb      	strb	r3, [r7, #11]
 8005edc:	4613      	mov	r3, r2
 8005ede:	813b      	strh	r3, [r7, #8]
  /* Write multiple command */
  reg |= 0x80;
 8005ee0:	7afb      	ldrb	r3, [r7, #11]
 8005ee2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005ee6:	72fb      	strb	r3, [r7, #11]
  HAL_I2C_Mem_Write(handle, LIS2DE12_I2C_ADD, reg,
 8005ee8:	7afb      	ldrb	r3, [r7, #11]
 8005eea:	b29a      	uxth	r2, r3
 8005eec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005ef0:	9302      	str	r3, [sp, #8]
 8005ef2:	893b      	ldrh	r3, [r7, #8]
 8005ef4:	9301      	str	r3, [sp, #4]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	9300      	str	r3, [sp, #0]
 8005efa:	2301      	movs	r3, #1
 8005efc:	2133      	movs	r1, #51	; 0x33
 8005efe:	68f8      	ldr	r0, [r7, #12]
 8005f00:	f7fb fa62 	bl	80013c8 <HAL_I2C_Mem_Write>
                    I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
  return 0;
 8005f04:	2300      	movs	r3, #0
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3710      	adds	r7, #16
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}

08005f0e <platform_read>:
 * @param  len       number of consecutive register to read
 *
 */
int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8005f0e:	b580      	push	{r7, lr}
 8005f10:	b088      	sub	sp, #32
 8005f12:	af04      	add	r7, sp, #16
 8005f14:	60f8      	str	r0, [r7, #12]
 8005f16:	607a      	str	r2, [r7, #4]
 8005f18:	461a      	mov	r2, r3
 8005f1a:	460b      	mov	r3, r1
 8005f1c:	72fb      	strb	r3, [r7, #11]
 8005f1e:	4613      	mov	r3, r2
 8005f20:	813b      	strh	r3, [r7, #8]
  /* Read multiple command */
  reg |= 0x80;
 8005f22:	7afb      	ldrb	r3, [r7, #11]
 8005f24:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005f28:	72fb      	strb	r3, [r7, #11]
  HAL_I2C_Mem_Read(handle, LIS2DE12_I2C_ADD, reg,
 8005f2a:	7afb      	ldrb	r3, [r7, #11]
 8005f2c:	b29a      	uxth	r2, r3
 8005f2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005f32:	9302      	str	r3, [sp, #8]
 8005f34:	893b      	ldrh	r3, [r7, #8]
 8005f36:	9301      	str	r3, [sp, #4]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	9300      	str	r3, [sp, #0]
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	2133      	movs	r1, #51	; 0x33
 8005f40:	68f8      	ldr	r0, [r7, #12]
 8005f42:	f7fb fb55 	bl	80015f0 <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  return 0;
 8005f46:	2300      	movs	r3, #0
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3710      	adds	r7, #16
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <platform_delay>:
 *
 * @param  ms        delay in ms
 *
 */
void platform_delay(uint32_t ms)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b082      	sub	sp, #8
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
	LL_mDelay(ms);
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f7fd fa39 	bl	80033d0 <LL_mDelay>
}
 8005f5e:	bf00      	nop
 8005f60:	3708      	adds	r7, #8
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
	...

08005f68 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005f6c:	4b1b      	ldr	r3, [pc, #108]	; (8005fdc <MX_I2C1_Init+0x74>)
 8005f6e:	4a1c      	ldr	r2, [pc, #112]	; (8005fe0 <MX_I2C1_Init+0x78>)
 8005f70:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 8005f72:	4b1a      	ldr	r3, [pc, #104]	; (8005fdc <MX_I2C1_Init+0x74>)
 8005f74:	4a1b      	ldr	r2, [pc, #108]	; (8005fe4 <MX_I2C1_Init+0x7c>)
 8005f76:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8005f78:	4b18      	ldr	r3, [pc, #96]	; (8005fdc <MX_I2C1_Init+0x74>)
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005f7e:	4b17      	ldr	r3, [pc, #92]	; (8005fdc <MX_I2C1_Init+0x74>)
 8005f80:	2201      	movs	r2, #1
 8005f82:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005f84:	4b15      	ldr	r3, [pc, #84]	; (8005fdc <MX_I2C1_Init+0x74>)
 8005f86:	2200      	movs	r2, #0
 8005f88:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8005f8a:	4b14      	ldr	r3, [pc, #80]	; (8005fdc <MX_I2C1_Init+0x74>)
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005f90:	4b12      	ldr	r3, [pc, #72]	; (8005fdc <MX_I2C1_Init+0x74>)
 8005f92:	2200      	movs	r2, #0
 8005f94:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005f96:	4b11      	ldr	r3, [pc, #68]	; (8005fdc <MX_I2C1_Init+0x74>)
 8005f98:	2200      	movs	r2, #0
 8005f9a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005f9c:	4b0f      	ldr	r3, [pc, #60]	; (8005fdc <MX_I2C1_Init+0x74>)
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005fa2:	480e      	ldr	r0, [pc, #56]	; (8005fdc <MX_I2C1_Init+0x74>)
 8005fa4:	f7fb f974 	bl	8001290 <HAL_I2C_Init>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d001      	beq.n	8005fb2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8005fae:	f7fa fe0d 	bl	8000bcc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005fb2:	2100      	movs	r1, #0
 8005fb4:	4809      	ldr	r0, [pc, #36]	; (8005fdc <MX_I2C1_Init+0x74>)
 8005fb6:	f7fb feed 	bl	8001d94 <HAL_I2CEx_ConfigAnalogFilter>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d001      	beq.n	8005fc4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8005fc0:	f7fa fe04 	bl	8000bcc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8005fc4:	2100      	movs	r1, #0
 8005fc6:	4805      	ldr	r0, [pc, #20]	; (8005fdc <MX_I2C1_Init+0x74>)
 8005fc8:	f7fb ff2f 	bl	8001e2a <HAL_I2CEx_ConfigDigitalFilter>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d001      	beq.n	8005fd6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8005fd2:	f7fa fdfb 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005fd6:	bf00      	nop
 8005fd8:	bd80      	pop	{r7, pc}
 8005fda:	bf00      	nop
 8005fdc:	20000a48 	.word	0x20000a48
 8005fe0:	40005400 	.word	0x40005400
 8005fe4:	10d19ce4 	.word	0x10d19ce4

08005fe8 <platform_init>:
/*
 * @brief  platform specific initialization (platform dependent)
 */
void platform_init(void)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	af00      	add	r7, sp, #0
	MX_I2C1_Init();
 8005fec:	f7ff ffbc 	bl	8005f68 <MX_I2C1_Init>
	MX_GPIO_Init();
 8005ff0:	f000 f802 	bl	8005ff8 <MX_GPIO_Init>
}
 8005ff4:	bf00      	nop
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b08a      	sub	sp, #40	; 0x28
 8005ffc:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8005ffe:	f107 031c 	add.w	r3, r7, #28
 8006002:	2200      	movs	r2, #0
 8006004:	601a      	str	r2, [r3, #0]
 8006006:	605a      	str	r2, [r3, #4]
 8006008:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800600a:	1d3b      	adds	r3, r7, #4
 800600c:	2200      	movs	r2, #0
 800600e:	601a      	str	r2, [r3, #0]
 8006010:	605a      	str	r2, [r3, #4]
 8006012:	609a      	str	r2, [r3, #8]
 8006014:	60da      	str	r2, [r3, #12]
 8006016:	611a      	str	r2, [r3, #16]
 8006018:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 800601a:	2004      	movs	r0, #4
 800601c:	f7ff fe80 	bl	8005d20 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOH);
 8006020:	2080      	movs	r0, #128	; 0x80
 8006022:	f7ff fe7d 	bl	8005d20 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8006026:	2001      	movs	r0, #1
 8006028:	f7ff fe7a 	bl	8005d20 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800602c:	2002      	movs	r0, #2
 800602e:	f7ff fe77 	bl	8005d20 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0|LL_GPIO_PIN_1);
 8006032:	2103      	movs	r1, #3
 8006034:	483d      	ldr	r0, [pc, #244]	; (800612c <MX_GPIO_Init+0x134>)
 8006036:	f7ff ff3b 	bl	8005eb0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_0|LL_GPIO_PIN_8);
 800603a:	f240 1101 	movw	r1, #257	; 0x101
 800603e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006042:	f7ff ff35 	bl	8005eb0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_0|LL_GPIO_PIN_4);
 8006046:	2111      	movs	r1, #17
 8006048:	4839      	ldr	r0, [pc, #228]	; (8006130 <MX_GPIO_Init+0x138>)
 800604a:	f7ff ff31 	bl	8005eb0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 800604e:	4939      	ldr	r1, [pc, #228]	; (8006134 <MX_GPIO_Init+0x13c>)
 8006050:	2002      	movs	r0, #2
 8006052:	f7ff fe7d 	bl	8005d50 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8006056:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800605a:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 800605c:	2300      	movs	r3, #0
 800605e:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8006060:	2301      	movs	r3, #1
 8006062:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8006066:	2300      	movs	r3, #0
 8006068:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800606c:	2302      	movs	r3, #2
 800606e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8006072:	f107 031c 	add.w	r3, r7, #28
 8006076:	4618      	mov	r0, r3
 8006078:	f7fc f99c 	bl	80023b4 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 800607c:	2200      	movs	r2, #0
 800607e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006082:	482a      	ldr	r0, [pc, #168]	; (800612c <MX_GPIO_Init+0x134>)
 8006084:	f7ff fed7 	bl	8005e36 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 8006088:	2200      	movs	r2, #0
 800608a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800608e:	4827      	ldr	r0, [pc, #156]	; (800612c <MX_GPIO_Init+0x134>)
 8006090:	f7ff fe94 	bl	8005dbc <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 8006094:	2303      	movs	r3, #3
 8006096:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006098:	2301      	movs	r3, #1
 800609a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800609c:	2300      	movs	r3, #0
 800609e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80060a0:	2300      	movs	r3, #0
 80060a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80060a4:	2300      	movs	r3, #0
 80060a6:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80060a8:	1d3b      	adds	r3, r7, #4
 80060aa:	4619      	mov	r1, r3
 80060ac:	481f      	ldr	r0, [pc, #124]	; (800612c <MX_GPIO_Init+0x134>)
 80060ae:	f7fc fbc0 	bl	8002832 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_8;
 80060b2:	f240 1301 	movw	r3, #257	; 0x101
 80060b6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80060b8:	2301      	movs	r3, #1
 80060ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80060bc:	2300      	movs	r3, #0
 80060be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80060c0:	2300      	movs	r3, #0
 80060c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80060c4:	2300      	movs	r3, #0
 80060c6:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060c8:	1d3b      	adds	r3, r7, #4
 80060ca:	4619      	mov	r1, r3
 80060cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80060d0:	f7fc fbaf 	bl	8002832 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1|LL_GPIO_PIN_4|LL_GPIO_PIN_9;
 80060d4:	f240 2312 	movw	r3, #530	; 0x212
 80060d8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80060da:	2300      	movs	r3, #0
 80060dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80060de:	2300      	movs	r3, #0
 80060e0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060e2:	1d3b      	adds	r3, r7, #4
 80060e4:	4619      	mov	r1, r3
 80060e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80060ea:	f7fc fba2 	bl	8002832 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_4;
 80060ee:	2311      	movs	r3, #17
 80060f0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80060f2:	2301      	movs	r3, #1
 80060f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80060f6:	2300      	movs	r3, #0
 80060f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80060fa:	2300      	movs	r3, #0
 80060fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80060fe:	2300      	movs	r3, #0
 8006100:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006102:	1d3b      	adds	r3, r7, #4
 8006104:	4619      	mov	r1, r3
 8006106:	480a      	ldr	r0, [pc, #40]	; (8006130 <MX_GPIO_Init+0x138>)
 8006108:	f7fc fb93 	bl	8002832 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 800610c:	2308      	movs	r3, #8
 800610e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8006110:	2300      	movs	r3, #0
 8006112:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006114:	2300      	movs	r3, #0
 8006116:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006118:	1d3b      	adds	r3, r7, #4
 800611a:	4619      	mov	r1, r3
 800611c:	4804      	ldr	r0, [pc, #16]	; (8006130 <MX_GPIO_Init+0x138>)
 800611e:	f7fc fb88 	bl	8002832 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8006122:	bf00      	nop
 8006124:	3728      	adds	r7, #40	; 0x28
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
 800612a:	bf00      	nop
 800612c:	48000800 	.word	0x48000800
 8006130:	48000400 	.word	0x48000400
 8006134:	00f00003 	.word	0x00f00003

08006138 <lis2de12_init_and_configure>:



void lis2de12_init_and_configure(void)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b088      	sub	sp, #32
 800613c:	af00      	add	r7, sp, #0
    lis2de12_reg_t reg;
    lis2de12_ctrl_reg3_t reg3;
    uint8_t whoamI;
    stmdev_ctx_t dev_ctx;
    /* Initialize platform specific hardware */
    platform_init();
 800613e:	f7ff ff53 	bl	8005fe8 <platform_init>

    /* Initialize device context */
    dev_ctx.write_reg = platform_write;
 8006142:	4b39      	ldr	r3, [pc, #228]	; (8006228 <lis2de12_init_and_configure+0xf0>)
 8006144:	607b      	str	r3, [r7, #4]
    dev_ctx.read_reg = platform_read;
 8006146:	4b39      	ldr	r3, [pc, #228]	; (800622c <lis2de12_init_and_configure+0xf4>)
 8006148:	60bb      	str	r3, [r7, #8]
    dev_ctx.mdelay = platform_delay;
 800614a:	4b39      	ldr	r3, [pc, #228]	; (8006230 <lis2de12_init_and_configure+0xf8>)
 800614c:	60fb      	str	r3, [r7, #12]
    dev_ctx.handle = &SENSOR_BUS;  // Assume SENSOR_BUS is defined and configured elsewhere
 800614e:	4b39      	ldr	r3, [pc, #228]	; (8006234 <lis2de12_init_and_configure+0xfc>)
 8006150:	613b      	str	r3, [r7, #16]

    /* Wait sensor boot time */
    platform_delay(BOOT_TIME);
 8006152:	2005      	movs	r0, #5
 8006154:	f7ff fefc 	bl	8005f50 <platform_delay>

    /* Check device ID */
    lis2de12_device_id_get(&dev_ctx, &whoamI);
 8006158:	f107 0217 	add.w	r2, r7, #23
 800615c:	1d3b      	adds	r3, r7, #4
 800615e:	4611      	mov	r1, r2
 8006160:	4618      	mov	r0, r3
 8006162:	f000 f9e9 	bl	8006538 <lis2de12_device_id_get>

    if (whoamI != LIS2DE12_ID) {
 8006166:	7dfb      	ldrb	r3, [r7, #23]
 8006168:	2b33      	cmp	r3, #51	; 0x33
 800616a:	d000      	beq.n	800616e <lis2de12_init_and_configure+0x36>
        while (1) {
 800616c:	e7fe      	b.n	800616c <lis2de12_init_and_configure+0x34>
            /* Handle device not found error */
        }
    }

    /* Set full scale to 2g */
    lis2de12_full_scale_set(&dev_ctx, LIS2DE12_2g);
 800616e:	1d3b      	adds	r3, r7, #4
 8006170:	2100      	movs	r1, #0
 8006172:	4618      	mov	r0, r3
 8006174:	f000 f956 	bl	8006424 <lis2de12_full_scale_set>

    /* Set interrupt on INT1 I1_ZYXDA */
    reg3.i1_overrun = PROPERTY_ENABLE;
 8006178:	7e3b      	ldrb	r3, [r7, #24]
 800617a:	f043 0302 	orr.w	r3, r3, #2
 800617e:	763b      	strb	r3, [r7, #24]
    reg3.i1_wtm = PROPERTY_ENABLE;
 8006180:	7e3b      	ldrb	r3, [r7, #24]
 8006182:	f043 0304 	orr.w	r3, r3, #4
 8006186:	763b      	strb	r3, [r7, #24]
    reg3.i1_zyxda = PROPERTY_ENABLE;
 8006188:	7e3b      	ldrb	r3, [r7, #24]
 800618a:	f043 0310 	orr.w	r3, r3, #16
 800618e:	763b      	strb	r3, [r7, #24]
    reg3.i1_ia2 = PROPERTY_ENABLE;
 8006190:	7e3b      	ldrb	r3, [r7, #24]
 8006192:	f043 0320 	orr.w	r3, r3, #32
 8006196:	763b      	strb	r3, [r7, #24]
    reg3.i1_ia1 = PROPERTY_ENABLE;
 8006198:	7e3b      	ldrb	r3, [r7, #24]
 800619a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800619e:	763b      	strb	r3, [r7, #24]
    reg3.i1_click = PROPERTY_ENABLE;
 80061a0:	7e3b      	ldrb	r3, [r7, #24]
 80061a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061a6:	763b      	strb	r3, [r7, #24]
    lis2de12_pin_int1_config_set(&dev_ctx, &reg3);
 80061a8:	f107 0218 	add.w	r2, r7, #24
 80061ac:	1d3b      	adds	r3, r7, #4
 80061ae:	4611      	mov	r1, r2
 80061b0:	4618      	mov	r0, r3
 80061b2:	f000 fa55 	bl	8006660 <lis2de12_pin_int1_config_set>

    /* Route HP filter output on outputs registers */
    lis2de12_high_pass_on_outputs_set(&dev_ctx, PROPERTY_ENABLE);
 80061b6:	1d3b      	adds	r3, r7, #4
 80061b8:	2101      	movs	r1, #1
 80061ba:	4618      	mov	r0, r3
 80061bc:	f000 f8c0 	bl	8006340 <lis2de12_high_pass_on_outputs_set>

    /* Route HP filter output on interrupt generator 1 */
    lis2de12_high_pass_int_conf_set(&dev_ctx, LIS2DE12_ON_INT1_GEN);
 80061c0:	1d3b      	adds	r3, r7, #4
 80061c2:	2101      	movs	r1, #1
 80061c4:	4618      	mov	r0, r3
 80061c6:	f000 fa25 	bl	8006614 <lis2de12_high_pass_int_conf_set>

    /* HP filter mode is "autoreset on interrupt event" */
    lis2de12_high_pass_mode_set(&dev_ctx, LIS2DE12_AUTORST_ON_INT);
 80061ca:	1d3b      	adds	r3, r7, #4
 80061cc:	2103      	movs	r1, #3
 80061ce:	4618      	mov	r0, r3
 80061d0:	f000 f902 	bl	80063d8 <lis2de12_high_pass_mode_set>

    /* Set HP filter on mode */
    lis2de12_high_pass_bandwidth_set(&dev_ctx, LIS2DE12_AGGRESSIVE);
 80061d4:	1d3b      	adds	r3, r7, #4
 80061d6:	2100      	movs	r1, #0
 80061d8:	4618      	mov	r0, r3
 80061da:	f000 f8d7 	bl	800638c <lis2de12_high_pass_bandwidth_set>

    /* Configure interrupt on threshold on z axis low / high events */
    reg.byte = PROPERTY_DISABLE;
 80061de:	2300      	movs	r3, #0
 80061e0:	773b      	strb	r3, [r7, #28]
    reg.int1_cfg.xhie = PROPERTY_ENABLE;
 80061e2:	7f3b      	ldrb	r3, [r7, #28]
 80061e4:	f043 0302 	orr.w	r3, r3, #2
 80061e8:	773b      	strb	r3, [r7, #28]
    reg.int1_cfg.yhie = PROPERTY_ENABLE;
 80061ea:	7f3b      	ldrb	r3, [r7, #28]
 80061ec:	f043 0308 	orr.w	r3, r3, #8
 80061f0:	773b      	strb	r3, [r7, #28]
    lis2de12_int1_gen_conf_set(&dev_ctx, &reg.int1_cfg);
 80061f2:	f107 021c 	add.w	r2, r7, #28
 80061f6:	1d3b      	adds	r3, r7, #4
 80061f8:	4611      	mov	r1, r2
 80061fa:	4618      	mov	r0, r3
 80061fc:	f000 f9ad 	bl	800655a <lis2de12_int1_gen_conf_set>

    /* Set interrupt threshold at ~800 mg -> 1 bit = 16mg@2g */
    lis2de12_int1_gen_threshold_set(&dev_ctx, 0x30);
 8006200:	1d3b      	adds	r3, r7, #4
 8006202:	2130      	movs	r1, #48	; 0x30
 8006204:	4618      	mov	r0, r3
 8006206:	f000 f9b9 	bl	800657c <lis2de12_int1_gen_threshold_set>

    /* Set duration to zero - 1 bit = 1/ODR */
    lis2de12_int1_gen_duration_set(&dev_ctx, 0);
 800620a:	1d3b      	adds	r3, r7, #4
 800620c:	2100      	movs	r1, #0
 800620e:	4618      	mov	r0, r3
 8006210:	f000 f9da 	bl	80065c8 <lis2de12_int1_gen_duration_set>

    /* Set Output Data Rate to 25Hz */
    lis2de12_data_rate_set(&dev_ctx, LIS2DE12_ODR_25Hz);
 8006214:	1d3b      	adds	r3, r7, #4
 8006216:	2103      	movs	r1, #3
 8006218:	4618      	mov	r0, r3
 800621a:	f000 f867 	bl	80062ec <lis2de12_data_rate_set>
}
 800621e:	bf00      	nop
 8006220:	3720      	adds	r7, #32
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	08005ecd 	.word	0x08005ecd
 800622c:	08005f0f 	.word	0x08005f0f
 8006230:	08005f51 	.word	0x08005f51
 8006234:	20000a48 	.word	0x20000a48

08006238 <lis2de12_read_reg>:
  *
  */
int32_t __weak lis2de12_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8006238:	b590      	push	{r4, r7, lr}
 800623a:	b087      	sub	sp, #28
 800623c:	af00      	add	r7, sp, #0
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	607a      	str	r2, [r7, #4]
 8006242:	461a      	mov	r2, r3
 8006244:	460b      	mov	r3, r1
 8006246:	72fb      	strb	r3, [r7, #11]
 8006248:	4613      	mov	r3, r2
 800624a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d102      	bne.n	8006258 <lis2de12_read_reg+0x20>
  {
    return -1;
 8006252:	f04f 33ff 	mov.w	r3, #4294967295
 8006256:	e009      	b.n	800626c <lis2de12_read_reg+0x34>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	685c      	ldr	r4, [r3, #4]
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	68d8      	ldr	r0, [r3, #12]
 8006260:	893b      	ldrh	r3, [r7, #8]
 8006262:	7af9      	ldrb	r1, [r7, #11]
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	47a0      	blx	r4
 8006268:	6178      	str	r0, [r7, #20]

  return ret;
 800626a:	697b      	ldr	r3, [r7, #20]
}
 800626c:	4618      	mov	r0, r3
 800626e:	371c      	adds	r7, #28
 8006270:	46bd      	mov	sp, r7
 8006272:	bd90      	pop	{r4, r7, pc}

08006274 <lis2de12_write_reg>:
  *
  */
int32_t __weak lis2de12_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                  uint8_t *data,
                                  uint16_t len)
{
 8006274:	b590      	push	{r4, r7, lr}
 8006276:	b087      	sub	sp, #28
 8006278:	af00      	add	r7, sp, #0
 800627a:	60f8      	str	r0, [r7, #12]
 800627c:	607a      	str	r2, [r7, #4]
 800627e:	461a      	mov	r2, r3
 8006280:	460b      	mov	r3, r1
 8006282:	72fb      	strb	r3, [r7, #11]
 8006284:	4613      	mov	r3, r2
 8006286:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d102      	bne.n	8006294 <lis2de12_write_reg+0x20>
  {
    return -1;
 800628e:	f04f 33ff 	mov.w	r3, #4294967295
 8006292:	e009      	b.n	80062a8 <lis2de12_write_reg+0x34>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681c      	ldr	r4, [r3, #0]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	68d8      	ldr	r0, [r3, #12]
 800629c:	893b      	ldrh	r3, [r7, #8]
 800629e:	7af9      	ldrb	r1, [r7, #11]
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	47a0      	blx	r4
 80062a4:	6178      	str	r0, [r7, #20]

  return ret;
 80062a6:	697b      	ldr	r3, [r7, #20]
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	371c      	adds	r7, #28
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd90      	pop	{r4, r7, pc}

080062b0 <lis2de12_from_fs2_to_mg>:
  * @{
  *
  */

float_t lis2de12_from_fs2_to_mg(int16_t lsb)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b083      	sub	sp, #12
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	4603      	mov	r3, r0
 80062b8:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb / 256.0f) * 15.6f;
 80062ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80062be:	ee07 3a90 	vmov	s15, r3
 80062c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80062c6:	eddf 6a07 	vldr	s13, [pc, #28]	; 80062e4 <lis2de12_from_fs2_to_mg+0x34>
 80062ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80062ce:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80062e8 <lis2de12_from_fs2_to_mg+0x38>
 80062d2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80062d6:	eeb0 0a67 	vmov.f32	s0, s15
 80062da:	370c      	adds	r7, #12
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr
 80062e4:	43800000 	.word	0x43800000
 80062e8:	4179999a 	.word	0x4179999a

080062ec <lis2de12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2de12_data_rate_set(const stmdev_ctx_t *ctx, lis2de12_odr_t val)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b084      	sub	sp, #16
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	460b      	mov	r3, r1
 80062f6:	70fb      	strb	r3, [r7, #3]
  lis2de12_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lis2de12_read_reg(ctx, LIS2DE12_CTRL_REG1,
 80062f8:	f107 0208 	add.w	r2, r7, #8
 80062fc:	2301      	movs	r3, #1
 80062fe:	2120      	movs	r1, #32
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f7ff ff99 	bl	8006238 <lis2de12_read_reg>
 8006306:	60f8      	str	r0, [r7, #12]
                          (uint8_t *)&ctrl_reg1, 1);

  if (ret == 0)
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d113      	bne.n	8006336 <lis2de12_data_rate_set+0x4a>
  {
    ctrl_reg1.lpen = PROPERTY_ENABLE;
 800630e:	7a3b      	ldrb	r3, [r7, #8]
 8006310:	f043 0308 	orr.w	r3, r3, #8
 8006314:	723b      	strb	r3, [r7, #8]
    ctrl_reg1.odr = (uint8_t)val;
 8006316:	78fb      	ldrb	r3, [r7, #3]
 8006318:	f003 030f 	and.w	r3, r3, #15
 800631c:	b2da      	uxtb	r2, r3
 800631e:	7a3b      	ldrb	r3, [r7, #8]
 8006320:	f362 1307 	bfi	r3, r2, #4, #4
 8006324:	723b      	strb	r3, [r7, #8]
    ret = lis2de12_write_reg(ctx, LIS2DE12_CTRL_REG1,
 8006326:	f107 0208 	add.w	r2, r7, #8
 800632a:	2301      	movs	r3, #1
 800632c:	2120      	movs	r1, #32
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f7ff ffa0 	bl	8006274 <lis2de12_write_reg>
 8006334:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl_reg1, 1);
  }

  return ret;
 8006336:	68fb      	ldr	r3, [r7, #12]
}
 8006338:	4618      	mov	r0, r3
 800633a:	3710      	adds	r7, #16
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}

08006340 <lis2de12_high_pass_on_outputs_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2de12_high_pass_on_outputs_set(const stmdev_ctx_t *ctx,
                                          uint8_t val)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b084      	sub	sp, #16
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	460b      	mov	r3, r1
 800634a:	70fb      	strb	r3, [r7, #3]
  lis2de12_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lis2de12_read_reg(ctx, LIS2DE12_CTRL_REG2,
 800634c:	f107 0208 	add.w	r2, r7, #8
 8006350:	2301      	movs	r3, #1
 8006352:	2121      	movs	r1, #33	; 0x21
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f7ff ff6f 	bl	8006238 <lis2de12_read_reg>
 800635a:	60f8      	str	r0, [r7, #12]
                          (uint8_t *)&ctrl_reg2, 1);

  if (ret == 0)
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d10f      	bne.n	8006382 <lis2de12_high_pass_on_outputs_set+0x42>
  {
    ctrl_reg2.fds = val;
 8006362:	78fb      	ldrb	r3, [r7, #3]
 8006364:	f003 0301 	and.w	r3, r3, #1
 8006368:	b2da      	uxtb	r2, r3
 800636a:	7a3b      	ldrb	r3, [r7, #8]
 800636c:	f362 03c3 	bfi	r3, r2, #3, #1
 8006370:	723b      	strb	r3, [r7, #8]
    ret = lis2de12_write_reg(ctx, LIS2DE12_CTRL_REG2,
 8006372:	f107 0208 	add.w	r2, r7, #8
 8006376:	2301      	movs	r3, #1
 8006378:	2121      	movs	r1, #33	; 0x21
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f7ff ff7a 	bl	8006274 <lis2de12_write_reg>
 8006380:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl_reg2, 1);
  }

  return ret;
 8006382:	68fb      	ldr	r3, [r7, #12]
}
 8006384:	4618      	mov	r0, r3
 8006386:	3710      	adds	r7, #16
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}

0800638c <lis2de12_high_pass_bandwidth_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2de12_high_pass_bandwidth_set(const stmdev_ctx_t *ctx,
                                         lis2de12_hpcf_t val)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b084      	sub	sp, #16
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	460b      	mov	r3, r1
 8006396:	70fb      	strb	r3, [r7, #3]
  lis2de12_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lis2de12_read_reg(ctx, LIS2DE12_CTRL_REG2,
 8006398:	f107 0208 	add.w	r2, r7, #8
 800639c:	2301      	movs	r3, #1
 800639e:	2121      	movs	r1, #33	; 0x21
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f7ff ff49 	bl	8006238 <lis2de12_read_reg>
 80063a6:	60f8      	str	r0, [r7, #12]
                          (uint8_t *)&ctrl_reg2, 1);

  if (ret == 0)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d10f      	bne.n	80063ce <lis2de12_high_pass_bandwidth_set+0x42>
  {
    ctrl_reg2.hpcf = (uint8_t)val;
 80063ae:	78fb      	ldrb	r3, [r7, #3]
 80063b0:	f003 0303 	and.w	r3, r3, #3
 80063b4:	b2da      	uxtb	r2, r3
 80063b6:	7a3b      	ldrb	r3, [r7, #8]
 80063b8:	f362 1305 	bfi	r3, r2, #4, #2
 80063bc:	723b      	strb	r3, [r7, #8]
    ret = lis2de12_write_reg(ctx, LIS2DE12_CTRL_REG2,
 80063be:	f107 0208 	add.w	r2, r7, #8
 80063c2:	2301      	movs	r3, #1
 80063c4:	2121      	movs	r1, #33	; 0x21
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f7ff ff54 	bl	8006274 <lis2de12_write_reg>
 80063cc:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl_reg2, 1);
  }

  return ret;
 80063ce:	68fb      	ldr	r3, [r7, #12]
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3710      	adds	r7, #16
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <lis2de12_high_pass_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2de12_high_pass_mode_set(const stmdev_ctx_t *ctx,
                                    lis2de12_hpm_t val)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b084      	sub	sp, #16
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
 80063e0:	460b      	mov	r3, r1
 80063e2:	70fb      	strb	r3, [r7, #3]
  lis2de12_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lis2de12_read_reg(ctx, LIS2DE12_CTRL_REG2,
 80063e4:	f107 0208 	add.w	r2, r7, #8
 80063e8:	2301      	movs	r3, #1
 80063ea:	2121      	movs	r1, #33	; 0x21
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f7ff ff23 	bl	8006238 <lis2de12_read_reg>
 80063f2:	60f8      	str	r0, [r7, #12]
                          (uint8_t *)&ctrl_reg2, 1);

  if (ret == 0)
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d10f      	bne.n	800641a <lis2de12_high_pass_mode_set+0x42>
  {
    ctrl_reg2.hpm = (uint8_t)val;
 80063fa:	78fb      	ldrb	r3, [r7, #3]
 80063fc:	f003 0303 	and.w	r3, r3, #3
 8006400:	b2da      	uxtb	r2, r3
 8006402:	7a3b      	ldrb	r3, [r7, #8]
 8006404:	f362 1387 	bfi	r3, r2, #6, #2
 8006408:	723b      	strb	r3, [r7, #8]
    ret = lis2de12_write_reg(ctx, LIS2DE12_CTRL_REG2,
 800640a:	f107 0208 	add.w	r2, r7, #8
 800640e:	2301      	movs	r3, #1
 8006410:	2121      	movs	r1, #33	; 0x21
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f7ff ff2e 	bl	8006274 <lis2de12_write_reg>
 8006418:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl_reg2, 1);
  }

  return ret;
 800641a:	68fb      	ldr	r3, [r7, #12]
}
 800641c:	4618      	mov	r0, r3
 800641e:	3710      	adds	r7, #16
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <lis2de12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2de12_full_scale_set(const stmdev_ctx_t *ctx, lis2de12_fs_t val)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b084      	sub	sp, #16
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	460b      	mov	r3, r1
 800642e:	70fb      	strb	r3, [r7, #3]
  lis2de12_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis2de12_read_reg(ctx, LIS2DE12_CTRL_REG4,
 8006430:	f107 0208 	add.w	r2, r7, #8
 8006434:	2301      	movs	r3, #1
 8006436:	2123      	movs	r1, #35	; 0x23
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f7ff fefd 	bl	8006238 <lis2de12_read_reg>
 800643e:	60f8      	str	r0, [r7, #12]
                          (uint8_t *)&ctrl_reg4, 1);

  if (ret == 0)
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d10f      	bne.n	8006466 <lis2de12_full_scale_set+0x42>
  {
    ctrl_reg4.fs = (uint8_t)val;
 8006446:	78fb      	ldrb	r3, [r7, #3]
 8006448:	f003 0303 	and.w	r3, r3, #3
 800644c:	b2da      	uxtb	r2, r3
 800644e:	7a3b      	ldrb	r3, [r7, #8]
 8006450:	f362 1305 	bfi	r3, r2, #4, #2
 8006454:	723b      	strb	r3, [r7, #8]
    ret = lis2de12_write_reg(ctx, LIS2DE12_CTRL_REG4,
 8006456:	f107 0208 	add.w	r2, r7, #8
 800645a:	2301      	movs	r3, #1
 800645c:	2123      	movs	r1, #35	; 0x23
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f7ff ff08 	bl	8006274 <lis2de12_write_reg>
 8006464:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl_reg4, 1);
  }

  return ret;
 8006466:	68fb      	ldr	r3, [r7, #12]
}
 8006468:	4618      	mov	r0, r3
 800646a:	3710      	adds	r7, #16
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}

08006470 <lis2de12_xl_data_ready_get>:
  * @param  val      change the values of zyxda in reg STATUS_REG
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2de12_xl_data_ready_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b084      	sub	sp, #16
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	6039      	str	r1, [r7, #0]
  lis2de12_status_reg_t status_reg;
  int32_t ret;

  ret = lis2de12_read_reg(ctx, LIS2DE12_STATUS_REG,
 800647a:	f107 0208 	add.w	r2, r7, #8
 800647e:	2301      	movs	r3, #1
 8006480:	2127      	movs	r1, #39	; 0x27
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f7ff fed8 	bl	8006238 <lis2de12_read_reg>
 8006488:	60f8      	str	r0, [r7, #12]
                          (uint8_t *)&status_reg, 1);
  *val = status_reg.zyxda;
 800648a:	7a3b      	ldrb	r3, [r7, #8]
 800648c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006490:	b2db      	uxtb	r3, r3
 8006492:	461a      	mov	r2, r3
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	701a      	strb	r2, [r3, #0]

  return ret;
 8006498:	68fb      	ldr	r3, [r7, #12]
}
 800649a:	4618      	mov	r0, r3
 800649c:	3710      	adds	r7, #16
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}

080064a2 <lis2de12_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2de12_acceleration_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 80064a2:	b580      	push	{r7, lr}
 80064a4:	b086      	sub	sp, #24
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	6078      	str	r0, [r7, #4]
 80064aa:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2de12_read_reg(ctx, LIS2DE12_FIFO_READ_START, buff, 6);
 80064ac:	f107 020c 	add.w	r2, r7, #12
 80064b0:	2306      	movs	r3, #6
 80064b2:	2128      	movs	r1, #40	; 0x28
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f7ff febf 	bl	8006238 <lis2de12_read_reg>
 80064ba:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80064bc:	7b7b      	ldrb	r3, [r7, #13]
 80064be:	b21a      	sxth	r2, r3
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	021b      	lsls	r3, r3, #8
 80064ce:	b29a      	uxth	r2, r3
 80064d0:	7b3b      	ldrb	r3, [r7, #12]
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	4413      	add	r3, r2
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	b21a      	sxth	r2, r3
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80064de:	7bfa      	ldrb	r2, [r7, #15]
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	3302      	adds	r3, #2
 80064e4:	b212      	sxth	r2, r2
 80064e6:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	3302      	adds	r3, #2
 80064ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	021b      	lsls	r3, r3, #8
 80064f4:	b29a      	uxth	r2, r3
 80064f6:	7bbb      	ldrb	r3, [r7, #14]
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	4413      	add	r3, r2
 80064fc:	b29a      	uxth	r2, r3
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	3302      	adds	r3, #2
 8006502:	b212      	sxth	r2, r2
 8006504:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8006506:	7c7a      	ldrb	r2, [r7, #17]
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	3304      	adds	r3, #4
 800650c:	b212      	sxth	r2, r2
 800650e:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	3304      	adds	r3, #4
 8006514:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006518:	b29b      	uxth	r3, r3
 800651a:	021b      	lsls	r3, r3, #8
 800651c:	b29a      	uxth	r2, r3
 800651e:	7c3b      	ldrb	r3, [r7, #16]
 8006520:	b29b      	uxth	r3, r3
 8006522:	4413      	add	r3, r2
 8006524:	b29a      	uxth	r2, r3
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	3304      	adds	r3, #4
 800652a:	b212      	sxth	r2, r2
 800652c:	801a      	strh	r2, [r3, #0]

  return ret;
 800652e:	697b      	ldr	r3, [r7, #20]
}
 8006530:	4618      	mov	r0, r3
 8006532:	3718      	adds	r7, #24
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}

08006538 <lis2de12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2de12_device_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b084      	sub	sp, #16
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2de12_read_reg(ctx, LIS2DE12_WHO_AM_I, buff, 1);
 8006542:	2301      	movs	r3, #1
 8006544:	683a      	ldr	r2, [r7, #0]
 8006546:	210f      	movs	r1, #15
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f7ff fe75 	bl	8006238 <lis2de12_read_reg>
 800654e:	60f8      	str	r0, [r7, #12]

  return ret;
 8006550:	68fb      	ldr	r3, [r7, #12]
}
 8006552:	4618      	mov	r0, r3
 8006554:	3710      	adds	r7, #16
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}

0800655a <lis2de12_int1_gen_conf_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2de12_int1_gen_conf_set(const stmdev_ctx_t *ctx,
                                   lis2de12_int1_cfg_t *val)
{
 800655a:	b580      	push	{r7, lr}
 800655c:	b084      	sub	sp, #16
 800655e:	af00      	add	r7, sp, #0
 8006560:	6078      	str	r0, [r7, #4]
 8006562:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2de12_write_reg(ctx, LIS2DE12_INT1_CFG, (uint8_t *) val, 1);
 8006564:	2301      	movs	r3, #1
 8006566:	683a      	ldr	r2, [r7, #0]
 8006568:	2130      	movs	r1, #48	; 0x30
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f7ff fe82 	bl	8006274 <lis2de12_write_reg>
 8006570:	60f8      	str	r0, [r7, #12]

  return ret;
 8006572:	68fb      	ldr	r3, [r7, #12]
}
 8006574:	4618      	mov	r0, r3
 8006576:	3710      	adds	r7, #16
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}

0800657c <lis2de12_int1_gen_threshold_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2de12_int1_gen_threshold_set(const stmdev_ctx_t *ctx,
                                        uint8_t val)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b084      	sub	sp, #16
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	460b      	mov	r3, r1
 8006586:	70fb      	strb	r3, [r7, #3]
  lis2de12_int1_ths_t int1_ths;
  int32_t ret;

  ret = lis2de12_read_reg(ctx, LIS2DE12_INT1_THS, (uint8_t *)&int1_ths, 1);
 8006588:	f107 0208 	add.w	r2, r7, #8
 800658c:	2301      	movs	r3, #1
 800658e:	2132      	movs	r1, #50	; 0x32
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f7ff fe51 	bl	8006238 <lis2de12_read_reg>
 8006596:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d10f      	bne.n	80065be <lis2de12_int1_gen_threshold_set+0x42>
  {
    int1_ths.ths = val;
 800659e:	78fb      	ldrb	r3, [r7, #3]
 80065a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065a4:	b2da      	uxtb	r2, r3
 80065a6:	7a3b      	ldrb	r3, [r7, #8]
 80065a8:	f362 0306 	bfi	r3, r2, #0, #7
 80065ac:	723b      	strb	r3, [r7, #8]
    ret = lis2de12_write_reg(ctx, LIS2DE12_INT1_THS, (uint8_t *)&int1_ths, 1);
 80065ae:	f107 0208 	add.w	r2, r7, #8
 80065b2:	2301      	movs	r3, #1
 80065b4:	2132      	movs	r1, #50	; 0x32
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f7ff fe5c 	bl	8006274 <lis2de12_write_reg>
 80065bc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80065be:	68fb      	ldr	r3, [r7, #12]
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3710      	adds	r7, #16
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}

080065c8 <lis2de12_int1_gen_duration_set>:
  * @param  val      change the values of d in reg INT1_DURATION
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2de12_int1_gen_duration_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b084      	sub	sp, #16
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	460b      	mov	r3, r1
 80065d2:	70fb      	strb	r3, [r7, #3]
  lis2de12_int1_duration_t int1_duration;
  int32_t ret;

  ret = lis2de12_read_reg(ctx, LIS2DE12_INT1_DURATION,
 80065d4:	f107 0208 	add.w	r2, r7, #8
 80065d8:	2301      	movs	r3, #1
 80065da:	2133      	movs	r1, #51	; 0x33
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f7ff fe2b 	bl	8006238 <lis2de12_read_reg>
 80065e2:	60f8      	str	r0, [r7, #12]
                          (uint8_t *)&int1_duration, 1);

  if (ret == 0)
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d10f      	bne.n	800660a <lis2de12_int1_gen_duration_set+0x42>
  {
    int1_duration.d = val;
 80065ea:	78fb      	ldrb	r3, [r7, #3]
 80065ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065f0:	b2da      	uxtb	r2, r3
 80065f2:	7a3b      	ldrb	r3, [r7, #8]
 80065f4:	f362 0306 	bfi	r3, r2, #0, #7
 80065f8:	723b      	strb	r3, [r7, #8]
    ret = lis2de12_write_reg(ctx, LIS2DE12_INT1_DURATION,
 80065fa:	f107 0208 	add.w	r2, r7, #8
 80065fe:	2301      	movs	r3, #1
 8006600:	2133      	movs	r1, #51	; 0x33
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f7ff fe36 	bl	8006274 <lis2de12_write_reg>
 8006608:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&int1_duration, 1);
  }

  return ret;
 800660a:	68fb      	ldr	r3, [r7, #12]
}
 800660c:	4618      	mov	r0, r3
 800660e:	3710      	adds	r7, #16
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}

08006614 <lis2de12_high_pass_int_conf_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2de12_high_pass_int_conf_set(const stmdev_ctx_t *ctx,
                                        lis2de12_hp_t val)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b084      	sub	sp, #16
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	460b      	mov	r3, r1
 800661e:	70fb      	strb	r3, [r7, #3]
  lis2de12_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lis2de12_read_reg(ctx, LIS2DE12_CTRL_REG2,
 8006620:	f107 0208 	add.w	r2, r7, #8
 8006624:	2301      	movs	r3, #1
 8006626:	2121      	movs	r1, #33	; 0x21
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f7ff fe05 	bl	8006238 <lis2de12_read_reg>
 800662e:	60f8      	str	r0, [r7, #12]
                          (uint8_t *)&ctrl_reg2, 1);

  if (ret == 0)
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d10f      	bne.n	8006656 <lis2de12_high_pass_int_conf_set+0x42>
  {
    ctrl_reg2.hp = (uint8_t)val;
 8006636:	78fb      	ldrb	r3, [r7, #3]
 8006638:	f003 0307 	and.w	r3, r3, #7
 800663c:	b2da      	uxtb	r2, r3
 800663e:	7a3b      	ldrb	r3, [r7, #8]
 8006640:	f362 0302 	bfi	r3, r2, #0, #3
 8006644:	723b      	strb	r3, [r7, #8]
    ret = lis2de12_write_reg(ctx, LIS2DE12_CTRL_REG2,
 8006646:	f107 0208 	add.w	r2, r7, #8
 800664a:	2301      	movs	r3, #1
 800664c:	2121      	movs	r1, #33	; 0x21
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f7ff fe10 	bl	8006274 <lis2de12_write_reg>
 8006654:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl_reg2, 1);
  }

  return ret;
 8006656:	68fb      	ldr	r3, [r7, #12]
}
 8006658:	4618      	mov	r0, r3
 800665a:	3710      	adds	r7, #16
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}

08006660 <lis2de12_pin_int1_config_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2de12_pin_int1_config_set(const stmdev_ctx_t *ctx,
                                     lis2de12_ctrl_reg3_t *val)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b084      	sub	sp, #16
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2de12_write_reg(ctx, LIS2DE12_CTRL_REG3, (uint8_t *) val, 1);
 800666a:	2301      	movs	r3, #1
 800666c:	683a      	ldr	r2, [r7, #0]
 800666e:	2122      	movs	r1, #34	; 0x22
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f7ff fdff 	bl	8006274 <lis2de12_write_reg>
 8006676:	60f8      	str	r0, [r7, #12]

  return ret;
 8006678:	68fb      	ldr	r3, [r7, #12]
}
 800667a:	4618      	mov	r0, r3
 800667c:	3710      	adds	r7, #16
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}
	...

08006684 <apps_common_compute_lora_ldro>:
 *
 * @param [in] sf  LoRa Spreading Factor
 * @param [in] bw  LoRa Bandwidth
 */
inline static uint8_t apps_common_compute_lora_ldro( const lr11xx_radio_lora_sf_t sf, const lr11xx_radio_lora_bw_t bw )
{
 8006684:	b480      	push	{r7}
 8006686:	b083      	sub	sp, #12
 8006688:	af00      	add	r7, sp, #0
 800668a:	4603      	mov	r3, r0
 800668c:	460a      	mov	r2, r1
 800668e:	71fb      	strb	r3, [r7, #7]
 8006690:	4613      	mov	r3, r2
 8006692:	71bb      	strb	r3, [r7, #6]
    switch( bw )
 8006694:	79bb      	ldrb	r3, [r7, #6]
 8006696:	3b01      	subs	r3, #1
 8006698:	2b0e      	cmp	r3, #14
 800669a:	d853      	bhi.n	8006744 <apps_common_compute_lora_ldro+0xc0>
 800669c:	a201      	add	r2, pc, #4	; (adr r2, 80066a4 <apps_common_compute_lora_ldro+0x20>)
 800669e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066a2:	bf00      	nop
 80066a4:	08006741 	.word	0x08006741
 80066a8:	08006741 	.word	0x08006741
 80066ac:	08006707 	.word	0x08006707
 80066b0:	080066f3 	.word	0x080066f3
 80066b4:	080066e5 	.word	0x080066e5
 80066b8:	080066e1 	.word	0x080066e1
 80066bc:	08006745 	.word	0x08006745
 80066c0:	08006741 	.word	0x08006741
 80066c4:	08006741 	.word	0x08006741
 80066c8:	08006721 	.word	0x08006721
 80066cc:	08006745 	.word	0x08006745
 80066d0:	08006745 	.word	0x08006745
 80066d4:	080066f3 	.word	0x080066f3
 80066d8:	080066f3 	.word	0x080066f3
 80066dc:	080066f3 	.word	0x080066f3
    {
    case LR11XX_RADIO_LORA_BW_500:
        return 0;
 80066e0:	2300      	movs	r3, #0
 80066e2:	e030      	b.n	8006746 <apps_common_compute_lora_ldro+0xc2>

    case LR11XX_RADIO_LORA_BW_250:
        if( sf == LR11XX_RADIO_LORA_SF12 )
 80066e4:	79fb      	ldrb	r3, [r7, #7]
 80066e6:	2b0c      	cmp	r3, #12
 80066e8:	d101      	bne.n	80066ee <apps_common_compute_lora_ldro+0x6a>
        {
            return 1;
 80066ea:	2301      	movs	r3, #1
 80066ec:	e02b      	b.n	8006746 <apps_common_compute_lora_ldro+0xc2>
        }
        else
        {
            return 0;
 80066ee:	2300      	movs	r3, #0
 80066f0:	e029      	b.n	8006746 <apps_common_compute_lora_ldro+0xc2>

    case LR11XX_RADIO_LORA_BW_800:
    case LR11XX_RADIO_LORA_BW_400:
    case LR11XX_RADIO_LORA_BW_200:
    case LR11XX_RADIO_LORA_BW_125:
        if( ( sf == LR11XX_RADIO_LORA_SF12 ) || ( sf == LR11XX_RADIO_LORA_SF11 ) )
 80066f2:	79fb      	ldrb	r3, [r7, #7]
 80066f4:	2b0c      	cmp	r3, #12
 80066f6:	d002      	beq.n	80066fe <apps_common_compute_lora_ldro+0x7a>
 80066f8:	79fb      	ldrb	r3, [r7, #7]
 80066fa:	2b0b      	cmp	r3, #11
 80066fc:	d101      	bne.n	8006702 <apps_common_compute_lora_ldro+0x7e>
        {
            return 1;
 80066fe:	2301      	movs	r3, #1
 8006700:	e021      	b.n	8006746 <apps_common_compute_lora_ldro+0xc2>
        }
        else
        {
            return 0;
 8006702:	2300      	movs	r3, #0
 8006704:	e01f      	b.n	8006746 <apps_common_compute_lora_ldro+0xc2>
        }

    case LR11XX_RADIO_LORA_BW_62:
        if( ( sf == LR11XX_RADIO_LORA_SF12 ) || ( sf == LR11XX_RADIO_LORA_SF11 ) || ( sf == LR11XX_RADIO_LORA_SF10 ) )
 8006706:	79fb      	ldrb	r3, [r7, #7]
 8006708:	2b0c      	cmp	r3, #12
 800670a:	d005      	beq.n	8006718 <apps_common_compute_lora_ldro+0x94>
 800670c:	79fb      	ldrb	r3, [r7, #7]
 800670e:	2b0b      	cmp	r3, #11
 8006710:	d002      	beq.n	8006718 <apps_common_compute_lora_ldro+0x94>
 8006712:	79fb      	ldrb	r3, [r7, #7]
 8006714:	2b0a      	cmp	r3, #10
 8006716:	d101      	bne.n	800671c <apps_common_compute_lora_ldro+0x98>
        {
            return 1;
 8006718:	2301      	movs	r3, #1
 800671a:	e014      	b.n	8006746 <apps_common_compute_lora_ldro+0xc2>
        }
        else
        {
            return 0;
 800671c:	2300      	movs	r3, #0
 800671e:	e012      	b.n	8006746 <apps_common_compute_lora_ldro+0xc2>
        }

    case LR11XX_RADIO_LORA_BW_41:
        if( ( sf == LR11XX_RADIO_LORA_SF12 ) || ( sf == LR11XX_RADIO_LORA_SF11 ) || ( sf == LR11XX_RADIO_LORA_SF10 ) ||
 8006720:	79fb      	ldrb	r3, [r7, #7]
 8006722:	2b0c      	cmp	r3, #12
 8006724:	d008      	beq.n	8006738 <apps_common_compute_lora_ldro+0xb4>
 8006726:	79fb      	ldrb	r3, [r7, #7]
 8006728:	2b0b      	cmp	r3, #11
 800672a:	d005      	beq.n	8006738 <apps_common_compute_lora_ldro+0xb4>
 800672c:	79fb      	ldrb	r3, [r7, #7]
 800672e:	2b0a      	cmp	r3, #10
 8006730:	d002      	beq.n	8006738 <apps_common_compute_lora_ldro+0xb4>
 8006732:	79fb      	ldrb	r3, [r7, #7]
 8006734:	2b09      	cmp	r3, #9
 8006736:	d101      	bne.n	800673c <apps_common_compute_lora_ldro+0xb8>
            ( sf == LR11XX_RADIO_LORA_SF9 ) )
        {
            return 1;
 8006738:	2301      	movs	r3, #1
 800673a:	e004      	b.n	8006746 <apps_common_compute_lora_ldro+0xc2>
        }
        else
        {
            return 0;
 800673c:	2300      	movs	r3, #0
 800673e:	e002      	b.n	8006746 <apps_common_compute_lora_ldro+0xc2>
    case LR11XX_RADIO_LORA_BW_31:
    case LR11XX_RADIO_LORA_BW_20:
    case LR11XX_RADIO_LORA_BW_15:
    case LR11XX_RADIO_LORA_BW_10:
        // case LR11XX_RADIO_LORA_BW_7:
        return 1;
 8006740:	2301      	movs	r3, #1
 8006742:	e000      	b.n	8006746 <apps_common_compute_lora_ldro+0xc2>

    default:
        return 0;
 8006744:	2300      	movs	r3, #0
    }
}
 8006746:	4618      	mov	r0, r3
 8006748:	370c      	adds	r7, #12
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr
 8006752:	bf00      	nop

08006754 <smtc_shield_lr11xx_get_pa_pwr_cfg>:
 *
 * @return A pointer to a PA configuration corresponding to the input configuration
 */
static inline const smtc_shield_lr11xx_pa_pwr_cfg_t* smtc_shield_lr11xx_get_pa_pwr_cfg(
    const smtc_shield_lr11xx_t* shield, const uint32_t rf_freq_in_hz, int8_t expected_output_pwr_in_dbm )
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b084      	sub	sp, #16
 8006758:	af00      	add	r7, sp, #0
 800675a:	60f8      	str	r0, [r7, #12]
 800675c:	60b9      	str	r1, [r7, #8]
 800675e:	4613      	mov	r3, r2
 8006760:	71fb      	strb	r3, [r7, #7]
    return shield->get_pa_pwr_cfg( rf_freq_in_hz, expected_output_pwr_in_dbm );
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800676a:	4611      	mov	r1, r2
 800676c:	68b8      	ldr	r0, [r7, #8]
 800676e:	4798      	blx	r3
 8006770:	4603      	mov	r3, r0
}
 8006772:	4618      	mov	r0, r3
 8006774:	3710      	adds	r7, #16
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}

0800677a <smtc_shield_lr11xx_get_rssi_calibration_table>:
 *
 * @return A pointer to a RSSI calibration table corresponding to the input configuration
 */
static inline const lr11xx_radio_rssi_calibration_table_t* smtc_shield_lr11xx_get_rssi_calibration_table(
    const smtc_shield_lr11xx_t* shield, const uint32_t rf_freq_in_hz )
{
 800677a:	b580      	push	{r7, lr}
 800677c:	b082      	sub	sp, #8
 800677e:	af00      	add	r7, sp, #0
 8006780:	6078      	str	r0, [r7, #4]
 8006782:	6039      	str	r1, [r7, #0]
    return shield->get_rssi_calibration_table( rf_freq_in_hz );
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	6838      	ldr	r0, [r7, #0]
 800678a:	4798      	blx	r3
 800678c:	4603      	mov	r3, r0
}
 800678e:	4618      	mov	r0, r3
 8006790:	3708      	adds	r7, #8
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}

08006796 <smtc_shield_lr11xx_get_rf_switch_cfg>:
 *
 * @return RF switch configuration
 */
static inline const lr11xx_system_rfswitch_cfg_t* smtc_shield_lr11xx_get_rf_switch_cfg(
    const smtc_shield_lr11xx_t* shield )
{
 8006796:	b580      	push	{r7, lr}
 8006798:	b082      	sub	sp, #8
 800679a:	af00      	add	r7, sp, #0
 800679c:	6078      	str	r0, [r7, #4]
    return shield->get_rf_switch_cfg( );
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	4798      	blx	r3
 80067a4:	4603      	mov	r3, r0
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3708      	adds	r7, #8
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}

080067ae <smtc_shield_lr11xx_get_reg_mode>:
 * @param [in] shield  Pointer to a shield data structure
 *
 * @return Regulator mode
 */
static inline lr11xx_system_reg_mode_t smtc_shield_lr11xx_get_reg_mode( const smtc_shield_lr11xx_t* shield )
{
 80067ae:	b580      	push	{r7, lr}
 80067b0:	b082      	sub	sp, #8
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	6078      	str	r0, [r7, #4]
    return shield->get_reg_mode( );
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	68db      	ldr	r3, [r3, #12]
 80067ba:	4798      	blx	r3
 80067bc:	4603      	mov	r3, r0
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3708      	adds	r7, #8
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}

080067c6 <smtc_shield_lr11xx_get_xosc_cfg>:
 * @param [in] shield  Pointer to a shield data structure
 *
 * @return XOSC configuration
 */
static inline const smtc_shield_lr11xx_xosc_cfg_t* smtc_shield_lr11xx_get_xosc_cfg( const smtc_shield_lr11xx_t* shield )
{
 80067c6:	b580      	push	{r7, lr}
 80067c8:	b082      	sub	sp, #8
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	6078      	str	r0, [r7, #4]
    return shield->get_xosc_cfg( );
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	691b      	ldr	r3, [r3, #16]
 80067d2:	4798      	blx	r3
 80067d4:	4603      	mov	r3, r0
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3708      	adds	r7, #8
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}

080067de <smtc_shield_lr11xx_get_lfclk_cfg>:
 *
 * @return LFCLOCK configuration
 */
static inline const smtc_shield_lr11xx_lfclk_cfg_t* smtc_shield_lr11xx_get_lfclk_cfg(
    const smtc_shield_lr11xx_t* shield )
{
 80067de:	b580      	push	{r7, lr}
 80067e0:	b082      	sub	sp, #8
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
    return shield->get_lfclk_cfg( );
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	695b      	ldr	r3, [r3, #20]
 80067ea:	4798      	blx	r3
 80067ec:	4603      	mov	r3, r0
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3708      	adds	r7, #8
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}

080067f6 <smtc_shield_lr11xx_get_pinout>:
 * @param [in] shield  Pointer to a shield data structure
 *
 * @return Pinout configuration
 */
static inline const smtc_shield_lr11xx_pinout_t* smtc_shield_lr11xx_get_pinout( const smtc_shield_lr11xx_t* shield )
{
 80067f6:	b580      	push	{r7, lr}
 80067f8:	b082      	sub	sp, #8
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	6078      	str	r0, [r7, #4]
    return shield->get_pinout( );
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	699b      	ldr	r3, [r3, #24]
 8006802:	4798      	blx	r3
 8006804:	4603      	mov	r3, r0
}
 8006806:	4618      	mov	r0, r3
 8006808:	3708      	adds	r7, #8
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
	...

08006810 <apps_common_lr11xx_get_context>:
 * -----------------------------------------------------------------------------
 * --- PUBLIC FUNCTIONS DEFINITION ---------------------------------------------
 */

lr11xx_hal_context_t* apps_common_lr11xx_get_context( )
{
 8006810:	b580      	push	{r7, lr}
 8006812:	af00      	add	r7, sp, #0
    context.busy.cfg                 = smtc_shield_pinout_mapping_get_gpio_cfg( SMTC_SHIELD_PINOUT_D3 );
 8006814:	2003      	movs	r0, #3
 8006816:	f7fd fb2d 	bl	8003e74 <smtc_shield_pinout_mapping_get_gpio_cfg>
 800681a:	4603      	mov	r3, r0
 800681c:	4a31      	ldr	r2, [pc, #196]	; (80068e4 <apps_common_lr11xx_get_context+0xd4>)
 800681e:	6353      	str	r3, [r2, #52]	; 0x34
    context.busy.cfg_input.pull_mode = SMTC_HAL_MCU_GPIO_PULL_MODE_NONE;
 8006820:	4b30      	ldr	r3, [pc, #192]	; (80068e4 <apps_common_lr11xx_get_context+0xd4>)
 8006822:	2200      	movs	r2, #0
 8006824:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    context.busy.cfg_input.irq_mode  = SMTC_HAL_MCU_GPIO_IRQ_MODE_OFF;
 8006828:	4b2e      	ldr	r3, [pc, #184]	; (80068e4 <apps_common_lr11xx_get_context+0xd4>)
 800682a:	2200      	movs	r2, #0
 800682c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    context.busy.cfg_input.callback  = NULL;
 8006830:	4b2c      	ldr	r3, [pc, #176]	; (80068e4 <apps_common_lr11xx_get_context+0xd4>)
 8006832:	2200      	movs	r2, #0
 8006834:	63da      	str	r2, [r3, #60]	; 0x3c

    context.irq.cfg                 = smtc_shield_pinout_mapping_get_gpio_cfg( SMTC_SHIELD_PINOUT_D5 );
 8006836:	2005      	movs	r0, #5
 8006838:	f7fd fb1c 	bl	8003e74 <smtc_shield_pinout_mapping_get_gpio_cfg>
 800683c:	4603      	mov	r3, r0
 800683e:	4a29      	ldr	r2, [pc, #164]	; (80068e4 <apps_common_lr11xx_get_context+0xd4>)
 8006840:	6213      	str	r3, [r2, #32]
    context.irq.cfg_input.pull_mode = SMTC_HAL_MCU_GPIO_PULL_MODE_NONE;
 8006842:	4b28      	ldr	r3, [pc, #160]	; (80068e4 <apps_common_lr11xx_get_context+0xd4>)
 8006844:	2200      	movs	r2, #0
 8006846:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    context.irq.cfg_input.irq_mode  = SMTC_HAL_MCU_GPIO_IRQ_MODE_RISING;
 800684a:	4b26      	ldr	r3, [pc, #152]	; (80068e4 <apps_common_lr11xx_get_context+0xd4>)
 800684c:	2201      	movs	r2, #1
 800684e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    context.irq.cfg_input.callback  = radio_on_dio_irq;
 8006852:	4b24      	ldr	r3, [pc, #144]	; (80068e4 <apps_common_lr11xx_get_context+0xd4>)
 8006854:	4a24      	ldr	r2, [pc, #144]	; (80068e8 <apps_common_lr11xx_get_context+0xd8>)
 8006856:	629a      	str	r2, [r3, #40]	; 0x28
    context.irq.cfg_input.context   = NULL;
 8006858:	4b22      	ldr	r3, [pc, #136]	; (80068e4 <apps_common_lr11xx_get_context+0xd4>)
 800685a:	2200      	movs	r2, #0
 800685c:	62da      	str	r2, [r3, #44]	; 0x2c

    context.nss.cfg                      = smtc_shield_pinout_mapping_get_gpio_cfg( SMTC_SHIELD_PINOUT_D7 );
 800685e:	2007      	movs	r0, #7
 8006860:	f7fd fb08 	bl	8003e74 <smtc_shield_pinout_mapping_get_gpio_cfg>
 8006864:	4603      	mov	r3, r0
 8006866:	4a1f      	ldr	r2, [pc, #124]	; (80068e4 <apps_common_lr11xx_get_context+0xd4>)
 8006868:	6093      	str	r3, [r2, #8]
    context.nss.cfg_output.initial_state = SMTC_HAL_MCU_GPIO_STATE_HIGH;
 800686a:	4b1e      	ldr	r3, [pc, #120]	; (80068e4 <apps_common_lr11xx_get_context+0xd4>)
 800686c:	2201      	movs	r2, #1
 800686e:	731a      	strb	r2, [r3, #12]
    context.nss.cfg_output.mode          = SMTC_HAL_MCU_GPIO_OUTPUT_MODE_PUSH_PULL;
 8006870:	4b1c      	ldr	r3, [pc, #112]	; (80068e4 <apps_common_lr11xx_get_context+0xd4>)
 8006872:	2202      	movs	r2, #2
 8006874:	735a      	strb	r2, [r3, #13]

    context.reset.cfg                      = smtc_shield_pinout_mapping_get_gpio_cfg( SMTC_SHIELD_PINOUT_A0 );
 8006876:	2010      	movs	r0, #16
 8006878:	f7fd fafc 	bl	8003e74 <smtc_shield_pinout_mapping_get_gpio_cfg>
 800687c:	4603      	mov	r3, r0
 800687e:	4a19      	ldr	r2, [pc, #100]	; (80068e4 <apps_common_lr11xx_get_context+0xd4>)
 8006880:	6153      	str	r3, [r2, #20]
    context.reset.cfg_output.initial_state = SMTC_HAL_MCU_GPIO_STATE_HIGH;
 8006882:	4b18      	ldr	r3, [pc, #96]	; (80068e4 <apps_common_lr11xx_get_context+0xd4>)
 8006884:	2201      	movs	r2, #1
 8006886:	761a      	strb	r2, [r3, #24]
    context.reset.cfg_output.mode          = SMTC_HAL_MCU_GPIO_OUTPUT_MODE_PUSH_PULL;
 8006888:	4b16      	ldr	r3, [pc, #88]	; (80068e4 <apps_common_lr11xx_get_context+0xd4>)
 800688a:	2202      	movs	r2, #2
 800688c:	765a      	strb	r2, [r3, #25]

    context.spi.cfg.spi = SPI1;
 800688e:	4b15      	ldr	r3, [pc, #84]	; (80068e4 <apps_common_lr11xx_get_context+0xd4>)
 8006890:	4a16      	ldr	r2, [pc, #88]	; (80068ec <apps_common_lr11xx_get_context+0xdc>)
 8006892:	601a      	str	r2, [r3, #0]

    smtc_hal_mcu_gpio_init_input( context.busy.cfg, &( context.busy.cfg_input ), &( context.busy.inst ) );
 8006894:	4b13      	ldr	r3, [pc, #76]	; (80068e4 <apps_common_lr11xx_get_context+0xd4>)
 8006896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006898:	4a15      	ldr	r2, [pc, #84]	; (80068f0 <apps_common_lr11xx_get_context+0xe0>)
 800689a:	4916      	ldr	r1, [pc, #88]	; (80068f4 <apps_common_lr11xx_get_context+0xe4>)
 800689c:	4618      	mov	r0, r3
 800689e:	f7fd fcf9 	bl	8004294 <smtc_hal_mcu_gpio_init_input>
    smtc_hal_mcu_gpio_init_input( context.irq.cfg, &( context.irq.cfg_input ), &( context.irq.inst ) );
 80068a2:	4b10      	ldr	r3, [pc, #64]	; (80068e4 <apps_common_lr11xx_get_context+0xd4>)
 80068a4:	6a1b      	ldr	r3, [r3, #32]
 80068a6:	4a14      	ldr	r2, [pc, #80]	; (80068f8 <apps_common_lr11xx_get_context+0xe8>)
 80068a8:	4914      	ldr	r1, [pc, #80]	; (80068fc <apps_common_lr11xx_get_context+0xec>)
 80068aa:	4618      	mov	r0, r3
 80068ac:	f7fd fcf2 	bl	8004294 <smtc_hal_mcu_gpio_init_input>
    smtc_hal_mcu_gpio_init_output( context.nss.cfg, &( context.nss.cfg_output ), &( context.nss.inst ) );
 80068b0:	4b0c      	ldr	r3, [pc, #48]	; (80068e4 <apps_common_lr11xx_get_context+0xd4>)
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	4a12      	ldr	r2, [pc, #72]	; (8006900 <apps_common_lr11xx_get_context+0xf0>)
 80068b6:	4913      	ldr	r1, [pc, #76]	; (8006904 <apps_common_lr11xx_get_context+0xf4>)
 80068b8:	4618      	mov	r0, r3
 80068ba:	f7fd fc7f 	bl	80041bc <smtc_hal_mcu_gpio_init_output>
    smtc_hal_mcu_gpio_init_output( context.reset.cfg, &( context.reset.cfg_output ), &( context.reset.inst ) );
 80068be:	4b09      	ldr	r3, [pc, #36]	; (80068e4 <apps_common_lr11xx_get_context+0xd4>)
 80068c0:	695b      	ldr	r3, [r3, #20]
 80068c2:	4a11      	ldr	r2, [pc, #68]	; (8006908 <apps_common_lr11xx_get_context+0xf8>)
 80068c4:	4911      	ldr	r1, [pc, #68]	; (800690c <apps_common_lr11xx_get_context+0xfc>)
 80068c6:	4618      	mov	r0, r3
 80068c8:	f7fd fc78 	bl	80041bc <smtc_hal_mcu_gpio_init_output>

    smtc_hal_mcu_gpio_enable_irq( context.irq.inst );
 80068cc:	4b05      	ldr	r3, [pc, #20]	; (80068e4 <apps_common_lr11xx_get_context+0xd4>)
 80068ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068d0:	4618      	mov	r0, r3
 80068d2:	f7fd fe00 	bl	80044d6 <smtc_hal_mcu_gpio_enable_irq>

    smtc_hal_mcu_spi_init( &( context.spi.cfg ), &( context.spi.inst ) );
 80068d6:	490e      	ldr	r1, [pc, #56]	; (8006910 <apps_common_lr11xx_get_context+0x100>)
 80068d8:	4802      	ldr	r0, [pc, #8]	; (80068e4 <apps_common_lr11xx_get_context+0xd4>)
 80068da:	f7fe fad5 	bl	8004e88 <smtc_hal_mcu_spi_init>

    return &context;
 80068de:	4b01      	ldr	r3, [pc, #4]	; (80068e4 <apps_common_lr11xx_get_context+0xd4>)
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	bd80      	pop	{r7, pc}
 80068e4:	20000a9c 	.word	0x20000a9c
 80068e8:	08007e29 	.word	0x08007e29
 80068ec:	40013000 	.word	0x40013000
 80068f0:	20000ae0 	.word	0x20000ae0
 80068f4:	20000ad4 	.word	0x20000ad4
 80068f8:	20000acc 	.word	0x20000acc
 80068fc:	20000ac0 	.word	0x20000ac0
 8006900:	20000aac 	.word	0x20000aac
 8006904:	20000aa8 	.word	0x20000aa8
 8006908:	20000ab8 	.word	0x20000ab8
 800690c:	20000ab4 	.word	0x20000ab4
 8006910:	20000aa0 	.word	0x20000aa0

08006914 <apps_common_shield_init>:

void apps_common_shield_init( void )
{
 8006914:	b580      	push	{r7, lr}
 8006916:	af00      	add	r7, sp, #0
    shield_pinout = smtc_shield_lr11xx_get_pinout( &shield );
 8006918:	4839      	ldr	r0, [pc, #228]	; (8006a00 <apps_common_shield_init+0xec>)
 800691a:	f7ff ff6c 	bl	80067f6 <smtc_shield_lr11xx_get_pinout>
 800691e:	4603      	mov	r3, r0
 8006920:	4a38      	ldr	r2, [pc, #224]	; (8006a04 <apps_common_shield_init+0xf0>)
 8006922:	6013      	str	r3, [r2, #0]

    if( shield_pinout->led_tx != SMTC_SHIELD_PINOUT_NONE )
 8006924:	4b37      	ldr	r3, [pc, #220]	; (8006a04 <apps_common_shield_init+0xf0>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	795b      	ldrb	r3, [r3, #5]
 800692a:	2b16      	cmp	r3, #22
 800692c:	d015      	beq.n	800695a <apps_common_shield_init+0x46>
    {
        led_tx.cfg                      = smtc_shield_pinout_mapping_get_gpio_cfg( shield_pinout->led_tx );
 800692e:	4b35      	ldr	r3, [pc, #212]	; (8006a04 <apps_common_shield_init+0xf0>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	795b      	ldrb	r3, [r3, #5]
 8006934:	4618      	mov	r0, r3
 8006936:	f7fd fa9d 	bl	8003e74 <smtc_shield_pinout_mapping_get_gpio_cfg>
 800693a:	4603      	mov	r3, r0
 800693c:	4a32      	ldr	r2, [pc, #200]	; (8006a08 <apps_common_shield_init+0xf4>)
 800693e:	6013      	str	r3, [r2, #0]
        led_tx.cfg_output.initial_state = SMTC_HAL_MCU_GPIO_STATE_LOW;
 8006940:	4b31      	ldr	r3, [pc, #196]	; (8006a08 <apps_common_shield_init+0xf4>)
 8006942:	2200      	movs	r2, #0
 8006944:	711a      	strb	r2, [r3, #4]
        led_tx.cfg_output.mode          = SMTC_HAL_MCU_GPIO_OUTPUT_MODE_PUSH_PULL;
 8006946:	4b30      	ldr	r3, [pc, #192]	; (8006a08 <apps_common_shield_init+0xf4>)
 8006948:	2202      	movs	r2, #2
 800694a:	715a      	strb	r2, [r3, #5]

        smtc_hal_mcu_gpio_init_output( led_tx.cfg, &( led_tx.cfg_output ), &( led_tx.inst ) );
 800694c:	4b2e      	ldr	r3, [pc, #184]	; (8006a08 <apps_common_shield_init+0xf4>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a2e      	ldr	r2, [pc, #184]	; (8006a0c <apps_common_shield_init+0xf8>)
 8006952:	492f      	ldr	r1, [pc, #188]	; (8006a10 <apps_common_shield_init+0xfc>)
 8006954:	4618      	mov	r0, r3
 8006956:	f7fd fc31 	bl	80041bc <smtc_hal_mcu_gpio_init_output>
    }

    if( shield_pinout->led_rx != SMTC_SHIELD_PINOUT_NONE )
 800695a:	4b2a      	ldr	r3, [pc, #168]	; (8006a04 <apps_common_shield_init+0xf0>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	799b      	ldrb	r3, [r3, #6]
 8006960:	2b16      	cmp	r3, #22
 8006962:	d015      	beq.n	8006990 <apps_common_shield_init+0x7c>
    {
        led_rx.cfg                      = smtc_shield_pinout_mapping_get_gpio_cfg( shield_pinout->led_rx );
 8006964:	4b27      	ldr	r3, [pc, #156]	; (8006a04 <apps_common_shield_init+0xf0>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	799b      	ldrb	r3, [r3, #6]
 800696a:	4618      	mov	r0, r3
 800696c:	f7fd fa82 	bl	8003e74 <smtc_shield_pinout_mapping_get_gpio_cfg>
 8006970:	4603      	mov	r3, r0
 8006972:	4a28      	ldr	r2, [pc, #160]	; (8006a14 <apps_common_shield_init+0x100>)
 8006974:	6013      	str	r3, [r2, #0]
        led_rx.cfg_output.initial_state = SMTC_HAL_MCU_GPIO_STATE_LOW;
 8006976:	4b27      	ldr	r3, [pc, #156]	; (8006a14 <apps_common_shield_init+0x100>)
 8006978:	2200      	movs	r2, #0
 800697a:	711a      	strb	r2, [r3, #4]
        led_rx.cfg_output.mode          = SMTC_HAL_MCU_GPIO_OUTPUT_MODE_PUSH_PULL;
 800697c:	4b25      	ldr	r3, [pc, #148]	; (8006a14 <apps_common_shield_init+0x100>)
 800697e:	2202      	movs	r2, #2
 8006980:	715a      	strb	r2, [r3, #5]

        smtc_hal_mcu_gpio_init_output( led_rx.cfg, &( led_rx.cfg_output ), &( led_rx.inst ) );
 8006982:	4b24      	ldr	r3, [pc, #144]	; (8006a14 <apps_common_shield_init+0x100>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a24      	ldr	r2, [pc, #144]	; (8006a18 <apps_common_shield_init+0x104>)
 8006988:	4924      	ldr	r1, [pc, #144]	; (8006a1c <apps_common_shield_init+0x108>)
 800698a:	4618      	mov	r0, r3
 800698c:	f7fd fc16 	bl	80041bc <smtc_hal_mcu_gpio_init_output>
    }

    if( shield_pinout->led_scan != SMTC_SHIELD_PINOUT_NONE )
 8006990:	4b1c      	ldr	r3, [pc, #112]	; (8006a04 <apps_common_shield_init+0xf0>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	79db      	ldrb	r3, [r3, #7]
 8006996:	2b16      	cmp	r3, #22
 8006998:	d015      	beq.n	80069c6 <apps_common_shield_init+0xb2>
    {
        led_scan.cfg                      = smtc_shield_pinout_mapping_get_gpio_cfg( shield_pinout->led_scan );
 800699a:	4b1a      	ldr	r3, [pc, #104]	; (8006a04 <apps_common_shield_init+0xf0>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	79db      	ldrb	r3, [r3, #7]
 80069a0:	4618      	mov	r0, r3
 80069a2:	f7fd fa67 	bl	8003e74 <smtc_shield_pinout_mapping_get_gpio_cfg>
 80069a6:	4603      	mov	r3, r0
 80069a8:	4a1d      	ldr	r2, [pc, #116]	; (8006a20 <apps_common_shield_init+0x10c>)
 80069aa:	6013      	str	r3, [r2, #0]
        led_scan.cfg_output.initial_state = SMTC_HAL_MCU_GPIO_STATE_LOW;
 80069ac:	4b1c      	ldr	r3, [pc, #112]	; (8006a20 <apps_common_shield_init+0x10c>)
 80069ae:	2200      	movs	r2, #0
 80069b0:	711a      	strb	r2, [r3, #4]
        led_scan.cfg_output.mode          = SMTC_HAL_MCU_GPIO_OUTPUT_MODE_PUSH_PULL;
 80069b2:	4b1b      	ldr	r3, [pc, #108]	; (8006a20 <apps_common_shield_init+0x10c>)
 80069b4:	2202      	movs	r2, #2
 80069b6:	715a      	strb	r2, [r3, #5]

        smtc_hal_mcu_gpio_init_output( led_scan.cfg, &( led_scan.cfg_output ), &( led_scan.inst ) );
 80069b8:	4b19      	ldr	r3, [pc, #100]	; (8006a20 <apps_common_shield_init+0x10c>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a19      	ldr	r2, [pc, #100]	; (8006a24 <apps_common_shield_init+0x110>)
 80069be:	491a      	ldr	r1, [pc, #104]	; (8006a28 <apps_common_shield_init+0x114>)
 80069c0:	4618      	mov	r0, r3
 80069c2:	f7fd fbfb 	bl	80041bc <smtc_hal_mcu_gpio_init_output>
    }

    if( shield_pinout->lna != SMTC_SHIELD_PINOUT_NONE )
 80069c6:	4b0f      	ldr	r3, [pc, #60]	; (8006a04 <apps_common_shield_init+0xf0>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	791b      	ldrb	r3, [r3, #4]
 80069cc:	2b16      	cmp	r3, #22
 80069ce:	d015      	beq.n	80069fc <apps_common_shield_init+0xe8>
    {
        lna_ctrl.cfg                      = smtc_shield_pinout_mapping_get_gpio_cfg( shield_pinout->lna );
 80069d0:	4b0c      	ldr	r3, [pc, #48]	; (8006a04 <apps_common_shield_init+0xf0>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	791b      	ldrb	r3, [r3, #4]
 80069d6:	4618      	mov	r0, r3
 80069d8:	f7fd fa4c 	bl	8003e74 <smtc_shield_pinout_mapping_get_gpio_cfg>
 80069dc:	4603      	mov	r3, r0
 80069de:	4a13      	ldr	r2, [pc, #76]	; (8006a2c <apps_common_shield_init+0x118>)
 80069e0:	6013      	str	r3, [r2, #0]
        lna_ctrl.cfg_output.initial_state = SMTC_HAL_MCU_GPIO_STATE_LOW;
 80069e2:	4b12      	ldr	r3, [pc, #72]	; (8006a2c <apps_common_shield_init+0x118>)
 80069e4:	2200      	movs	r2, #0
 80069e6:	711a      	strb	r2, [r3, #4]
        lna_ctrl.cfg_output.mode          = SMTC_HAL_MCU_GPIO_OUTPUT_MODE_PUSH_PULL;
 80069e8:	4b10      	ldr	r3, [pc, #64]	; (8006a2c <apps_common_shield_init+0x118>)
 80069ea:	2202      	movs	r2, #2
 80069ec:	715a      	strb	r2, [r3, #5]

        smtc_hal_mcu_gpio_init_output( lna_ctrl.cfg, &( lna_ctrl.cfg_output ), &( lna_ctrl.inst ) );
 80069ee:	4b0f      	ldr	r3, [pc, #60]	; (8006a2c <apps_common_shield_init+0x118>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a0f      	ldr	r2, [pc, #60]	; (8006a30 <apps_common_shield_init+0x11c>)
 80069f4:	490f      	ldr	r1, [pc, #60]	; (8006a34 <apps_common_shield_init+0x120>)
 80069f6:	4618      	mov	r0, r3
 80069f8:	f7fd fbe0 	bl	80041bc <smtc_hal_mcu_gpio_init_output>
    }
}
 80069fc:	bf00      	nop
 80069fe:	bd80      	pop	{r7, pc}
 8006a00:	2000000c 	.word	0x2000000c
 8006a04:	20000ae8 	.word	0x20000ae8
 8006a08:	20000aec 	.word	0x20000aec
 8006a0c:	20000af4 	.word	0x20000af4
 8006a10:	20000af0 	.word	0x20000af0
 8006a14:	20000af8 	.word	0x20000af8
 8006a18:	20000b00 	.word	0x20000b00
 8006a1c:	20000afc 	.word	0x20000afc
 8006a20:	20000b04 	.word	0x20000b04
 8006a24:	20000b0c 	.word	0x20000b0c
 8006a28:	20000b08 	.word	0x20000b08
 8006a2c:	20000b10 	.word	0x20000b10
 8006a30:	20000b18 	.word	0x20000b18
 8006a34:	20000b14 	.word	0x20000b14

08006a38 <apps_common_lr11xx_system_init>:

void apps_common_lr11xx_system_init( const lr11xx_hal_context_t* context )
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b08c      	sub	sp, #48	; 0x30
 8006a3c:	af02      	add	r7, sp, #8
 8006a3e:	6078      	str	r0, [r7, #4]
    ASSERT_LR11XX_RC( lr11xx_system_reset( ( void* ) context ) );
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f002 f85c 	bl	8008afe <lr11xx_system_reset>
 8006a46:	4603      	mov	r3, r0
 8006a48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006a4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d01d      	beq.n	8006a90 <apps_common_lr11xx_system_init+0x58>
 8006a54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a58:	2b03      	cmp	r3, #3
 8006a5a:	d119      	bne.n	8006a90 <apps_common_lr11xx_system_init+0x58>
 8006a5c:	48af      	ldr	r0, [pc, #700]	; (8006d1c <apps_common_lr11xx_system_init+0x2e4>)
 8006a5e:	f7fd f9f7 	bl	8003e50 <hal_mcu_trace_print>
 8006a62:	48af      	ldr	r0, [pc, #700]	; (8006d20 <apps_common_lr11xx_system_init+0x2e8>)
 8006a64:	f7fd f9f4 	bl	8003e50 <hal_mcu_trace_print>
 8006a68:	f240 115d 	movw	r1, #349	; 0x15d
 8006a6c:	48ad      	ldr	r0, [pc, #692]	; (8006d24 <apps_common_lr11xx_system_init+0x2ec>)
 8006a6e:	f7fd f9ef 	bl	8003e50 <hal_mcu_trace_print>
 8006a72:	48ad      	ldr	r0, [pc, #692]	; (8006d28 <apps_common_lr11xx_system_init+0x2f0>)
 8006a74:	f7fd f9ec 	bl	8003e50 <hal_mcu_trace_print>
 8006a78:	4bac      	ldr	r3, [pc, #688]	; (8006d2c <apps_common_lr11xx_system_init+0x2f4>)
 8006a7a:	9300      	str	r3, [sp, #0]
 8006a7c:	f240 135d 	movw	r3, #349	; 0x15d
 8006a80:	4aab      	ldr	r2, [pc, #684]	; (8006d30 <apps_common_lr11xx_system_init+0x2f8>)
 8006a82:	49ac      	ldr	r1, [pc, #688]	; (8006d34 <apps_common_lr11xx_system_init+0x2fc>)
 8006a84:	48ac      	ldr	r0, [pc, #688]	; (8006d38 <apps_common_lr11xx_system_init+0x300>)
 8006a86:	f7fd f9e3 	bl	8003e50 <hal_mcu_trace_print>
 8006a8a:	48ac      	ldr	r0, [pc, #688]	; (8006d3c <apps_common_lr11xx_system_init+0x304>)
 8006a8c:	f7fd f9e0 	bl	8003e50 <hal_mcu_trace_print>

    // Configure the regulator
    const lr11xx_system_reg_mode_t regulator = smtc_shield_lr11xx_get_reg_mode( &shield );
 8006a90:	48ab      	ldr	r0, [pc, #684]	; (8006d40 <apps_common_lr11xx_system_init+0x308>)
 8006a92:	f7ff fe8c 	bl	80067ae <smtc_shield_lr11xx_get_reg_mode>
 8006a96:	4603      	mov	r3, r0
 8006a98:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    ASSERT_LR11XX_RC( lr11xx_system_set_reg_mode( ( void* ) context, regulator ) );
 8006a9c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006aa0:	4619      	mov	r1, r3
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f002 f8f1 	bl	8008c8a <lr11xx_system_set_reg_mode>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8006aae:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d01d      	beq.n	8006af2 <apps_common_lr11xx_system_init+0xba>
 8006ab6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006aba:	2b03      	cmp	r3, #3
 8006abc:	d119      	bne.n	8006af2 <apps_common_lr11xx_system_init+0xba>
 8006abe:	4897      	ldr	r0, [pc, #604]	; (8006d1c <apps_common_lr11xx_system_init+0x2e4>)
 8006ac0:	f7fd f9c6 	bl	8003e50 <hal_mcu_trace_print>
 8006ac4:	4896      	ldr	r0, [pc, #600]	; (8006d20 <apps_common_lr11xx_system_init+0x2e8>)
 8006ac6:	f7fd f9c3 	bl	8003e50 <hal_mcu_trace_print>
 8006aca:	f240 1161 	movw	r1, #353	; 0x161
 8006ace:	4895      	ldr	r0, [pc, #596]	; (8006d24 <apps_common_lr11xx_system_init+0x2ec>)
 8006ad0:	f7fd f9be 	bl	8003e50 <hal_mcu_trace_print>
 8006ad4:	4894      	ldr	r0, [pc, #592]	; (8006d28 <apps_common_lr11xx_system_init+0x2f0>)
 8006ad6:	f7fd f9bb 	bl	8003e50 <hal_mcu_trace_print>
 8006ada:	4b94      	ldr	r3, [pc, #592]	; (8006d2c <apps_common_lr11xx_system_init+0x2f4>)
 8006adc:	9300      	str	r3, [sp, #0]
 8006ade:	f240 1361 	movw	r3, #353	; 0x161
 8006ae2:	4a93      	ldr	r2, [pc, #588]	; (8006d30 <apps_common_lr11xx_system_init+0x2f8>)
 8006ae4:	4993      	ldr	r1, [pc, #588]	; (8006d34 <apps_common_lr11xx_system_init+0x2fc>)
 8006ae6:	4894      	ldr	r0, [pc, #592]	; (8006d38 <apps_common_lr11xx_system_init+0x300>)
 8006ae8:	f7fd f9b2 	bl	8003e50 <hal_mcu_trace_print>
 8006aec:	4893      	ldr	r0, [pc, #588]	; (8006d3c <apps_common_lr11xx_system_init+0x304>)
 8006aee:	f7fd f9af 	bl	8003e50 <hal_mcu_trace_print>

    const lr11xx_system_rfswitch_cfg_t* rf_switch_setup = smtc_shield_lr11xx_get_rf_switch_cfg( &shield );
 8006af2:	4893      	ldr	r0, [pc, #588]	; (8006d40 <apps_common_lr11xx_system_init+0x308>)
 8006af4:	f7ff fe4f 	bl	8006796 <smtc_shield_lr11xx_get_rf_switch_cfg>
 8006af8:	6238      	str	r0, [r7, #32]
    ASSERT_LR11XX_RC( lr11xx_system_set_dio_as_rf_switch( context, rf_switch_setup ) );
 8006afa:	6a39      	ldr	r1, [r7, #32]
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f002 f8de 	bl	8008cbe <lr11xx_system_set_dio_as_rf_switch>
 8006b02:	4603      	mov	r3, r0
 8006b04:	77fb      	strb	r3, [r7, #31]
 8006b06:	7ffb      	ldrb	r3, [r7, #31]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d01c      	beq.n	8006b46 <apps_common_lr11xx_system_init+0x10e>
 8006b0c:	7ffb      	ldrb	r3, [r7, #31]
 8006b0e:	2b03      	cmp	r3, #3
 8006b10:	d119      	bne.n	8006b46 <apps_common_lr11xx_system_init+0x10e>
 8006b12:	4882      	ldr	r0, [pc, #520]	; (8006d1c <apps_common_lr11xx_system_init+0x2e4>)
 8006b14:	f7fd f99c 	bl	8003e50 <hal_mcu_trace_print>
 8006b18:	4881      	ldr	r0, [pc, #516]	; (8006d20 <apps_common_lr11xx_system_init+0x2e8>)
 8006b1a:	f7fd f999 	bl	8003e50 <hal_mcu_trace_print>
 8006b1e:	f44f 71b2 	mov.w	r1, #356	; 0x164
 8006b22:	4880      	ldr	r0, [pc, #512]	; (8006d24 <apps_common_lr11xx_system_init+0x2ec>)
 8006b24:	f7fd f994 	bl	8003e50 <hal_mcu_trace_print>
 8006b28:	487f      	ldr	r0, [pc, #508]	; (8006d28 <apps_common_lr11xx_system_init+0x2f0>)
 8006b2a:	f7fd f991 	bl	8003e50 <hal_mcu_trace_print>
 8006b2e:	4b7f      	ldr	r3, [pc, #508]	; (8006d2c <apps_common_lr11xx_system_init+0x2f4>)
 8006b30:	9300      	str	r3, [sp, #0]
 8006b32:	f44f 73b2 	mov.w	r3, #356	; 0x164
 8006b36:	4a7e      	ldr	r2, [pc, #504]	; (8006d30 <apps_common_lr11xx_system_init+0x2f8>)
 8006b38:	497e      	ldr	r1, [pc, #504]	; (8006d34 <apps_common_lr11xx_system_init+0x2fc>)
 8006b3a:	487f      	ldr	r0, [pc, #508]	; (8006d38 <apps_common_lr11xx_system_init+0x300>)
 8006b3c:	f7fd f988 	bl	8003e50 <hal_mcu_trace_print>
 8006b40:	487e      	ldr	r0, [pc, #504]	; (8006d3c <apps_common_lr11xx_system_init+0x304>)
 8006b42:	f7fd f985 	bl	8003e50 <hal_mcu_trace_print>

    const smtc_shield_lr11xx_xosc_cfg_t* tcxo_cfg = smtc_shield_lr11xx_get_xosc_cfg( &shield );
 8006b46:	487e      	ldr	r0, [pc, #504]	; (8006d40 <apps_common_lr11xx_system_init+0x308>)
 8006b48:	f7ff fe3d 	bl	80067c6 <smtc_shield_lr11xx_get_xosc_cfg>
 8006b4c:	61b8      	str	r0, [r7, #24]
    if( tcxo_cfg->has_tcxo == true )
 8006b4e:	69bb      	ldr	r3, [r7, #24]
 8006b50:	781b      	ldrb	r3, [r3, #0]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d029      	beq.n	8006baa <apps_common_lr11xx_system_init+0x172>
    {
        ASSERT_LR11XX_RC( lr11xx_system_set_tcxo_mode( context, tcxo_cfg->supply, tcxo_cfg->startup_time_in_tick ) );
 8006b56:	69bb      	ldr	r3, [r7, #24]
 8006b58:	7859      	ldrb	r1, [r3, #1]
 8006b5a:	69bb      	ldr	r3, [r7, #24]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	461a      	mov	r2, r3
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f002 f984 	bl	8008e6e <lr11xx_system_set_tcxo_mode>
 8006b66:	4603      	mov	r3, r0
 8006b68:	75fb      	strb	r3, [r7, #23]
 8006b6a:	7dfb      	ldrb	r3, [r7, #23]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d01c      	beq.n	8006baa <apps_common_lr11xx_system_init+0x172>
 8006b70:	7dfb      	ldrb	r3, [r7, #23]
 8006b72:	2b03      	cmp	r3, #3
 8006b74:	d119      	bne.n	8006baa <apps_common_lr11xx_system_init+0x172>
 8006b76:	4869      	ldr	r0, [pc, #420]	; (8006d1c <apps_common_lr11xx_system_init+0x2e4>)
 8006b78:	f7fd f96a 	bl	8003e50 <hal_mcu_trace_print>
 8006b7c:	4868      	ldr	r0, [pc, #416]	; (8006d20 <apps_common_lr11xx_system_init+0x2e8>)
 8006b7e:	f7fd f967 	bl	8003e50 <hal_mcu_trace_print>
 8006b82:	f240 1169 	movw	r1, #361	; 0x169
 8006b86:	4867      	ldr	r0, [pc, #412]	; (8006d24 <apps_common_lr11xx_system_init+0x2ec>)
 8006b88:	f7fd f962 	bl	8003e50 <hal_mcu_trace_print>
 8006b8c:	4866      	ldr	r0, [pc, #408]	; (8006d28 <apps_common_lr11xx_system_init+0x2f0>)
 8006b8e:	f7fd f95f 	bl	8003e50 <hal_mcu_trace_print>
 8006b92:	4b66      	ldr	r3, [pc, #408]	; (8006d2c <apps_common_lr11xx_system_init+0x2f4>)
 8006b94:	9300      	str	r3, [sp, #0]
 8006b96:	f240 1369 	movw	r3, #361	; 0x169
 8006b9a:	4a65      	ldr	r2, [pc, #404]	; (8006d30 <apps_common_lr11xx_system_init+0x2f8>)
 8006b9c:	4965      	ldr	r1, [pc, #404]	; (8006d34 <apps_common_lr11xx_system_init+0x2fc>)
 8006b9e:	4866      	ldr	r0, [pc, #408]	; (8006d38 <apps_common_lr11xx_system_init+0x300>)
 8006ba0:	f7fd f956 	bl	8003e50 <hal_mcu_trace_print>
 8006ba4:	4865      	ldr	r0, [pc, #404]	; (8006d3c <apps_common_lr11xx_system_init+0x304>)
 8006ba6:	f7fd f953 	bl	8003e50 <hal_mcu_trace_print>
    }

    const smtc_shield_lr11xx_lfclk_cfg_t* lfclk_cfg = smtc_shield_lr11xx_get_lfclk_cfg( &shield );
 8006baa:	4865      	ldr	r0, [pc, #404]	; (8006d40 <apps_common_lr11xx_system_init+0x308>)
 8006bac:	f7ff fe17 	bl	80067de <smtc_shield_lr11xx_get_lfclk_cfg>
 8006bb0:	6138      	str	r0, [r7, #16]
    ASSERT_LR11XX_RC( lr11xx_system_cfg_lfclk( context, lfclk_cfg->lf_clk_cfg, lfclk_cfg->wait_32k_ready ) );
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	7819      	ldrb	r1, [r3, #0]
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	785b      	ldrb	r3, [r3, #1]
 8006bba:	461a      	mov	r2, r3
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f002 f933 	bl	8008e28 <lr11xx_system_cfg_lfclk>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	73fb      	strb	r3, [r7, #15]
 8006bc6:	7bfb      	ldrb	r3, [r7, #15]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d01c      	beq.n	8006c06 <apps_common_lr11xx_system_init+0x1ce>
 8006bcc:	7bfb      	ldrb	r3, [r7, #15]
 8006bce:	2b03      	cmp	r3, #3
 8006bd0:	d119      	bne.n	8006c06 <apps_common_lr11xx_system_init+0x1ce>
 8006bd2:	4852      	ldr	r0, [pc, #328]	; (8006d1c <apps_common_lr11xx_system_init+0x2e4>)
 8006bd4:	f7fd f93c 	bl	8003e50 <hal_mcu_trace_print>
 8006bd8:	4851      	ldr	r0, [pc, #324]	; (8006d20 <apps_common_lr11xx_system_init+0x2e8>)
 8006bda:	f7fd f939 	bl	8003e50 <hal_mcu_trace_print>
 8006bde:	f240 116d 	movw	r1, #365	; 0x16d
 8006be2:	4850      	ldr	r0, [pc, #320]	; (8006d24 <apps_common_lr11xx_system_init+0x2ec>)
 8006be4:	f7fd f934 	bl	8003e50 <hal_mcu_trace_print>
 8006be8:	484f      	ldr	r0, [pc, #316]	; (8006d28 <apps_common_lr11xx_system_init+0x2f0>)
 8006bea:	f7fd f931 	bl	8003e50 <hal_mcu_trace_print>
 8006bee:	4b4f      	ldr	r3, [pc, #316]	; (8006d2c <apps_common_lr11xx_system_init+0x2f4>)
 8006bf0:	9300      	str	r3, [sp, #0]
 8006bf2:	f240 136d 	movw	r3, #365	; 0x16d
 8006bf6:	4a4e      	ldr	r2, [pc, #312]	; (8006d30 <apps_common_lr11xx_system_init+0x2f8>)
 8006bf8:	494e      	ldr	r1, [pc, #312]	; (8006d34 <apps_common_lr11xx_system_init+0x2fc>)
 8006bfa:	484f      	ldr	r0, [pc, #316]	; (8006d38 <apps_common_lr11xx_system_init+0x300>)
 8006bfc:	f7fd f928 	bl	8003e50 <hal_mcu_trace_print>
 8006c00:	484e      	ldr	r0, [pc, #312]	; (8006d3c <apps_common_lr11xx_system_init+0x304>)
 8006c02:	f7fd f925 	bl	8003e50 <hal_mcu_trace_print>

    ASSERT_LR11XX_RC( lr11xx_system_clear_errors( context ) );
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f002 f810 	bl	8008c2c <lr11xx_system_clear_errors>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	73bb      	strb	r3, [r7, #14]
 8006c10:	7bbb      	ldrb	r3, [r7, #14]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d01c      	beq.n	8006c50 <apps_common_lr11xx_system_init+0x218>
 8006c16:	7bbb      	ldrb	r3, [r7, #14]
 8006c18:	2b03      	cmp	r3, #3
 8006c1a:	d119      	bne.n	8006c50 <apps_common_lr11xx_system_init+0x218>
 8006c1c:	483f      	ldr	r0, [pc, #252]	; (8006d1c <apps_common_lr11xx_system_init+0x2e4>)
 8006c1e:	f7fd f917 	bl	8003e50 <hal_mcu_trace_print>
 8006c22:	483f      	ldr	r0, [pc, #252]	; (8006d20 <apps_common_lr11xx_system_init+0x2e8>)
 8006c24:	f7fd f914 	bl	8003e50 <hal_mcu_trace_print>
 8006c28:	f240 116f 	movw	r1, #367	; 0x16f
 8006c2c:	483d      	ldr	r0, [pc, #244]	; (8006d24 <apps_common_lr11xx_system_init+0x2ec>)
 8006c2e:	f7fd f90f 	bl	8003e50 <hal_mcu_trace_print>
 8006c32:	483d      	ldr	r0, [pc, #244]	; (8006d28 <apps_common_lr11xx_system_init+0x2f0>)
 8006c34:	f7fd f90c 	bl	8003e50 <hal_mcu_trace_print>
 8006c38:	4b3c      	ldr	r3, [pc, #240]	; (8006d2c <apps_common_lr11xx_system_init+0x2f4>)
 8006c3a:	9300      	str	r3, [sp, #0]
 8006c3c:	f240 136f 	movw	r3, #367	; 0x16f
 8006c40:	4a3b      	ldr	r2, [pc, #236]	; (8006d30 <apps_common_lr11xx_system_init+0x2f8>)
 8006c42:	493c      	ldr	r1, [pc, #240]	; (8006d34 <apps_common_lr11xx_system_init+0x2fc>)
 8006c44:	483c      	ldr	r0, [pc, #240]	; (8006d38 <apps_common_lr11xx_system_init+0x300>)
 8006c46:	f7fd f903 	bl	8003e50 <hal_mcu_trace_print>
 8006c4a:	483c      	ldr	r0, [pc, #240]	; (8006d3c <apps_common_lr11xx_system_init+0x304>)
 8006c4c:	f7fd f900 	bl	8003e50 <hal_mcu_trace_print>
    ASSERT_LR11XX_RC( lr11xx_system_calibrate( context, 0x3F ) );
 8006c50:	213f      	movs	r1, #63	; 0x3f
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f001 ffff 	bl	8008c56 <lr11xx_system_calibrate>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	737b      	strb	r3, [r7, #13]
 8006c5c:	7b7b      	ldrb	r3, [r7, #13]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d01c      	beq.n	8006c9c <apps_common_lr11xx_system_init+0x264>
 8006c62:	7b7b      	ldrb	r3, [r7, #13]
 8006c64:	2b03      	cmp	r3, #3
 8006c66:	d119      	bne.n	8006c9c <apps_common_lr11xx_system_init+0x264>
 8006c68:	482c      	ldr	r0, [pc, #176]	; (8006d1c <apps_common_lr11xx_system_init+0x2e4>)
 8006c6a:	f7fd f8f1 	bl	8003e50 <hal_mcu_trace_print>
 8006c6e:	482c      	ldr	r0, [pc, #176]	; (8006d20 <apps_common_lr11xx_system_init+0x2e8>)
 8006c70:	f7fd f8ee 	bl	8003e50 <hal_mcu_trace_print>
 8006c74:	f44f 71b8 	mov.w	r1, #368	; 0x170
 8006c78:	482a      	ldr	r0, [pc, #168]	; (8006d24 <apps_common_lr11xx_system_init+0x2ec>)
 8006c7a:	f7fd f8e9 	bl	8003e50 <hal_mcu_trace_print>
 8006c7e:	482a      	ldr	r0, [pc, #168]	; (8006d28 <apps_common_lr11xx_system_init+0x2f0>)
 8006c80:	f7fd f8e6 	bl	8003e50 <hal_mcu_trace_print>
 8006c84:	4b29      	ldr	r3, [pc, #164]	; (8006d2c <apps_common_lr11xx_system_init+0x2f4>)
 8006c86:	9300      	str	r3, [sp, #0]
 8006c88:	f44f 73b8 	mov.w	r3, #368	; 0x170
 8006c8c:	4a28      	ldr	r2, [pc, #160]	; (8006d30 <apps_common_lr11xx_system_init+0x2f8>)
 8006c8e:	4929      	ldr	r1, [pc, #164]	; (8006d34 <apps_common_lr11xx_system_init+0x2fc>)
 8006c90:	4829      	ldr	r0, [pc, #164]	; (8006d38 <apps_common_lr11xx_system_init+0x300>)
 8006c92:	f7fd f8dd 	bl	8003e50 <hal_mcu_trace_print>
 8006c96:	4829      	ldr	r0, [pc, #164]	; (8006d3c <apps_common_lr11xx_system_init+0x304>)
 8006c98:	f7fd f8da 	bl	8003e50 <hal_mcu_trace_print>

    uint16_t errors;
    ASSERT_LR11XX_RC( lr11xx_system_get_errors( context, &errors ) );
 8006c9c:	f107 0308 	add.w	r3, r7, #8
 8006ca0:	4619      	mov	r1, r3
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f001 ff9a 	bl	8008bdc <lr11xx_system_get_errors>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	733b      	strb	r3, [r7, #12]
 8006cac:	7b3b      	ldrb	r3, [r7, #12]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d01c      	beq.n	8006cec <apps_common_lr11xx_system_init+0x2b4>
 8006cb2:	7b3b      	ldrb	r3, [r7, #12]
 8006cb4:	2b03      	cmp	r3, #3
 8006cb6:	d119      	bne.n	8006cec <apps_common_lr11xx_system_init+0x2b4>
 8006cb8:	4818      	ldr	r0, [pc, #96]	; (8006d1c <apps_common_lr11xx_system_init+0x2e4>)
 8006cba:	f7fd f8c9 	bl	8003e50 <hal_mcu_trace_print>
 8006cbe:	4818      	ldr	r0, [pc, #96]	; (8006d20 <apps_common_lr11xx_system_init+0x2e8>)
 8006cc0:	f7fd f8c6 	bl	8003e50 <hal_mcu_trace_print>
 8006cc4:	f240 1173 	movw	r1, #371	; 0x173
 8006cc8:	4816      	ldr	r0, [pc, #88]	; (8006d24 <apps_common_lr11xx_system_init+0x2ec>)
 8006cca:	f7fd f8c1 	bl	8003e50 <hal_mcu_trace_print>
 8006cce:	4816      	ldr	r0, [pc, #88]	; (8006d28 <apps_common_lr11xx_system_init+0x2f0>)
 8006cd0:	f7fd f8be 	bl	8003e50 <hal_mcu_trace_print>
 8006cd4:	4b15      	ldr	r3, [pc, #84]	; (8006d2c <apps_common_lr11xx_system_init+0x2f4>)
 8006cd6:	9300      	str	r3, [sp, #0]
 8006cd8:	f240 1373 	movw	r3, #371	; 0x173
 8006cdc:	4a14      	ldr	r2, [pc, #80]	; (8006d30 <apps_common_lr11xx_system_init+0x2f8>)
 8006cde:	4915      	ldr	r1, [pc, #84]	; (8006d34 <apps_common_lr11xx_system_init+0x2fc>)
 8006ce0:	4815      	ldr	r0, [pc, #84]	; (8006d38 <apps_common_lr11xx_system_init+0x300>)
 8006ce2:	f7fd f8b5 	bl	8003e50 <hal_mcu_trace_print>
 8006ce6:	4815      	ldr	r0, [pc, #84]	; (8006d3c <apps_common_lr11xx_system_init+0x304>)
 8006ce8:	f7fd f8b2 	bl	8003e50 <hal_mcu_trace_print>
    ASSERT_LR11XX_RC( lr11xx_system_clear_errors( context ) );
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f001 ff9d 	bl	8008c2c <lr11xx_system_clear_errors>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	72fb      	strb	r3, [r7, #11]
 8006cf6:	7afb      	ldrb	r3, [r7, #11]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d032      	beq.n	8006d62 <apps_common_lr11xx_system_init+0x32a>
 8006cfc:	7afb      	ldrb	r3, [r7, #11]
 8006cfe:	2b03      	cmp	r3, #3
 8006d00:	d12f      	bne.n	8006d62 <apps_common_lr11xx_system_init+0x32a>
 8006d02:	4806      	ldr	r0, [pc, #24]	; (8006d1c <apps_common_lr11xx_system_init+0x2e4>)
 8006d04:	f7fd f8a4 	bl	8003e50 <hal_mcu_trace_print>
 8006d08:	4805      	ldr	r0, [pc, #20]	; (8006d20 <apps_common_lr11xx_system_init+0x2e8>)
 8006d0a:	f7fd f8a1 	bl	8003e50 <hal_mcu_trace_print>
 8006d0e:	f44f 71ba 	mov.w	r1, #372	; 0x174
 8006d12:	4804      	ldr	r0, [pc, #16]	; (8006d24 <apps_common_lr11xx_system_init+0x2ec>)
 8006d14:	f7fd f89c 	bl	8003e50 <hal_mcu_trace_print>
 8006d18:	e014      	b.n	8006d44 <apps_common_lr11xx_system_init+0x30c>
 8006d1a:	bf00      	nop
 8006d1c:	0800bf68 	.word	0x0800bf68
 8006d20:	0800bf70 	.word	0x0800bf70
 8006d24:	0800bf80 	.word	0x0800bf80
 8006d28:	0800bf88 	.word	0x0800bf88
 8006d2c:	0800bff4 	.word	0x0800bff4
 8006d30:	0800daa8 	.word	0x0800daa8
 8006d34:	0800bf90 	.word	0x0800bf90
 8006d38:	0800bfd8 	.word	0x0800bfd8
 8006d3c:	0800c008 	.word	0x0800c008
 8006d40:	2000000c 	.word	0x2000000c
 8006d44:	481c      	ldr	r0, [pc, #112]	; (8006db8 <apps_common_lr11xx_system_init+0x380>)
 8006d46:	f7fd f883 	bl	8003e50 <hal_mcu_trace_print>
 8006d4a:	4b1c      	ldr	r3, [pc, #112]	; (8006dbc <apps_common_lr11xx_system_init+0x384>)
 8006d4c:	9300      	str	r3, [sp, #0]
 8006d4e:	f44f 73ba 	mov.w	r3, #372	; 0x174
 8006d52:	4a1b      	ldr	r2, [pc, #108]	; (8006dc0 <apps_common_lr11xx_system_init+0x388>)
 8006d54:	491b      	ldr	r1, [pc, #108]	; (8006dc4 <apps_common_lr11xx_system_init+0x38c>)
 8006d56:	481c      	ldr	r0, [pc, #112]	; (8006dc8 <apps_common_lr11xx_system_init+0x390>)
 8006d58:	f7fd f87a 	bl	8003e50 <hal_mcu_trace_print>
 8006d5c:	481b      	ldr	r0, [pc, #108]	; (8006dcc <apps_common_lr11xx_system_init+0x394>)
 8006d5e:	f7fd f877 	bl	8003e50 <hal_mcu_trace_print>
    ASSERT_LR11XX_RC( lr11xx_system_clear_irq_status( context, LR11XX_SYSTEM_IRQ_ALL_MASK ) );
 8006d62:	491b      	ldr	r1, [pc, #108]	; (8006dd0 <apps_common_lr11xx_system_init+0x398>)
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f002 f80f 	bl	8008d88 <lr11xx_system_clear_irq_status>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	72bb      	strb	r3, [r7, #10]
 8006d6e:	7abb      	ldrb	r3, [r7, #10]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d01c      	beq.n	8006dae <apps_common_lr11xx_system_init+0x376>
 8006d74:	7abb      	ldrb	r3, [r7, #10]
 8006d76:	2b03      	cmp	r3, #3
 8006d78:	d119      	bne.n	8006dae <apps_common_lr11xx_system_init+0x376>
 8006d7a:	4816      	ldr	r0, [pc, #88]	; (8006dd4 <apps_common_lr11xx_system_init+0x39c>)
 8006d7c:	f7fd f868 	bl	8003e50 <hal_mcu_trace_print>
 8006d80:	4815      	ldr	r0, [pc, #84]	; (8006dd8 <apps_common_lr11xx_system_init+0x3a0>)
 8006d82:	f7fd f865 	bl	8003e50 <hal_mcu_trace_print>
 8006d86:	f240 1175 	movw	r1, #373	; 0x175
 8006d8a:	4814      	ldr	r0, [pc, #80]	; (8006ddc <apps_common_lr11xx_system_init+0x3a4>)
 8006d8c:	f7fd f860 	bl	8003e50 <hal_mcu_trace_print>
 8006d90:	4809      	ldr	r0, [pc, #36]	; (8006db8 <apps_common_lr11xx_system_init+0x380>)
 8006d92:	f7fd f85d 	bl	8003e50 <hal_mcu_trace_print>
 8006d96:	4b09      	ldr	r3, [pc, #36]	; (8006dbc <apps_common_lr11xx_system_init+0x384>)
 8006d98:	9300      	str	r3, [sp, #0]
 8006d9a:	f240 1375 	movw	r3, #373	; 0x175
 8006d9e:	4a08      	ldr	r2, [pc, #32]	; (8006dc0 <apps_common_lr11xx_system_init+0x388>)
 8006da0:	4908      	ldr	r1, [pc, #32]	; (8006dc4 <apps_common_lr11xx_system_init+0x38c>)
 8006da2:	4809      	ldr	r0, [pc, #36]	; (8006dc8 <apps_common_lr11xx_system_init+0x390>)
 8006da4:	f7fd f854 	bl	8003e50 <hal_mcu_trace_print>
 8006da8:	4808      	ldr	r0, [pc, #32]	; (8006dcc <apps_common_lr11xx_system_init+0x394>)
 8006daa:	f7fd f851 	bl	8003e50 <hal_mcu_trace_print>
}
 8006dae:	bf00      	nop
 8006db0:	3728      	adds	r7, #40	; 0x28
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}
 8006db6:	bf00      	nop
 8006db8:	0800bf88 	.word	0x0800bf88
 8006dbc:	0800bff4 	.word	0x0800bff4
 8006dc0:	0800daa8 	.word	0x0800daa8
 8006dc4:	0800bf90 	.word	0x0800bf90
 8006dc8:	0800bfd8 	.word	0x0800bfd8
 8006dcc:	0800c008 	.word	0x0800c008
 8006dd0:	0bffcffc 	.word	0x0bffcffc
 8006dd4:	0800bf68 	.word	0x0800bf68
 8006dd8:	0800bf70 	.word	0x0800bf70
 8006ddc:	0800bf80 	.word	0x0800bf80

08006de0 <apps_common_lr11xx_fetch_and_print_version>:

void apps_common_lr11xx_fetch_and_print_version( const lr11xx_hal_context_t* context )
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b084      	sub	sp, #16
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
    lr11xx_system_version_t version;

    apps_common_lr11xx_fetch_version( ( void* ) context, &version );
 8006de8:	f107 030c 	add.w	r3, r7, #12
 8006dec:	4619      	mov	r1, r3
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 f80a 	bl	8006e08 <apps_common_lr11xx_fetch_version>
    apps_common_lr11xx_print_version( &version );
 8006df4:	f107 030c 	add.w	r3, r7, #12
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f000 f847 	bl	8006e8c <apps_common_lr11xx_print_version>
}
 8006dfe:	bf00      	nop
 8006e00:	3710      	adds	r7, #16
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}
	...

08006e08 <apps_common_lr11xx_fetch_version>:

void apps_common_lr11xx_fetch_version( const lr11xx_hal_context_t* context, lr11xx_system_version_t* version )
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b086      	sub	sp, #24
 8006e0c:	af02      	add	r7, sp, #8
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	6039      	str	r1, [r7, #0]
    ASSERT_LR11XX_RC( lr11xx_system_get_version( ( void* ) context, version ) );
 8006e12:	6839      	ldr	r1, [r7, #0]
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f001 feb3 	bl	8008b80 <lr11xx_system_get_version>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	73fb      	strb	r3, [r7, #15]
 8006e1e:	7bfb      	ldrb	r3, [r7, #15]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d01c      	beq.n	8006e5e <apps_common_lr11xx_fetch_version+0x56>
 8006e24:	7bfb      	ldrb	r3, [r7, #15]
 8006e26:	2b03      	cmp	r3, #3
 8006e28:	d119      	bne.n	8006e5e <apps_common_lr11xx_fetch_version+0x56>
 8006e2a:	480f      	ldr	r0, [pc, #60]	; (8006e68 <apps_common_lr11xx_fetch_version+0x60>)
 8006e2c:	f7fd f810 	bl	8003e50 <hal_mcu_trace_print>
 8006e30:	480e      	ldr	r0, [pc, #56]	; (8006e6c <apps_common_lr11xx_fetch_version+0x64>)
 8006e32:	f7fd f80d 	bl	8003e50 <hal_mcu_trace_print>
 8006e36:	f44f 71c1 	mov.w	r1, #386	; 0x182
 8006e3a:	480d      	ldr	r0, [pc, #52]	; (8006e70 <apps_common_lr11xx_fetch_version+0x68>)
 8006e3c:	f7fd f808 	bl	8003e50 <hal_mcu_trace_print>
 8006e40:	480c      	ldr	r0, [pc, #48]	; (8006e74 <apps_common_lr11xx_fetch_version+0x6c>)
 8006e42:	f7fd f805 	bl	8003e50 <hal_mcu_trace_print>
 8006e46:	4b0c      	ldr	r3, [pc, #48]	; (8006e78 <apps_common_lr11xx_fetch_version+0x70>)
 8006e48:	9300      	str	r3, [sp, #0]
 8006e4a:	f44f 73c1 	mov.w	r3, #386	; 0x182
 8006e4e:	4a0b      	ldr	r2, [pc, #44]	; (8006e7c <apps_common_lr11xx_fetch_version+0x74>)
 8006e50:	490b      	ldr	r1, [pc, #44]	; (8006e80 <apps_common_lr11xx_fetch_version+0x78>)
 8006e52:	480c      	ldr	r0, [pc, #48]	; (8006e84 <apps_common_lr11xx_fetch_version+0x7c>)
 8006e54:	f7fc fffc 	bl	8003e50 <hal_mcu_trace_print>
 8006e58:	480b      	ldr	r0, [pc, #44]	; (8006e88 <apps_common_lr11xx_fetch_version+0x80>)
 8006e5a:	f7fc fff9 	bl	8003e50 <hal_mcu_trace_print>
}
 8006e5e:	bf00      	nop
 8006e60:	3710      	adds	r7, #16
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}
 8006e66:	bf00      	nop
 8006e68:	0800bf68 	.word	0x0800bf68
 8006e6c:	0800bf70 	.word	0x0800bf70
 8006e70:	0800bf80 	.word	0x0800bf80
 8006e74:	0800bf88 	.word	0x0800bf88
 8006e78:	0800bff4 	.word	0x0800bff4
 8006e7c:	0800dac8 	.word	0x0800dac8
 8006e80:	0800bf90 	.word	0x0800bf90
 8006e84:	0800bfd8 	.word	0x0800bfd8
 8006e88:	0800c008 	.word	0x0800c008

08006e8c <apps_common_lr11xx_print_version>:

void apps_common_lr11xx_print_version( const lr11xx_system_version_t* version )
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b082      	sub	sp, #8
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
    HAL_DBG_TRACE_INFO( "LR11xx information:\n\r" );
 8006e94:	4861      	ldr	r0, [pc, #388]	; (800701c <apps_common_lr11xx_print_version+0x190>)
 8006e96:	f7fc ffdb 	bl	8003e50 <hal_mcu_trace_print>
 8006e9a:	4861      	ldr	r0, [pc, #388]	; (8007020 <apps_common_lr11xx_print_version+0x194>)
 8006e9c:	f7fc ffd8 	bl	8003e50 <hal_mcu_trace_print>
 8006ea0:	f240 1187 	movw	r1, #391	; 0x187
 8006ea4:	485f      	ldr	r0, [pc, #380]	; (8007024 <apps_common_lr11xx_print_version+0x198>)
 8006ea6:	f7fc ffd3 	bl	8003e50 <hal_mcu_trace_print>
 8006eaa:	485f      	ldr	r0, [pc, #380]	; (8007028 <apps_common_lr11xx_print_version+0x19c>)
 8006eac:	f7fc ffd0 	bl	8003e50 <hal_mcu_trace_print>
 8006eb0:	485e      	ldr	r0, [pc, #376]	; (800702c <apps_common_lr11xx_print_version+0x1a0>)
 8006eb2:	f7fc ffcd 	bl	8003e50 <hal_mcu_trace_print>
 8006eb6:	485e      	ldr	r0, [pc, #376]	; (8007030 <apps_common_lr11xx_print_version+0x1a4>)
 8006eb8:	f7fc ffca 	bl	8003e50 <hal_mcu_trace_print>
    HAL_DBG_TRACE_INFO( "  - Firmware = 0x%04X\n\r", version->fw );
 8006ebc:	4857      	ldr	r0, [pc, #348]	; (800701c <apps_common_lr11xx_print_version+0x190>)
 8006ebe:	f7fc ffc7 	bl	8003e50 <hal_mcu_trace_print>
 8006ec2:	4857      	ldr	r0, [pc, #348]	; (8007020 <apps_common_lr11xx_print_version+0x194>)
 8006ec4:	f7fc ffc4 	bl	8003e50 <hal_mcu_trace_print>
 8006ec8:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8006ecc:	4855      	ldr	r0, [pc, #340]	; (8007024 <apps_common_lr11xx_print_version+0x198>)
 8006ece:	f7fc ffbf 	bl	8003e50 <hal_mcu_trace_print>
 8006ed2:	4855      	ldr	r0, [pc, #340]	; (8007028 <apps_common_lr11xx_print_version+0x19c>)
 8006ed4:	f7fc ffbc 	bl	8003e50 <hal_mcu_trace_print>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	885b      	ldrh	r3, [r3, #2]
 8006edc:	4619      	mov	r1, r3
 8006ede:	4855      	ldr	r0, [pc, #340]	; (8007034 <apps_common_lr11xx_print_version+0x1a8>)
 8006ee0:	f7fc ffb6 	bl	8003e50 <hal_mcu_trace_print>
 8006ee4:	4852      	ldr	r0, [pc, #328]	; (8007030 <apps_common_lr11xx_print_version+0x1a4>)
 8006ee6:	f7fc ffb3 	bl	8003e50 <hal_mcu_trace_print>
    HAL_DBG_TRACE_INFO( "  - Hardware = 0x%02X\n\r", version->hw );
 8006eea:	484c      	ldr	r0, [pc, #304]	; (800701c <apps_common_lr11xx_print_version+0x190>)
 8006eec:	f7fc ffb0 	bl	8003e50 <hal_mcu_trace_print>
 8006ef0:	484b      	ldr	r0, [pc, #300]	; (8007020 <apps_common_lr11xx_print_version+0x194>)
 8006ef2:	f7fc ffad 	bl	8003e50 <hal_mcu_trace_print>
 8006ef6:	f240 1189 	movw	r1, #393	; 0x189
 8006efa:	484a      	ldr	r0, [pc, #296]	; (8007024 <apps_common_lr11xx_print_version+0x198>)
 8006efc:	f7fc ffa8 	bl	8003e50 <hal_mcu_trace_print>
 8006f00:	4849      	ldr	r0, [pc, #292]	; (8007028 <apps_common_lr11xx_print_version+0x19c>)
 8006f02:	f7fc ffa5 	bl	8003e50 <hal_mcu_trace_print>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	4619      	mov	r1, r3
 8006f0c:	484a      	ldr	r0, [pc, #296]	; (8007038 <apps_common_lr11xx_print_version+0x1ac>)
 8006f0e:	f7fc ff9f 	bl	8003e50 <hal_mcu_trace_print>
 8006f12:	4847      	ldr	r0, [pc, #284]	; (8007030 <apps_common_lr11xx_print_version+0x1a4>)
 8006f14:	f7fc ff9c 	bl	8003e50 <hal_mcu_trace_print>
    HAL_DBG_TRACE_INFO( "  - Type     = 0x%02X (0x01 for LR1110, 0x02 for LR1120, 0x03 for LR1121)\n\r", version->type );
 8006f18:	4840      	ldr	r0, [pc, #256]	; (800701c <apps_common_lr11xx_print_version+0x190>)
 8006f1a:	f7fc ff99 	bl	8003e50 <hal_mcu_trace_print>
 8006f1e:	4840      	ldr	r0, [pc, #256]	; (8007020 <apps_common_lr11xx_print_version+0x194>)
 8006f20:	f7fc ff96 	bl	8003e50 <hal_mcu_trace_print>
 8006f24:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 8006f28:	483e      	ldr	r0, [pc, #248]	; (8007024 <apps_common_lr11xx_print_version+0x198>)
 8006f2a:	f7fc ff91 	bl	8003e50 <hal_mcu_trace_print>
 8006f2e:	483e      	ldr	r0, [pc, #248]	; (8007028 <apps_common_lr11xx_print_version+0x19c>)
 8006f30:	f7fc ff8e 	bl	8003e50 <hal_mcu_trace_print>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	785b      	ldrb	r3, [r3, #1]
 8006f38:	4619      	mov	r1, r3
 8006f3a:	4840      	ldr	r0, [pc, #256]	; (800703c <apps_common_lr11xx_print_version+0x1b0>)
 8006f3c:	f7fc ff88 	bl	8003e50 <hal_mcu_trace_print>
 8006f40:	483b      	ldr	r0, [pc, #236]	; (8007030 <apps_common_lr11xx_print_version+0x1a4>)
 8006f42:	f7fc ff85 	bl	8003e50 <hal_mcu_trace_print>

    if( ( version->type == LR11XX_SYSTEM_VERSION_TYPE_LR1110 ) && ( version->fw != LR1110_LATEST_FW_VERSION ) )
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	785b      	ldrb	r3, [r3, #1]
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d11e      	bne.n	8006f8c <apps_common_lr11xx_print_version+0x100>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	885b      	ldrh	r3, [r3, #2]
 8006f52:	f240 4201 	movw	r2, #1025	; 0x401
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d018      	beq.n	8006f8c <apps_common_lr11xx_print_version+0x100>
    {
        HAL_DBG_TRACE_WARNING( "LR1110 is on version 0x%02x, but latest firmware version is 0x%02X\n\r", version->fw,
 8006f5a:	4839      	ldr	r0, [pc, #228]	; (8007040 <apps_common_lr11xx_print_version+0x1b4>)
 8006f5c:	f7fc ff78 	bl	8003e50 <hal_mcu_trace_print>
 8006f60:	482f      	ldr	r0, [pc, #188]	; (8007020 <apps_common_lr11xx_print_version+0x194>)
 8006f62:	f7fc ff75 	bl	8003e50 <hal_mcu_trace_print>
 8006f66:	f44f 71c7 	mov.w	r1, #398	; 0x18e
 8006f6a:	482e      	ldr	r0, [pc, #184]	; (8007024 <apps_common_lr11xx_print_version+0x198>)
 8006f6c:	f7fc ff70 	bl	8003e50 <hal_mcu_trace_print>
 8006f70:	4834      	ldr	r0, [pc, #208]	; (8007044 <apps_common_lr11xx_print_version+0x1b8>)
 8006f72:	f7fc ff6d 	bl	8003e50 <hal_mcu_trace_print>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	885b      	ldrh	r3, [r3, #2]
 8006f7a:	f240 4201 	movw	r2, #1025	; 0x401
 8006f7e:	4619      	mov	r1, r3
 8006f80:	4831      	ldr	r0, [pc, #196]	; (8007048 <apps_common_lr11xx_print_version+0x1bc>)
 8006f82:	f7fc ff65 	bl	8003e50 <hal_mcu_trace_print>
 8006f86:	482a      	ldr	r0, [pc, #168]	; (8007030 <apps_common_lr11xx_print_version+0x1a4>)
 8006f88:	f7fc ff62 	bl	8003e50 <hal_mcu_trace_print>
                               LR1110_LATEST_FW_VERSION );
    }
    if( ( version->type == LR11XX_SYSTEM_VERSION_TYPE_LR1120 ) && ( version->fw != LR1120_LATEST_FW_VERSION ) )
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	785b      	ldrb	r3, [r3, #1]
 8006f90:	2b02      	cmp	r3, #2
 8006f92:	d11b      	bne.n	8006fcc <apps_common_lr11xx_print_version+0x140>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	885b      	ldrh	r3, [r3, #2]
 8006f98:	f240 2201 	movw	r2, #513	; 0x201
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d015      	beq.n	8006fcc <apps_common_lr11xx_print_version+0x140>
    {
        HAL_DBG_TRACE_WARNING( "LR1120 doesn't use latest firmware version which is 0x%02X\n\r",
 8006fa0:	4827      	ldr	r0, [pc, #156]	; (8007040 <apps_common_lr11xx_print_version+0x1b4>)
 8006fa2:	f7fc ff55 	bl	8003e50 <hal_mcu_trace_print>
 8006fa6:	481e      	ldr	r0, [pc, #120]	; (8007020 <apps_common_lr11xx_print_version+0x194>)
 8006fa8:	f7fc ff52 	bl	8003e50 <hal_mcu_trace_print>
 8006fac:	f240 1193 	movw	r1, #403	; 0x193
 8006fb0:	481c      	ldr	r0, [pc, #112]	; (8007024 <apps_common_lr11xx_print_version+0x198>)
 8006fb2:	f7fc ff4d 	bl	8003e50 <hal_mcu_trace_print>
 8006fb6:	4823      	ldr	r0, [pc, #140]	; (8007044 <apps_common_lr11xx_print_version+0x1b8>)
 8006fb8:	f7fc ff4a 	bl	8003e50 <hal_mcu_trace_print>
 8006fbc:	f240 2101 	movw	r1, #513	; 0x201
 8006fc0:	4822      	ldr	r0, [pc, #136]	; (800704c <apps_common_lr11xx_print_version+0x1c0>)
 8006fc2:	f7fc ff45 	bl	8003e50 <hal_mcu_trace_print>
 8006fc6:	481a      	ldr	r0, [pc, #104]	; (8007030 <apps_common_lr11xx_print_version+0x1a4>)
 8006fc8:	f7fc ff42 	bl	8003e50 <hal_mcu_trace_print>
                               LR1120_LATEST_FW_VERSION );
    }
    if( ( version->type == LR11XX_SYSTEM_VERSION_TYPE_LR1121 ) && ( version->fw != LR1121_LATEST_FW_VERSION ) )
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	785b      	ldrb	r3, [r3, #1]
 8006fd0:	2b03      	cmp	r3, #3
 8006fd2:	d11b      	bne.n	800700c <apps_common_lr11xx_print_version+0x180>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	885b      	ldrh	r3, [r3, #2]
 8006fd8:	f240 1203 	movw	r2, #259	; 0x103
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d015      	beq.n	800700c <apps_common_lr11xx_print_version+0x180>
    {
        HAL_DBG_TRACE_WARNING( "LR1121 doesn't use latest firmware version which is 0x%02X\n\r",
 8006fe0:	4817      	ldr	r0, [pc, #92]	; (8007040 <apps_common_lr11xx_print_version+0x1b4>)
 8006fe2:	f7fc ff35 	bl	8003e50 <hal_mcu_trace_print>
 8006fe6:	480e      	ldr	r0, [pc, #56]	; (8007020 <apps_common_lr11xx_print_version+0x194>)
 8006fe8:	f7fc ff32 	bl	8003e50 <hal_mcu_trace_print>
 8006fec:	f44f 71cc 	mov.w	r1, #408	; 0x198
 8006ff0:	480c      	ldr	r0, [pc, #48]	; (8007024 <apps_common_lr11xx_print_version+0x198>)
 8006ff2:	f7fc ff2d 	bl	8003e50 <hal_mcu_trace_print>
 8006ff6:	4813      	ldr	r0, [pc, #76]	; (8007044 <apps_common_lr11xx_print_version+0x1b8>)
 8006ff8:	f7fc ff2a 	bl	8003e50 <hal_mcu_trace_print>
 8006ffc:	f240 1103 	movw	r1, #259	; 0x103
 8007000:	4813      	ldr	r0, [pc, #76]	; (8007050 <apps_common_lr11xx_print_version+0x1c4>)
 8007002:	f7fc ff25 	bl	8003e50 <hal_mcu_trace_print>
 8007006:	480a      	ldr	r0, [pc, #40]	; (8007030 <apps_common_lr11xx_print_version+0x1a4>)
 8007008:	f7fc ff22 	bl	8003e50 <hal_mcu_trace_print>
                               LR1121_LATEST_FW_VERSION );
    }

    HAL_DBG_TRACE_PRINTF( "\n" );
 800700c:	4811      	ldr	r0, [pc, #68]	; (8007054 <apps_common_lr11xx_print_version+0x1c8>)
 800700e:	f7fc ff1f 	bl	8003e50 <hal_mcu_trace_print>
}
 8007012:	bf00      	nop
 8007014:	3708      	adds	r7, #8
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}
 800701a:	bf00      	nop
 800701c:	0800c010 	.word	0x0800c010
 8007020:	0800bf70 	.word	0x0800bf70
 8007024:	0800bf80 	.word	0x0800bf80
 8007028:	0800c018 	.word	0x0800c018
 800702c:	0800c020 	.word	0x0800c020
 8007030:	0800c008 	.word	0x0800c008
 8007034:	0800c038 	.word	0x0800c038
 8007038:	0800c050 	.word	0x0800c050
 800703c:	0800c068 	.word	0x0800c068
 8007040:	0800c0b4 	.word	0x0800c0b4
 8007044:	0800c0bc 	.word	0x0800c0bc
 8007048:	0800c0c4 	.word	0x0800c0c4
 800704c:	0800c10c 	.word	0x0800c10c
 8007050:	0800c14c 	.word	0x0800c14c
 8007054:	0800c18c 	.word	0x0800c18c

08007058 <apps_common_print_sdk_driver_version>:

void apps_common_print_sdk_driver_version( void )
{
 8007058:	b580      	push	{r7, lr}
 800705a:	af00      	add	r7, sp, #0
    common_version_print( );
 800705c:	f7fc fed0 	bl	8003e00 <common_version_print>
    print_driver_version( );
 8007060:	f000 feba 	bl	8007dd8 <print_driver_version>
    HAL_DBG_TRACE_INFO( "\n\r" );
 8007064:	480a      	ldr	r0, [pc, #40]	; (8007090 <apps_common_print_sdk_driver_version+0x38>)
 8007066:	f7fc fef3 	bl	8003e50 <hal_mcu_trace_print>
 800706a:	480a      	ldr	r0, [pc, #40]	; (8007094 <apps_common_print_sdk_driver_version+0x3c>)
 800706c:	f7fc fef0 	bl	8003e50 <hal_mcu_trace_print>
 8007070:	f240 11a3 	movw	r1, #419	; 0x1a3
 8007074:	4808      	ldr	r0, [pc, #32]	; (8007098 <apps_common_print_sdk_driver_version+0x40>)
 8007076:	f7fc feeb 	bl	8003e50 <hal_mcu_trace_print>
 800707a:	4808      	ldr	r0, [pc, #32]	; (800709c <apps_common_print_sdk_driver_version+0x44>)
 800707c:	f7fc fee8 	bl	8003e50 <hal_mcu_trace_print>
 8007080:	4807      	ldr	r0, [pc, #28]	; (80070a0 <apps_common_print_sdk_driver_version+0x48>)
 8007082:	f7fc fee5 	bl	8003e50 <hal_mcu_trace_print>
 8007086:	4807      	ldr	r0, [pc, #28]	; (80070a4 <apps_common_print_sdk_driver_version+0x4c>)
 8007088:	f7fc fee2 	bl	8003e50 <hal_mcu_trace_print>
}
 800708c:	bf00      	nop
 800708e:	bd80      	pop	{r7, pc}
 8007090:	0800c010 	.word	0x0800c010
 8007094:	0800bf70 	.word	0x0800bf70
 8007098:	0800bf80 	.word	0x0800bf80
 800709c:	0800c018 	.word	0x0800c018
 80070a0:	0800c190 	.word	0x0800c190
 80070a4:	0800c008 	.word	0x0800c008

080070a8 <apps_common_lr11xx_radio_init>:

void apps_common_lr11xx_radio_init( const void* context )
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b08a      	sub	sp, #40	; 0x28
 80070ac:	af02      	add	r7, sp, #8
 80070ae:	6078      	str	r0, [r7, #4]
    const smtc_shield_lr11xx_pa_pwr_cfg_t* pa_pwr_cfg =
        smtc_shield_lr11xx_get_pa_pwr_cfg( &shield, RF_FREQ_IN_HZ, TX_OUTPUT_POWER_DBM );
 80070b0:	2216      	movs	r2, #22
 80070b2:	490e      	ldr	r1, [pc, #56]	; (80070ec <apps_common_lr11xx_radio_init+0x44>)
 80070b4:	480e      	ldr	r0, [pc, #56]	; (80070f0 <apps_common_lr11xx_radio_init+0x48>)
 80070b6:	f7ff fb4d 	bl	8006754 <smtc_shield_lr11xx_get_pa_pwr_cfg>
 80070ba:	61f8      	str	r0, [r7, #28]

    if( pa_pwr_cfg == NULL )
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d124      	bne.n	800710c <apps_common_lr11xx_radio_init+0x64>
    {
        HAL_DBG_TRACE_ERROR( "Invalid target frequency or power level\n\r" );
 80070c2:	480c      	ldr	r0, [pc, #48]	; (80070f4 <apps_common_lr11xx_radio_init+0x4c>)
 80070c4:	f7fc fec4 	bl	8003e50 <hal_mcu_trace_print>
 80070c8:	480b      	ldr	r0, [pc, #44]	; (80070f8 <apps_common_lr11xx_radio_init+0x50>)
 80070ca:	f7fc fec1 	bl	8003e50 <hal_mcu_trace_print>
 80070ce:	f240 11ad 	movw	r1, #429	; 0x1ad
 80070d2:	480a      	ldr	r0, [pc, #40]	; (80070fc <apps_common_lr11xx_radio_init+0x54>)
 80070d4:	f7fc febc 	bl	8003e50 <hal_mcu_trace_print>
 80070d8:	4809      	ldr	r0, [pc, #36]	; (8007100 <apps_common_lr11xx_radio_init+0x58>)
 80070da:	f7fc feb9 	bl	8003e50 <hal_mcu_trace_print>
 80070de:	4809      	ldr	r0, [pc, #36]	; (8007104 <apps_common_lr11xx_radio_init+0x5c>)
 80070e0:	f7fc feb6 	bl	8003e50 <hal_mcu_trace_print>
 80070e4:	4808      	ldr	r0, [pc, #32]	; (8007108 <apps_common_lr11xx_radio_init+0x60>)
 80070e6:	f7fc feb3 	bl	8003e50 <hal_mcu_trace_print>
        while( true )
 80070ea:	e7fe      	b.n	80070ea <apps_common_lr11xx_radio_init+0x42>
 80070ec:	33be9cd0 	.word	0x33be9cd0
 80070f0:	2000000c 	.word	0x2000000c
 80070f4:	0800bf68 	.word	0x0800bf68
 80070f8:	0800bf70 	.word	0x0800bf70
 80070fc:	0800bf80 	.word	0x0800bf80
 8007100:	0800bf88 	.word	0x0800bf88
 8007104:	0800c194 	.word	0x0800c194
 8007108:	0800c008 	.word	0x0800c008
        {
        }
    }

    print_common_configuration( );
 800710c:	f000 fc90 	bl	8007a30 <print_common_configuration>

    ASSERT_LR11XX_RC( lr11xx_radio_set_pkt_type( context, PACKET_TYPE ) );
 8007110:	2102      	movs	r1, #2
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f001 fad4 	bl	80086c0 <lr11xx_radio_set_pkt_type>
 8007118:	4603      	mov	r3, r0
 800711a:	76fb      	strb	r3, [r7, #27]
 800711c:	7efb      	ldrb	r3, [r7, #27]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d01c      	beq.n	800715c <apps_common_lr11xx_radio_init+0xb4>
 8007122:	7efb      	ldrb	r3, [r7, #27]
 8007124:	2b03      	cmp	r3, #3
 8007126:	d119      	bne.n	800715c <apps_common_lr11xx_radio_init+0xb4>
 8007128:	48af      	ldr	r0, [pc, #700]	; (80073e8 <apps_common_lr11xx_radio_init+0x340>)
 800712a:	f7fc fe91 	bl	8003e50 <hal_mcu_trace_print>
 800712e:	48af      	ldr	r0, [pc, #700]	; (80073ec <apps_common_lr11xx_radio_init+0x344>)
 8007130:	f7fc fe8e 	bl	8003e50 <hal_mcu_trace_print>
 8007134:	f240 11b5 	movw	r1, #437	; 0x1b5
 8007138:	48ad      	ldr	r0, [pc, #692]	; (80073f0 <apps_common_lr11xx_radio_init+0x348>)
 800713a:	f7fc fe89 	bl	8003e50 <hal_mcu_trace_print>
 800713e:	48ad      	ldr	r0, [pc, #692]	; (80073f4 <apps_common_lr11xx_radio_init+0x34c>)
 8007140:	f7fc fe86 	bl	8003e50 <hal_mcu_trace_print>
 8007144:	4bac      	ldr	r3, [pc, #688]	; (80073f8 <apps_common_lr11xx_radio_init+0x350>)
 8007146:	9300      	str	r3, [sp, #0]
 8007148:	f240 13b5 	movw	r3, #437	; 0x1b5
 800714c:	4aab      	ldr	r2, [pc, #684]	; (80073fc <apps_common_lr11xx_radio_init+0x354>)
 800714e:	49ac      	ldr	r1, [pc, #688]	; (8007400 <apps_common_lr11xx_radio_init+0x358>)
 8007150:	48ac      	ldr	r0, [pc, #688]	; (8007404 <apps_common_lr11xx_radio_init+0x35c>)
 8007152:	f7fc fe7d 	bl	8003e50 <hal_mcu_trace_print>
 8007156:	48ac      	ldr	r0, [pc, #688]	; (8007408 <apps_common_lr11xx_radio_init+0x360>)
 8007158:	f7fc fe7a 	bl	8003e50 <hal_mcu_trace_print>
    ASSERT_LR11XX_RC( lr11xx_radio_set_rf_freq( context, RF_FREQ_IN_HZ ) );
 800715c:	49ab      	ldr	r1, [pc, #684]	; (800740c <apps_common_lr11xx_radio_init+0x364>)
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f001 fa88 	bl	8008674 <lr11xx_radio_set_rf_freq>
 8007164:	4603      	mov	r3, r0
 8007166:	76bb      	strb	r3, [r7, #26]
 8007168:	7ebb      	ldrb	r3, [r7, #26]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d01c      	beq.n	80071a8 <apps_common_lr11xx_radio_init+0x100>
 800716e:	7ebb      	ldrb	r3, [r7, #26]
 8007170:	2b03      	cmp	r3, #3
 8007172:	d119      	bne.n	80071a8 <apps_common_lr11xx_radio_init+0x100>
 8007174:	489c      	ldr	r0, [pc, #624]	; (80073e8 <apps_common_lr11xx_radio_init+0x340>)
 8007176:	f7fc fe6b 	bl	8003e50 <hal_mcu_trace_print>
 800717a:	489c      	ldr	r0, [pc, #624]	; (80073ec <apps_common_lr11xx_radio_init+0x344>)
 800717c:	f7fc fe68 	bl	8003e50 <hal_mcu_trace_print>
 8007180:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8007184:	489a      	ldr	r0, [pc, #616]	; (80073f0 <apps_common_lr11xx_radio_init+0x348>)
 8007186:	f7fc fe63 	bl	8003e50 <hal_mcu_trace_print>
 800718a:	489a      	ldr	r0, [pc, #616]	; (80073f4 <apps_common_lr11xx_radio_init+0x34c>)
 800718c:	f7fc fe60 	bl	8003e50 <hal_mcu_trace_print>
 8007190:	4b99      	ldr	r3, [pc, #612]	; (80073f8 <apps_common_lr11xx_radio_init+0x350>)
 8007192:	9300      	str	r3, [sp, #0]
 8007194:	f44f 73db 	mov.w	r3, #438	; 0x1b6
 8007198:	4a98      	ldr	r2, [pc, #608]	; (80073fc <apps_common_lr11xx_radio_init+0x354>)
 800719a:	4999      	ldr	r1, [pc, #612]	; (8007400 <apps_common_lr11xx_radio_init+0x358>)
 800719c:	4899      	ldr	r0, [pc, #612]	; (8007404 <apps_common_lr11xx_radio_init+0x35c>)
 800719e:	f7fc fe57 	bl	8003e50 <hal_mcu_trace_print>
 80071a2:	4899      	ldr	r0, [pc, #612]	; (8007408 <apps_common_lr11xx_radio_init+0x360>)
 80071a4:	f7fc fe54 	bl	8003e50 <hal_mcu_trace_print>
    ASSERT_LR11XX_RC( lr11xx_radio_set_rssi_calibration(
 80071a8:	4998      	ldr	r1, [pc, #608]	; (800740c <apps_common_lr11xx_radio_init+0x364>)
 80071aa:	4899      	ldr	r0, [pc, #612]	; (8007410 <apps_common_lr11xx_radio_init+0x368>)
 80071ac:	f7ff fae5 	bl	800677a <smtc_shield_lr11xx_get_rssi_calibration_table>
 80071b0:	4603      	mov	r3, r0
 80071b2:	4619      	mov	r1, r3
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f001 fb62 	bl	800887e <lr11xx_radio_set_rssi_calibration>
 80071ba:	4603      	mov	r3, r0
 80071bc:	767b      	strb	r3, [r7, #25]
 80071be:	7e7b      	ldrb	r3, [r7, #25]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d01c      	beq.n	80071fe <apps_common_lr11xx_radio_init+0x156>
 80071c4:	7e7b      	ldrb	r3, [r7, #25]
 80071c6:	2b03      	cmp	r3, #3
 80071c8:	d119      	bne.n	80071fe <apps_common_lr11xx_radio_init+0x156>
 80071ca:	4887      	ldr	r0, [pc, #540]	; (80073e8 <apps_common_lr11xx_radio_init+0x340>)
 80071cc:	f7fc fe40 	bl	8003e50 <hal_mcu_trace_print>
 80071d0:	4886      	ldr	r0, [pc, #536]	; (80073ec <apps_common_lr11xx_radio_init+0x344>)
 80071d2:	f7fc fe3d 	bl	8003e50 <hal_mcu_trace_print>
 80071d6:	f240 11b7 	movw	r1, #439	; 0x1b7
 80071da:	4885      	ldr	r0, [pc, #532]	; (80073f0 <apps_common_lr11xx_radio_init+0x348>)
 80071dc:	f7fc fe38 	bl	8003e50 <hal_mcu_trace_print>
 80071e0:	4884      	ldr	r0, [pc, #528]	; (80073f4 <apps_common_lr11xx_radio_init+0x34c>)
 80071e2:	f7fc fe35 	bl	8003e50 <hal_mcu_trace_print>
 80071e6:	4b84      	ldr	r3, [pc, #528]	; (80073f8 <apps_common_lr11xx_radio_init+0x350>)
 80071e8:	9300      	str	r3, [sp, #0]
 80071ea:	f240 13b7 	movw	r3, #439	; 0x1b7
 80071ee:	4a83      	ldr	r2, [pc, #524]	; (80073fc <apps_common_lr11xx_radio_init+0x354>)
 80071f0:	4983      	ldr	r1, [pc, #524]	; (8007400 <apps_common_lr11xx_radio_init+0x358>)
 80071f2:	4884      	ldr	r0, [pc, #528]	; (8007404 <apps_common_lr11xx_radio_init+0x35c>)
 80071f4:	f7fc fe2c 	bl	8003e50 <hal_mcu_trace_print>
 80071f8:	4883      	ldr	r0, [pc, #524]	; (8007408 <apps_common_lr11xx_radio_init+0x360>)
 80071fa:	f7fc fe29 	bl	8003e50 <hal_mcu_trace_print>
        context, smtc_shield_lr11xx_get_rssi_calibration_table( &shield, RF_FREQ_IN_HZ ) ) );
    ASSERT_LR11XX_RC( lr11xx_radio_set_pa_cfg( context, &( pa_pwr_cfg->pa_config ) ) );
 80071fe:	69fb      	ldr	r3, [r7, #28]
 8007200:	3301      	adds	r3, #1
 8007202:	4619      	mov	r1, r3
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f001 fafd 	bl	8008804 <lr11xx_radio_set_pa_cfg>
 800720a:	4603      	mov	r3, r0
 800720c:	763b      	strb	r3, [r7, #24]
 800720e:	7e3b      	ldrb	r3, [r7, #24]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d01c      	beq.n	800724e <apps_common_lr11xx_radio_init+0x1a6>
 8007214:	7e3b      	ldrb	r3, [r7, #24]
 8007216:	2b03      	cmp	r3, #3
 8007218:	d119      	bne.n	800724e <apps_common_lr11xx_radio_init+0x1a6>
 800721a:	4873      	ldr	r0, [pc, #460]	; (80073e8 <apps_common_lr11xx_radio_init+0x340>)
 800721c:	f7fc fe18 	bl	8003e50 <hal_mcu_trace_print>
 8007220:	4872      	ldr	r0, [pc, #456]	; (80073ec <apps_common_lr11xx_radio_init+0x344>)
 8007222:	f7fc fe15 	bl	8003e50 <hal_mcu_trace_print>
 8007226:	f240 11b9 	movw	r1, #441	; 0x1b9
 800722a:	4871      	ldr	r0, [pc, #452]	; (80073f0 <apps_common_lr11xx_radio_init+0x348>)
 800722c:	f7fc fe10 	bl	8003e50 <hal_mcu_trace_print>
 8007230:	4870      	ldr	r0, [pc, #448]	; (80073f4 <apps_common_lr11xx_radio_init+0x34c>)
 8007232:	f7fc fe0d 	bl	8003e50 <hal_mcu_trace_print>
 8007236:	4b70      	ldr	r3, [pc, #448]	; (80073f8 <apps_common_lr11xx_radio_init+0x350>)
 8007238:	9300      	str	r3, [sp, #0]
 800723a:	f240 13b9 	movw	r3, #441	; 0x1b9
 800723e:	4a6f      	ldr	r2, [pc, #444]	; (80073fc <apps_common_lr11xx_radio_init+0x354>)
 8007240:	496f      	ldr	r1, [pc, #444]	; (8007400 <apps_common_lr11xx_radio_init+0x358>)
 8007242:	4870      	ldr	r0, [pc, #448]	; (8007404 <apps_common_lr11xx_radio_init+0x35c>)
 8007244:	f7fc fe04 	bl	8003e50 <hal_mcu_trace_print>
 8007248:	486f      	ldr	r0, [pc, #444]	; (8007408 <apps_common_lr11xx_radio_init+0x360>)
 800724a:	f7fc fe01 	bl	8003e50 <hal_mcu_trace_print>
    ASSERT_LR11XX_RC( lr11xx_radio_set_tx_params( context, pa_pwr_cfg->power, PA_RAMP_TIME ) );
 800724e:	69fb      	ldr	r3, [r7, #28]
 8007250:	f993 3000 	ldrsb.w	r3, [r3]
 8007254:	2202      	movs	r2, #2
 8007256:	4619      	mov	r1, r3
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f001 fa9b 	bl	8008794 <lr11xx_radio_set_tx_params>
 800725e:	4603      	mov	r3, r0
 8007260:	75fb      	strb	r3, [r7, #23]
 8007262:	7dfb      	ldrb	r3, [r7, #23]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d01c      	beq.n	80072a2 <apps_common_lr11xx_radio_init+0x1fa>
 8007268:	7dfb      	ldrb	r3, [r7, #23]
 800726a:	2b03      	cmp	r3, #3
 800726c:	d119      	bne.n	80072a2 <apps_common_lr11xx_radio_init+0x1fa>
 800726e:	485e      	ldr	r0, [pc, #376]	; (80073e8 <apps_common_lr11xx_radio_init+0x340>)
 8007270:	f7fc fdee 	bl	8003e50 <hal_mcu_trace_print>
 8007274:	485d      	ldr	r0, [pc, #372]	; (80073ec <apps_common_lr11xx_radio_init+0x344>)
 8007276:	f7fc fdeb 	bl	8003e50 <hal_mcu_trace_print>
 800727a:	f44f 71dd 	mov.w	r1, #442	; 0x1ba
 800727e:	485c      	ldr	r0, [pc, #368]	; (80073f0 <apps_common_lr11xx_radio_init+0x348>)
 8007280:	f7fc fde6 	bl	8003e50 <hal_mcu_trace_print>
 8007284:	485b      	ldr	r0, [pc, #364]	; (80073f4 <apps_common_lr11xx_radio_init+0x34c>)
 8007286:	f7fc fde3 	bl	8003e50 <hal_mcu_trace_print>
 800728a:	4b5b      	ldr	r3, [pc, #364]	; (80073f8 <apps_common_lr11xx_radio_init+0x350>)
 800728c:	9300      	str	r3, [sp, #0]
 800728e:	f44f 73dd 	mov.w	r3, #442	; 0x1ba
 8007292:	4a5a      	ldr	r2, [pc, #360]	; (80073fc <apps_common_lr11xx_radio_init+0x354>)
 8007294:	495a      	ldr	r1, [pc, #360]	; (8007400 <apps_common_lr11xx_radio_init+0x358>)
 8007296:	485b      	ldr	r0, [pc, #364]	; (8007404 <apps_common_lr11xx_radio_init+0x35c>)
 8007298:	f7fc fdda 	bl	8003e50 <hal_mcu_trace_print>
 800729c:	485a      	ldr	r0, [pc, #360]	; (8007408 <apps_common_lr11xx_radio_init+0x360>)
 800729e:	f7fc fdd7 	bl	8003e50 <hal_mcu_trace_print>
    ASSERT_LR11XX_RC( lr11xx_radio_set_rx_tx_fallback_mode( context, FALLBACK_MODE ) );
 80072a2:	2101      	movs	r1, #1
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f001 fa93 	bl	80087d0 <lr11xx_radio_set_rx_tx_fallback_mode>
 80072aa:	4603      	mov	r3, r0
 80072ac:	75bb      	strb	r3, [r7, #22]
 80072ae:	7dbb      	ldrb	r3, [r7, #22]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d01c      	beq.n	80072ee <apps_common_lr11xx_radio_init+0x246>
 80072b4:	7dbb      	ldrb	r3, [r7, #22]
 80072b6:	2b03      	cmp	r3, #3
 80072b8:	d119      	bne.n	80072ee <apps_common_lr11xx_radio_init+0x246>
 80072ba:	484b      	ldr	r0, [pc, #300]	; (80073e8 <apps_common_lr11xx_radio_init+0x340>)
 80072bc:	f7fc fdc8 	bl	8003e50 <hal_mcu_trace_print>
 80072c0:	484a      	ldr	r0, [pc, #296]	; (80073ec <apps_common_lr11xx_radio_init+0x344>)
 80072c2:	f7fc fdc5 	bl	8003e50 <hal_mcu_trace_print>
 80072c6:	f240 11bb 	movw	r1, #443	; 0x1bb
 80072ca:	4849      	ldr	r0, [pc, #292]	; (80073f0 <apps_common_lr11xx_radio_init+0x348>)
 80072cc:	f7fc fdc0 	bl	8003e50 <hal_mcu_trace_print>
 80072d0:	4848      	ldr	r0, [pc, #288]	; (80073f4 <apps_common_lr11xx_radio_init+0x34c>)
 80072d2:	f7fc fdbd 	bl	8003e50 <hal_mcu_trace_print>
 80072d6:	4b48      	ldr	r3, [pc, #288]	; (80073f8 <apps_common_lr11xx_radio_init+0x350>)
 80072d8:	9300      	str	r3, [sp, #0]
 80072da:	f240 13bb 	movw	r3, #443	; 0x1bb
 80072de:	4a47      	ldr	r2, [pc, #284]	; (80073fc <apps_common_lr11xx_radio_init+0x354>)
 80072e0:	4947      	ldr	r1, [pc, #284]	; (8007400 <apps_common_lr11xx_radio_init+0x358>)
 80072e2:	4848      	ldr	r0, [pc, #288]	; (8007404 <apps_common_lr11xx_radio_init+0x35c>)
 80072e4:	f7fc fdb4 	bl	8003e50 <hal_mcu_trace_print>
 80072e8:	4847      	ldr	r0, [pc, #284]	; (8007408 <apps_common_lr11xx_radio_init+0x360>)
 80072ea:	f7fc fdb1 	bl	8003e50 <hal_mcu_trace_print>
    ASSERT_LR11XX_RC( lr11xx_radio_cfg_rx_boosted( context, ENABLE_RX_BOOST_MODE ) );
 80072ee:	2101      	movs	r1, #1
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f001 faaa 	bl	800884a <lr11xx_radio_cfg_rx_boosted>
 80072f6:	4603      	mov	r3, r0
 80072f8:	757b      	strb	r3, [r7, #21]
 80072fa:	7d7b      	ldrb	r3, [r7, #21]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d01c      	beq.n	800733a <apps_common_lr11xx_radio_init+0x292>
 8007300:	7d7b      	ldrb	r3, [r7, #21]
 8007302:	2b03      	cmp	r3, #3
 8007304:	d119      	bne.n	800733a <apps_common_lr11xx_radio_init+0x292>
 8007306:	4838      	ldr	r0, [pc, #224]	; (80073e8 <apps_common_lr11xx_radio_init+0x340>)
 8007308:	f7fc fda2 	bl	8003e50 <hal_mcu_trace_print>
 800730c:	4837      	ldr	r0, [pc, #220]	; (80073ec <apps_common_lr11xx_radio_init+0x344>)
 800730e:	f7fc fd9f 	bl	8003e50 <hal_mcu_trace_print>
 8007312:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8007316:	4836      	ldr	r0, [pc, #216]	; (80073f0 <apps_common_lr11xx_radio_init+0x348>)
 8007318:	f7fc fd9a 	bl	8003e50 <hal_mcu_trace_print>
 800731c:	4835      	ldr	r0, [pc, #212]	; (80073f4 <apps_common_lr11xx_radio_init+0x34c>)
 800731e:	f7fc fd97 	bl	8003e50 <hal_mcu_trace_print>
 8007322:	4b35      	ldr	r3, [pc, #212]	; (80073f8 <apps_common_lr11xx_radio_init+0x350>)
 8007324:	9300      	str	r3, [sp, #0]
 8007326:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 800732a:	4a34      	ldr	r2, [pc, #208]	; (80073fc <apps_common_lr11xx_radio_init+0x354>)
 800732c:	4934      	ldr	r1, [pc, #208]	; (8007400 <apps_common_lr11xx_radio_init+0x358>)
 800732e:	4835      	ldr	r0, [pc, #212]	; (8007404 <apps_common_lr11xx_radio_init+0x35c>)
 8007330:	f7fc fd8e 	bl	8003e50 <hal_mcu_trace_print>
 8007334:	4834      	ldr	r0, [pc, #208]	; (8007408 <apps_common_lr11xx_radio_init+0x360>)
 8007336:	f7fc fd8b 	bl	8003e50 <hal_mcu_trace_print>

    if( PACKET_TYPE == LR11XX_RADIO_PKT_TYPE_LORA )
    {
        print_lora_configuration( );
 800733a:	f000 fc1f 	bl	8007b7c <print_lora_configuration>

        lora_mod_params.ldro = apps_common_compute_lora_ldro( LORA_SPREADING_FACTOR, LORA_BANDWIDTH );
 800733e:	2104      	movs	r1, #4
 8007340:	200c      	movs	r0, #12
 8007342:	f7ff f99f 	bl	8006684 <apps_common_compute_lora_ldro>
 8007346:	4603      	mov	r3, r0
 8007348:	461a      	mov	r2, r3
 800734a:	4b32      	ldr	r3, [pc, #200]	; (8007414 <apps_common_lr11xx_radio_init+0x36c>)
 800734c:	70da      	strb	r2, [r3, #3]
        ASSERT_LR11XX_RC( lr11xx_radio_set_lora_mod_params( context, &lora_mod_params ) );
 800734e:	4931      	ldr	r1, [pc, #196]	; (8007414 <apps_common_lr11xx_radio_init+0x36c>)
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f001 f9cf 	bl	80086f4 <lr11xx_radio_set_lora_mod_params>
 8007356:	4603      	mov	r3, r0
 8007358:	753b      	strb	r3, [r7, #20]
 800735a:	7d3b      	ldrb	r3, [r7, #20]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d01c      	beq.n	800739a <apps_common_lr11xx_radio_init+0x2f2>
 8007360:	7d3b      	ldrb	r3, [r7, #20]
 8007362:	2b03      	cmp	r3, #3
 8007364:	d119      	bne.n	800739a <apps_common_lr11xx_radio_init+0x2f2>
 8007366:	4820      	ldr	r0, [pc, #128]	; (80073e8 <apps_common_lr11xx_radio_init+0x340>)
 8007368:	f7fc fd72 	bl	8003e50 <hal_mcu_trace_print>
 800736c:	481f      	ldr	r0, [pc, #124]	; (80073ec <apps_common_lr11xx_radio_init+0x344>)
 800736e:	f7fc fd6f 	bl	8003e50 <hal_mcu_trace_print>
 8007372:	f240 11c3 	movw	r1, #451	; 0x1c3
 8007376:	481e      	ldr	r0, [pc, #120]	; (80073f0 <apps_common_lr11xx_radio_init+0x348>)
 8007378:	f7fc fd6a 	bl	8003e50 <hal_mcu_trace_print>
 800737c:	481d      	ldr	r0, [pc, #116]	; (80073f4 <apps_common_lr11xx_radio_init+0x34c>)
 800737e:	f7fc fd67 	bl	8003e50 <hal_mcu_trace_print>
 8007382:	4b1d      	ldr	r3, [pc, #116]	; (80073f8 <apps_common_lr11xx_radio_init+0x350>)
 8007384:	9300      	str	r3, [sp, #0]
 8007386:	f240 13c3 	movw	r3, #451	; 0x1c3
 800738a:	4a1c      	ldr	r2, [pc, #112]	; (80073fc <apps_common_lr11xx_radio_init+0x354>)
 800738c:	491c      	ldr	r1, [pc, #112]	; (8007400 <apps_common_lr11xx_radio_init+0x358>)
 800738e:	481d      	ldr	r0, [pc, #116]	; (8007404 <apps_common_lr11xx_radio_init+0x35c>)
 8007390:	f7fc fd5e 	bl	8003e50 <hal_mcu_trace_print>
 8007394:	481c      	ldr	r0, [pc, #112]	; (8007408 <apps_common_lr11xx_radio_init+0x360>)
 8007396:	f7fc fd5b 	bl	8003e50 <hal_mcu_trace_print>
        ASSERT_LR11XX_RC( lr11xx_radio_set_lora_pkt_params( context, &lora_pkt_params ) );
 800739a:	491f      	ldr	r1, [pc, #124]	; (8007418 <apps_common_lr11xx_radio_init+0x370>)
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f001 f9cc 	bl	800873a <lr11xx_radio_set_lora_pkt_params>
 80073a2:	4603      	mov	r3, r0
 80073a4:	74fb      	strb	r3, [r7, #19]
 80073a6:	7cfb      	ldrb	r3, [r7, #19]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d037      	beq.n	800741c <apps_common_lr11xx_radio_init+0x374>
 80073ac:	7cfb      	ldrb	r3, [r7, #19]
 80073ae:	2b03      	cmp	r3, #3
 80073b0:	d134      	bne.n	800741c <apps_common_lr11xx_radio_init+0x374>
 80073b2:	480d      	ldr	r0, [pc, #52]	; (80073e8 <apps_common_lr11xx_radio_init+0x340>)
 80073b4:	f7fc fd4c 	bl	8003e50 <hal_mcu_trace_print>
 80073b8:	480c      	ldr	r0, [pc, #48]	; (80073ec <apps_common_lr11xx_radio_init+0x344>)
 80073ba:	f7fc fd49 	bl	8003e50 <hal_mcu_trace_print>
 80073be:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 80073c2:	480b      	ldr	r0, [pc, #44]	; (80073f0 <apps_common_lr11xx_radio_init+0x348>)
 80073c4:	f7fc fd44 	bl	8003e50 <hal_mcu_trace_print>
 80073c8:	480a      	ldr	r0, [pc, #40]	; (80073f4 <apps_common_lr11xx_radio_init+0x34c>)
 80073ca:	f7fc fd41 	bl	8003e50 <hal_mcu_trace_print>
 80073ce:	4b0a      	ldr	r3, [pc, #40]	; (80073f8 <apps_common_lr11xx_radio_init+0x350>)
 80073d0:	9300      	str	r3, [sp, #0]
 80073d2:	f44f 73e2 	mov.w	r3, #452	; 0x1c4
 80073d6:	4a09      	ldr	r2, [pc, #36]	; (80073fc <apps_common_lr11xx_radio_init+0x354>)
 80073d8:	4909      	ldr	r1, [pc, #36]	; (8007400 <apps_common_lr11xx_radio_init+0x358>)
 80073da:	480a      	ldr	r0, [pc, #40]	; (8007404 <apps_common_lr11xx_radio_init+0x35c>)
 80073dc:	f7fc fd38 	bl	8003e50 <hal_mcu_trace_print>
 80073e0:	4809      	ldr	r0, [pc, #36]	; (8007408 <apps_common_lr11xx_radio_init+0x360>)
 80073e2:	f7fc fd35 	bl	8003e50 <hal_mcu_trace_print>
 80073e6:	e019      	b.n	800741c <apps_common_lr11xx_radio_init+0x374>
 80073e8:	0800bf68 	.word	0x0800bf68
 80073ec:	0800bf70 	.word	0x0800bf70
 80073f0:	0800bf80 	.word	0x0800bf80
 80073f4:	0800bf88 	.word	0x0800bf88
 80073f8:	0800bff4 	.word	0x0800bff4
 80073fc:	0800daec 	.word	0x0800daec
 8007400:	0800bf90 	.word	0x0800bf90
 8007404:	0800bfd8 	.word	0x0800bfd8
 8007408:	0800c008 	.word	0x0800c008
 800740c:	33be9cd0 	.word	0x33be9cd0
 8007410:	2000000c 	.word	0x2000000c
 8007414:	2000002c 	.word	0x2000002c
 8007418:	0800daa0 	.word	0x0800daa0
        ASSERT_LR11XX_RC( lr11xx_radio_set_lora_sync_word( context, LORA_SYNCWORD ) );
 800741c:	2112      	movs	r1, #18
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f001 f8ca 	bl	80085b8 <lr11xx_radio_set_lora_sync_word>
 8007424:	4603      	mov	r3, r0
 8007426:	74bb      	strb	r3, [r7, #18]
 8007428:	7cbb      	ldrb	r3, [r7, #18]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d01c      	beq.n	8007468 <apps_common_lr11xx_radio_init+0x3c0>
 800742e:	7cbb      	ldrb	r3, [r7, #18]
 8007430:	2b03      	cmp	r3, #3
 8007432:	d119      	bne.n	8007468 <apps_common_lr11xx_radio_init+0x3c0>
 8007434:	480e      	ldr	r0, [pc, #56]	; (8007470 <apps_common_lr11xx_radio_init+0x3c8>)
 8007436:	f7fc fd0b 	bl	8003e50 <hal_mcu_trace_print>
 800743a:	480e      	ldr	r0, [pc, #56]	; (8007474 <apps_common_lr11xx_radio_init+0x3cc>)
 800743c:	f7fc fd08 	bl	8003e50 <hal_mcu_trace_print>
 8007440:	f240 11c5 	movw	r1, #453	; 0x1c5
 8007444:	480c      	ldr	r0, [pc, #48]	; (8007478 <apps_common_lr11xx_radio_init+0x3d0>)
 8007446:	f7fc fd03 	bl	8003e50 <hal_mcu_trace_print>
 800744a:	480c      	ldr	r0, [pc, #48]	; (800747c <apps_common_lr11xx_radio_init+0x3d4>)
 800744c:	f7fc fd00 	bl	8003e50 <hal_mcu_trace_print>
 8007450:	4b0b      	ldr	r3, [pc, #44]	; (8007480 <apps_common_lr11xx_radio_init+0x3d8>)
 8007452:	9300      	str	r3, [sp, #0]
 8007454:	f240 13c5 	movw	r3, #453	; 0x1c5
 8007458:	4a0a      	ldr	r2, [pc, #40]	; (8007484 <apps_common_lr11xx_radio_init+0x3dc>)
 800745a:	490b      	ldr	r1, [pc, #44]	; (8007488 <apps_common_lr11xx_radio_init+0x3e0>)
 800745c:	480b      	ldr	r0, [pc, #44]	; (800748c <apps_common_lr11xx_radio_init+0x3e4>)
 800745e:	f7fc fcf7 	bl	8003e50 <hal_mcu_trace_print>
 8007462:	480b      	ldr	r0, [pc, #44]	; (8007490 <apps_common_lr11xx_radio_init+0x3e8>)
 8007464:	f7fc fcf4 	bl	8003e50 <hal_mcu_trace_print>
            .pulse_shape = LR11XX_RADIO_LR_FHSS_PULSE_SHAPE_BT_1,
        };

        ASSERT_LR11XX_RC( lr11xx_radio_set_lr_fhss_mod_params( context, &mod_lr_fhss ) );
    }
}
 8007468:	bf00      	nop
 800746a:	3720      	adds	r7, #32
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}
 8007470:	0800bf68 	.word	0x0800bf68
 8007474:	0800bf70 	.word	0x0800bf70
 8007478:	0800bf80 	.word	0x0800bf80
 800747c:	0800bf88 	.word	0x0800bf88
 8007480:	0800bff4 	.word	0x0800bff4
 8007484:	0800daec 	.word	0x0800daec
 8007488:	0800bf90 	.word	0x0800bf90
 800748c:	0800bfd8 	.word	0x0800bfd8
 8007490:	0800c008 	.word	0x0800c008

08007494 <apps_common_lr11xx_irq_process>:
        HAL_DBG_TRACE_INFO( "  - RSSI sync = %i dBm\n\r", pkt_status_gfsk.rssi_sync_in_dbm );
    }
}

void apps_common_lr11xx_irq_process( const void* context, lr11xx_system_irq_mask_t irq_filter_mask )
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b084      	sub	sp, #16
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	6039      	str	r1, [r7, #0]
    if( irq_fired == true )
 800749e:	4b99      	ldr	r3, [pc, #612]	; (8007704 <apps_common_lr11xx_irq_process+0x270>)
 80074a0:	781b      	ldrb	r3, [r3, #0]
 80074a2:	b2db      	uxtb	r3, r3
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	f000 825f 	beq.w	8007968 <apps_common_lr11xx_irq_process+0x4d4>
    {
        irq_fired = false;
 80074aa:	4b96      	ldr	r3, [pc, #600]	; (8007704 <apps_common_lr11xx_irq_process+0x270>)
 80074ac:	2200      	movs	r2, #0
 80074ae:	701a      	strb	r2, [r3, #0]

        lr11xx_system_irq_mask_t irq_regs;
        lr11xx_system_get_and_clear_irq_status( context, &irq_regs );
 80074b0:	f107 030c 	add.w	r3, r7, #12
 80074b4:	4619      	mov	r1, r3
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f001 fc8c 	bl	8008dd4 <lr11xx_system_get_and_clear_irq_status>

        HAL_DBG_TRACE_INFO( "Interrupt flags = 0x%08X\n\r", irq_regs );
 80074bc:	4892      	ldr	r0, [pc, #584]	; (8007708 <apps_common_lr11xx_irq_process+0x274>)
 80074be:	f7fc fcc7 	bl	8003e50 <hal_mcu_trace_print>
 80074c2:	4892      	ldr	r0, [pc, #584]	; (800770c <apps_common_lr11xx_irq_process+0x278>)
 80074c4:	f7fc fcc4 	bl	8003e50 <hal_mcu_trace_print>
 80074c8:	f240 216e 	movw	r1, #622	; 0x26e
 80074cc:	4890      	ldr	r0, [pc, #576]	; (8007710 <apps_common_lr11xx_irq_process+0x27c>)
 80074ce:	f7fc fcbf 	bl	8003e50 <hal_mcu_trace_print>
 80074d2:	4890      	ldr	r0, [pc, #576]	; (8007714 <apps_common_lr11xx_irq_process+0x280>)
 80074d4:	f7fc fcbc 	bl	8003e50 <hal_mcu_trace_print>
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	4619      	mov	r1, r3
 80074dc:	488e      	ldr	r0, [pc, #568]	; (8007718 <apps_common_lr11xx_irq_process+0x284>)
 80074de:	f7fc fcb7 	bl	8003e50 <hal_mcu_trace_print>
 80074e2:	488e      	ldr	r0, [pc, #568]	; (800771c <apps_common_lr11xx_irq_process+0x288>)
 80074e4:	f7fc fcb4 	bl	8003e50 <hal_mcu_trace_print>

        irq_regs &= irq_filter_mask;
 80074e8:	68fa      	ldr	r2, [r7, #12]
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	4013      	ands	r3, r2
 80074ee:	60fb      	str	r3, [r7, #12]

        HAL_DBG_TRACE_INFO( "Interrupt flags (after filtering) = 0x%08X\n\r", irq_regs );
 80074f0:	4885      	ldr	r0, [pc, #532]	; (8007708 <apps_common_lr11xx_irq_process+0x274>)
 80074f2:	f7fc fcad 	bl	8003e50 <hal_mcu_trace_print>
 80074f6:	4885      	ldr	r0, [pc, #532]	; (800770c <apps_common_lr11xx_irq_process+0x278>)
 80074f8:	f7fc fcaa 	bl	8003e50 <hal_mcu_trace_print>
 80074fc:	f240 2172 	movw	r1, #626	; 0x272
 8007500:	4883      	ldr	r0, [pc, #524]	; (8007710 <apps_common_lr11xx_irq_process+0x27c>)
 8007502:	f7fc fca5 	bl	8003e50 <hal_mcu_trace_print>
 8007506:	4883      	ldr	r0, [pc, #524]	; (8007714 <apps_common_lr11xx_irq_process+0x280>)
 8007508:	f7fc fca2 	bl	8003e50 <hal_mcu_trace_print>
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	4619      	mov	r1, r3
 8007510:	4883      	ldr	r0, [pc, #524]	; (8007720 <apps_common_lr11xx_irq_process+0x28c>)
 8007512:	f7fc fc9d 	bl	8003e50 <hal_mcu_trace_print>
 8007516:	4881      	ldr	r0, [pc, #516]	; (800771c <apps_common_lr11xx_irq_process+0x288>)
 8007518:	f7fc fc9a 	bl	8003e50 <hal_mcu_trace_print>

        if( ( irq_regs & LR11XX_SYSTEM_IRQ_TX_DONE ) == LR11XX_SYSTEM_IRQ_TX_DONE )
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f003 0304 	and.w	r3, r3, #4
 8007522:	2b00      	cmp	r3, #0
 8007524:	d015      	beq.n	8007552 <apps_common_lr11xx_irq_process+0xbe>
        {
            HAL_DBG_TRACE_INFO( "Tx done\n\r" );
 8007526:	4878      	ldr	r0, [pc, #480]	; (8007708 <apps_common_lr11xx_irq_process+0x274>)
 8007528:	f7fc fc92 	bl	8003e50 <hal_mcu_trace_print>
 800752c:	4877      	ldr	r0, [pc, #476]	; (800770c <apps_common_lr11xx_irq_process+0x278>)
 800752e:	f7fc fc8f 	bl	8003e50 <hal_mcu_trace_print>
 8007532:	f240 2176 	movw	r1, #630	; 0x276
 8007536:	4876      	ldr	r0, [pc, #472]	; (8007710 <apps_common_lr11xx_irq_process+0x27c>)
 8007538:	f7fc fc8a 	bl	8003e50 <hal_mcu_trace_print>
 800753c:	4875      	ldr	r0, [pc, #468]	; (8007714 <apps_common_lr11xx_irq_process+0x280>)
 800753e:	f7fc fc87 	bl	8003e50 <hal_mcu_trace_print>
 8007542:	4878      	ldr	r0, [pc, #480]	; (8007724 <apps_common_lr11xx_irq_process+0x290>)
 8007544:	f7fc fc84 	bl	8003e50 <hal_mcu_trace_print>
 8007548:	4874      	ldr	r0, [pc, #464]	; (800771c <apps_common_lr11xx_irq_process+0x288>)
 800754a:	f7fc fc81 	bl	8003e50 <hal_mcu_trace_print>
            on_tx_done( );
 800754e:	f7fc faed 	bl	8003b2c <on_tx_done>
        }

        if( ( irq_regs & LR11XX_SYSTEM_IRQ_PREAMBLE_DETECTED ) == LR11XX_SYSTEM_IRQ_PREAMBLE_DETECTED )
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	f003 0310 	and.w	r3, r3, #16
 8007558:	2b00      	cmp	r3, #0
 800755a:	d015      	beq.n	8007588 <apps_common_lr11xx_irq_process+0xf4>
        {
            HAL_DBG_TRACE_INFO( "Preamble detected\n\r" );
 800755c:	486a      	ldr	r0, [pc, #424]	; (8007708 <apps_common_lr11xx_irq_process+0x274>)
 800755e:	f7fc fc77 	bl	8003e50 <hal_mcu_trace_print>
 8007562:	486a      	ldr	r0, [pc, #424]	; (800770c <apps_common_lr11xx_irq_process+0x278>)
 8007564:	f7fc fc74 	bl	8003e50 <hal_mcu_trace_print>
 8007568:	f44f 711f 	mov.w	r1, #636	; 0x27c
 800756c:	4868      	ldr	r0, [pc, #416]	; (8007710 <apps_common_lr11xx_irq_process+0x27c>)
 800756e:	f7fc fc6f 	bl	8003e50 <hal_mcu_trace_print>
 8007572:	4868      	ldr	r0, [pc, #416]	; (8007714 <apps_common_lr11xx_irq_process+0x280>)
 8007574:	f7fc fc6c 	bl	8003e50 <hal_mcu_trace_print>
 8007578:	486b      	ldr	r0, [pc, #428]	; (8007728 <apps_common_lr11xx_irq_process+0x294>)
 800757a:	f7fc fc69 	bl	8003e50 <hal_mcu_trace_print>
 800757e:	4867      	ldr	r0, [pc, #412]	; (800771c <apps_common_lr11xx_irq_process+0x288>)
 8007580:	f7fc fc66 	bl	8003e50 <hal_mcu_trace_print>
            on_preamble_detected( );
 8007584:	f000 fc84 	bl	8007e90 <on_preamble_detected>
        }

        if( ( irq_regs & LR11XX_SYSTEM_IRQ_HEADER_ERROR ) == LR11XX_SYSTEM_IRQ_HEADER_ERROR )
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800758e:	2b00      	cmp	r3, #0
 8007590:	d015      	beq.n	80075be <apps_common_lr11xx_irq_process+0x12a>
        {
            HAL_DBG_TRACE_ERROR( "Header error\n\r" );
 8007592:	4866      	ldr	r0, [pc, #408]	; (800772c <apps_common_lr11xx_irq_process+0x298>)
 8007594:	f7fc fc5c 	bl	8003e50 <hal_mcu_trace_print>
 8007598:	485c      	ldr	r0, [pc, #368]	; (800770c <apps_common_lr11xx_irq_process+0x278>)
 800759a:	f7fc fc59 	bl	8003e50 <hal_mcu_trace_print>
 800759e:	f240 2182 	movw	r1, #642	; 0x282
 80075a2:	485b      	ldr	r0, [pc, #364]	; (8007710 <apps_common_lr11xx_irq_process+0x27c>)
 80075a4:	f7fc fc54 	bl	8003e50 <hal_mcu_trace_print>
 80075a8:	4861      	ldr	r0, [pc, #388]	; (8007730 <apps_common_lr11xx_irq_process+0x29c>)
 80075aa:	f7fc fc51 	bl	8003e50 <hal_mcu_trace_print>
 80075ae:	4861      	ldr	r0, [pc, #388]	; (8007734 <apps_common_lr11xx_irq_process+0x2a0>)
 80075b0:	f7fc fc4e 	bl	8003e50 <hal_mcu_trace_print>
 80075b4:	4859      	ldr	r0, [pc, #356]	; (800771c <apps_common_lr11xx_irq_process+0x288>)
 80075b6:	f7fc fc4b 	bl	8003e50 <hal_mcu_trace_print>
            on_header_error( );
 80075ba:	f000 fcb1 	bl	8007f20 <on_header_error>
        }

        if( ( irq_regs & LR11XX_SYSTEM_IRQ_SYNC_WORD_HEADER_VALID ) == LR11XX_SYSTEM_IRQ_SYNC_WORD_HEADER_VALID )
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	f003 0320 	and.w	r3, r3, #32
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d015      	beq.n	80075f4 <apps_common_lr11xx_irq_process+0x160>
        {
            HAL_DBG_TRACE_INFO( "Syncword or header valid\n\r" );
 80075c8:	484f      	ldr	r0, [pc, #316]	; (8007708 <apps_common_lr11xx_irq_process+0x274>)
 80075ca:	f7fc fc41 	bl	8003e50 <hal_mcu_trace_print>
 80075ce:	484f      	ldr	r0, [pc, #316]	; (800770c <apps_common_lr11xx_irq_process+0x278>)
 80075d0:	f7fc fc3e 	bl	8003e50 <hal_mcu_trace_print>
 80075d4:	f44f 7122 	mov.w	r1, #648	; 0x288
 80075d8:	484d      	ldr	r0, [pc, #308]	; (8007710 <apps_common_lr11xx_irq_process+0x27c>)
 80075da:	f7fc fc39 	bl	8003e50 <hal_mcu_trace_print>
 80075de:	484d      	ldr	r0, [pc, #308]	; (8007714 <apps_common_lr11xx_irq_process+0x280>)
 80075e0:	f7fc fc36 	bl	8003e50 <hal_mcu_trace_print>
 80075e4:	4854      	ldr	r0, [pc, #336]	; (8007738 <apps_common_lr11xx_irq_process+0x2a4>)
 80075e6:	f7fc fc33 	bl	8003e50 <hal_mcu_trace_print>
 80075ea:	484c      	ldr	r0, [pc, #304]	; (800771c <apps_common_lr11xx_irq_process+0x288>)
 80075ec:	f7fc fc30 	bl	8003e50 <hal_mcu_trace_print>
            on_syncword_header_valid( );
 80075f0:	f000 fc72 	bl	8007ed8 <on_syncword_header_valid>
        }

        if( ( irq_regs & LR11XX_SYSTEM_IRQ_RX_DONE ) == LR11XX_SYSTEM_IRQ_RX_DONE )
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f003 0308 	and.w	r3, r3, #8
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d04d      	beq.n	800769a <apps_common_lr11xx_irq_process+0x206>
        {
            if( ( irq_regs & LR11XX_SYSTEM_IRQ_CRC_ERROR ) == LR11XX_SYSTEM_IRQ_CRC_ERROR )
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007604:	2b00      	cmp	r3, #0
 8007606:	d016      	beq.n	8007636 <apps_common_lr11xx_irq_process+0x1a2>
            {
                HAL_DBG_TRACE_ERROR( "CRC error\n\r" );
 8007608:	4848      	ldr	r0, [pc, #288]	; (800772c <apps_common_lr11xx_irq_process+0x298>)
 800760a:	f7fc fc21 	bl	8003e50 <hal_mcu_trace_print>
 800760e:	483f      	ldr	r0, [pc, #252]	; (800770c <apps_common_lr11xx_irq_process+0x278>)
 8007610:	f7fc fc1e 	bl	8003e50 <hal_mcu_trace_print>
 8007614:	f44f 7124 	mov.w	r1, #656	; 0x290
 8007618:	483d      	ldr	r0, [pc, #244]	; (8007710 <apps_common_lr11xx_irq_process+0x27c>)
 800761a:	f7fc fc19 	bl	8003e50 <hal_mcu_trace_print>
 800761e:	4844      	ldr	r0, [pc, #272]	; (8007730 <apps_common_lr11xx_irq_process+0x29c>)
 8007620:	f7fc fc16 	bl	8003e50 <hal_mcu_trace_print>
 8007624:	4845      	ldr	r0, [pc, #276]	; (800773c <apps_common_lr11xx_irq_process+0x2a8>)
 8007626:	f7fc fc13 	bl	8003e50 <hal_mcu_trace_print>
 800762a:	483c      	ldr	r0, [pc, #240]	; (800771c <apps_common_lr11xx_irq_process+0x288>)
 800762c:	f7fc fc10 	bl	8003e50 <hal_mcu_trace_print>
                on_rx_crc_error( );
 8007630:	f7fc fb5a 	bl	8003ce8 <on_rx_crc_error>
 8007634:	e031      	b.n	800769a <apps_common_lr11xx_irq_process+0x206>
            }
            else if( ( irq_regs & LR11XX_SYSTEM_IRQ_FSK_LEN_ERROR ) == LR11XX_SYSTEM_IRQ_FSK_LEN_ERROR )
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800763c:	2b00      	cmp	r3, #0
 800763e:	d016      	beq.n	800766e <apps_common_lr11xx_irq_process+0x1da>
            {
                HAL_DBG_TRACE_ERROR( "FSK length error\n\r" );
 8007640:	483a      	ldr	r0, [pc, #232]	; (800772c <apps_common_lr11xx_irq_process+0x298>)
 8007642:	f7fc fc05 	bl	8003e50 <hal_mcu_trace_print>
 8007646:	4831      	ldr	r0, [pc, #196]	; (800770c <apps_common_lr11xx_irq_process+0x278>)
 8007648:	f7fc fc02 	bl	8003e50 <hal_mcu_trace_print>
 800764c:	f240 2195 	movw	r1, #661	; 0x295
 8007650:	482f      	ldr	r0, [pc, #188]	; (8007710 <apps_common_lr11xx_irq_process+0x27c>)
 8007652:	f7fc fbfd 	bl	8003e50 <hal_mcu_trace_print>
 8007656:	4836      	ldr	r0, [pc, #216]	; (8007730 <apps_common_lr11xx_irq_process+0x29c>)
 8007658:	f7fc fbfa 	bl	8003e50 <hal_mcu_trace_print>
 800765c:	4838      	ldr	r0, [pc, #224]	; (8007740 <apps_common_lr11xx_irq_process+0x2ac>)
 800765e:	f7fc fbf7 	bl	8003e50 <hal_mcu_trace_print>
 8007662:	482e      	ldr	r0, [pc, #184]	; (800771c <apps_common_lr11xx_irq_process+0x288>)
 8007664:	f7fc fbf4 	bl	8003e50 <hal_mcu_trace_print>
                on_fsk_len_error( );
 8007668:	f7fc fb44 	bl	8003cf4 <on_fsk_len_error>
 800766c:	e015      	b.n	800769a <apps_common_lr11xx_irq_process+0x206>
            }
            else
            {
                HAL_DBG_TRACE_INFO( "Rx done\n\r" );
 800766e:	4826      	ldr	r0, [pc, #152]	; (8007708 <apps_common_lr11xx_irq_process+0x274>)
 8007670:	f7fc fbee 	bl	8003e50 <hal_mcu_trace_print>
 8007674:	4825      	ldr	r0, [pc, #148]	; (800770c <apps_common_lr11xx_irq_process+0x278>)
 8007676:	f7fc fbeb 	bl	8003e50 <hal_mcu_trace_print>
 800767a:	f240 219a 	movw	r1, #666	; 0x29a
 800767e:	4824      	ldr	r0, [pc, #144]	; (8007710 <apps_common_lr11xx_irq_process+0x27c>)
 8007680:	f7fc fbe6 	bl	8003e50 <hal_mcu_trace_print>
 8007684:	4823      	ldr	r0, [pc, #140]	; (8007714 <apps_common_lr11xx_irq_process+0x280>)
 8007686:	f7fc fbe3 	bl	8003e50 <hal_mcu_trace_print>
 800768a:	482e      	ldr	r0, [pc, #184]	; (8007744 <apps_common_lr11xx_irq_process+0x2b0>)
 800768c:	f7fc fbe0 	bl	8003e50 <hal_mcu_trace_print>
 8007690:	4822      	ldr	r0, [pc, #136]	; (800771c <apps_common_lr11xx_irq_process+0x288>)
 8007692:	f7fc fbdd 	bl	8003e50 <hal_mcu_trace_print>
                on_rx_done( );
 8007696:	f000 fbd7 	bl	8007e48 <on_rx_done>
            }
        }

        if( ( irq_regs & LR11XX_SYSTEM_IRQ_CAD_DONE ) == LR11XX_SYSTEM_IRQ_CAD_DONE )
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d06b      	beq.n	800777c <apps_common_lr11xx_irq_process+0x2e8>
        {
            HAL_DBG_TRACE_INFO( "CAD done\n\r" );
 80076a4:	4818      	ldr	r0, [pc, #96]	; (8007708 <apps_common_lr11xx_irq_process+0x274>)
 80076a6:	f7fc fbd3 	bl	8003e50 <hal_mcu_trace_print>
 80076aa:	4818      	ldr	r0, [pc, #96]	; (800770c <apps_common_lr11xx_irq_process+0x278>)
 80076ac:	f7fc fbd0 	bl	8003e50 <hal_mcu_trace_print>
 80076b0:	f240 21a1 	movw	r1, #673	; 0x2a1
 80076b4:	4816      	ldr	r0, [pc, #88]	; (8007710 <apps_common_lr11xx_irq_process+0x27c>)
 80076b6:	f7fc fbcb 	bl	8003e50 <hal_mcu_trace_print>
 80076ba:	4816      	ldr	r0, [pc, #88]	; (8007714 <apps_common_lr11xx_irq_process+0x280>)
 80076bc:	f7fc fbc8 	bl	8003e50 <hal_mcu_trace_print>
 80076c0:	4821      	ldr	r0, [pc, #132]	; (8007748 <apps_common_lr11xx_irq_process+0x2b4>)
 80076c2:	f7fc fbc5 	bl	8003e50 <hal_mcu_trace_print>
 80076c6:	4815      	ldr	r0, [pc, #84]	; (800771c <apps_common_lr11xx_irq_process+0x288>)
 80076c8:	f7fc fbc2 	bl	8003e50 <hal_mcu_trace_print>
            if( ( irq_regs & LR11XX_SYSTEM_IRQ_CAD_DETECTED ) == LR11XX_SYSTEM_IRQ_CAD_DETECTED )
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d03c      	beq.n	8007750 <apps_common_lr11xx_irq_process+0x2bc>
            {
                HAL_DBG_TRACE_INFO( "Channel activity detected\n\r" );
 80076d6:	480c      	ldr	r0, [pc, #48]	; (8007708 <apps_common_lr11xx_irq_process+0x274>)
 80076d8:	f7fc fbba 	bl	8003e50 <hal_mcu_trace_print>
 80076dc:	480b      	ldr	r0, [pc, #44]	; (800770c <apps_common_lr11xx_irq_process+0x278>)
 80076de:	f7fc fbb7 	bl	8003e50 <hal_mcu_trace_print>
 80076e2:	f44f 7129 	mov.w	r1, #676	; 0x2a4
 80076e6:	480a      	ldr	r0, [pc, #40]	; (8007710 <apps_common_lr11xx_irq_process+0x27c>)
 80076e8:	f7fc fbb2 	bl	8003e50 <hal_mcu_trace_print>
 80076ec:	4809      	ldr	r0, [pc, #36]	; (8007714 <apps_common_lr11xx_irq_process+0x280>)
 80076ee:	f7fc fbaf 	bl	8003e50 <hal_mcu_trace_print>
 80076f2:	4816      	ldr	r0, [pc, #88]	; (800774c <apps_common_lr11xx_irq_process+0x2b8>)
 80076f4:	f7fc fbac 	bl	8003e50 <hal_mcu_trace_print>
 80076f8:	4808      	ldr	r0, [pc, #32]	; (800771c <apps_common_lr11xx_irq_process+0x288>)
 80076fa:	f7fc fba9 	bl	8003e50 <hal_mcu_trace_print>
                on_cad_done_detected( );
 80076fe:	f000 fc57 	bl	8007fb0 <on_cad_done_detected>
 8007702:	e03b      	b.n	800777c <apps_common_lr11xx_irq_process+0x2e8>
 8007704:	20000ae4 	.word	0x20000ae4
 8007708:	0800c010 	.word	0x0800c010
 800770c:	0800bf70 	.word	0x0800bf70
 8007710:	0800bf80 	.word	0x0800bf80
 8007714:	0800c018 	.word	0x0800c018
 8007718:	0800c358 	.word	0x0800c358
 800771c:	0800c008 	.word	0x0800c008
 8007720:	0800c374 	.word	0x0800c374
 8007724:	0800c3a4 	.word	0x0800c3a4
 8007728:	0800c3b0 	.word	0x0800c3b0
 800772c:	0800bf68 	.word	0x0800bf68
 8007730:	0800bf88 	.word	0x0800bf88
 8007734:	0800c3c4 	.word	0x0800c3c4
 8007738:	0800c3d4 	.word	0x0800c3d4
 800773c:	0800c3f0 	.word	0x0800c3f0
 8007740:	0800c3fc 	.word	0x0800c3fc
 8007744:	0800c410 	.word	0x0800c410
 8007748:	0800c41c 	.word	0x0800c41c
 800774c:	0800c428 	.word	0x0800c428
            }
            else
            {
                HAL_DBG_TRACE_INFO( "No channel activity detected\n\r" );
 8007750:	4887      	ldr	r0, [pc, #540]	; (8007970 <apps_common_lr11xx_irq_process+0x4dc>)
 8007752:	f7fc fb7d 	bl	8003e50 <hal_mcu_trace_print>
 8007756:	4887      	ldr	r0, [pc, #540]	; (8007974 <apps_common_lr11xx_irq_process+0x4e0>)
 8007758:	f7fc fb7a 	bl	8003e50 <hal_mcu_trace_print>
 800775c:	f240 21a9 	movw	r1, #681	; 0x2a9
 8007760:	4885      	ldr	r0, [pc, #532]	; (8007978 <apps_common_lr11xx_irq_process+0x4e4>)
 8007762:	f7fc fb75 	bl	8003e50 <hal_mcu_trace_print>
 8007766:	4885      	ldr	r0, [pc, #532]	; (800797c <apps_common_lr11xx_irq_process+0x4e8>)
 8007768:	f7fc fb72 	bl	8003e50 <hal_mcu_trace_print>
 800776c:	4884      	ldr	r0, [pc, #528]	; (8007980 <apps_common_lr11xx_irq_process+0x4ec>)
 800776e:	f7fc fb6f 	bl	8003e50 <hal_mcu_trace_print>
 8007772:	4884      	ldr	r0, [pc, #528]	; (8007984 <apps_common_lr11xx_irq_process+0x4f0>)
 8007774:	f7fc fb6c 	bl	8003e50 <hal_mcu_trace_print>
                on_cad_done_undetected( );
 8007778:	f000 fbf6 	bl	8007f68 <on_cad_done_undetected>
            }
        }

        if( ( irq_regs & LR11XX_SYSTEM_IRQ_TIMEOUT ) == LR11XX_SYSTEM_IRQ_TIMEOUT )
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007782:	2b00      	cmp	r3, #0
 8007784:	d015      	beq.n	80077b2 <apps_common_lr11xx_irq_process+0x31e>
        {
            HAL_DBG_TRACE_WARNING( "Rx timeout\n\r" );
 8007786:	4880      	ldr	r0, [pc, #512]	; (8007988 <apps_common_lr11xx_irq_process+0x4f4>)
 8007788:	f7fc fb62 	bl	8003e50 <hal_mcu_trace_print>
 800778c:	4879      	ldr	r0, [pc, #484]	; (8007974 <apps_common_lr11xx_irq_process+0x4e0>)
 800778e:	f7fc fb5f 	bl	8003e50 <hal_mcu_trace_print>
 8007792:	f44f 712c 	mov.w	r1, #688	; 0x2b0
 8007796:	4878      	ldr	r0, [pc, #480]	; (8007978 <apps_common_lr11xx_irq_process+0x4e4>)
 8007798:	f7fc fb5a 	bl	8003e50 <hal_mcu_trace_print>
 800779c:	487b      	ldr	r0, [pc, #492]	; (800798c <apps_common_lr11xx_irq_process+0x4f8>)
 800779e:	f7fc fb57 	bl	8003e50 <hal_mcu_trace_print>
 80077a2:	487b      	ldr	r0, [pc, #492]	; (8007990 <apps_common_lr11xx_irq_process+0x4fc>)
 80077a4:	f7fc fb54 	bl	8003e50 <hal_mcu_trace_print>
 80077a8:	4876      	ldr	r0, [pc, #472]	; (8007984 <apps_common_lr11xx_irq_process+0x4f0>)
 80077aa:	f7fc fb51 	bl	8003e50 <hal_mcu_trace_print>
            on_rx_timeout( );
 80077ae:	f7fc fa69 	bl	8003c84 <on_rx_timeout>
        }

        if( ( irq_regs & LR11XX_SYSTEM_IRQ_LORA_RX_TIMESTAMP ) == LR11XX_SYSTEM_IRQ_LORA_RX_TIMESTAMP )
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d015      	beq.n	80077e8 <apps_common_lr11xx_irq_process+0x354>
        {
            HAL_DBG_TRACE_INFO( "LoRa Rx timestamp\n\r" );
 80077bc:	486c      	ldr	r0, [pc, #432]	; (8007970 <apps_common_lr11xx_irq_process+0x4dc>)
 80077be:	f7fc fb47 	bl	8003e50 <hal_mcu_trace_print>
 80077c2:	486c      	ldr	r0, [pc, #432]	; (8007974 <apps_common_lr11xx_irq_process+0x4e0>)
 80077c4:	f7fc fb44 	bl	8003e50 <hal_mcu_trace_print>
 80077c8:	f240 21b6 	movw	r1, #694	; 0x2b6
 80077cc:	486a      	ldr	r0, [pc, #424]	; (8007978 <apps_common_lr11xx_irq_process+0x4e4>)
 80077ce:	f7fc fb3f 	bl	8003e50 <hal_mcu_trace_print>
 80077d2:	486a      	ldr	r0, [pc, #424]	; (800797c <apps_common_lr11xx_irq_process+0x4e8>)
 80077d4:	f7fc fb3c 	bl	8003e50 <hal_mcu_trace_print>
 80077d8:	486e      	ldr	r0, [pc, #440]	; (8007994 <apps_common_lr11xx_irq_process+0x500>)
 80077da:	f7fc fb39 	bl	8003e50 <hal_mcu_trace_print>
 80077de:	4869      	ldr	r0, [pc, #420]	; (8007984 <apps_common_lr11xx_irq_process+0x4f0>)
 80077e0:	f7fc fb36 	bl	8003e50 <hal_mcu_trace_print>
            on_lora_rx_timestamp( );
 80077e4:	f000 fc08 	bl	8007ff8 <on_lora_rx_timestamp>
        }

        if( ( irq_regs & LR11XX_SYSTEM_IRQ_RTTOF_REQ_VALID ) == LR11XX_SYSTEM_IRQ_RTTOF_REQ_VALID )
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d015      	beq.n	800781e <apps_common_lr11xx_irq_process+0x38a>
        {
            HAL_DBG_TRACE_INFO( "RTToF request valid\n\r" );
 80077f2:	485f      	ldr	r0, [pc, #380]	; (8007970 <apps_common_lr11xx_irq_process+0x4dc>)
 80077f4:	f7fc fb2c 	bl	8003e50 <hal_mcu_trace_print>
 80077f8:	485e      	ldr	r0, [pc, #376]	; (8007974 <apps_common_lr11xx_irq_process+0x4e0>)
 80077fa:	f7fc fb29 	bl	8003e50 <hal_mcu_trace_print>
 80077fe:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8007802:	485d      	ldr	r0, [pc, #372]	; (8007978 <apps_common_lr11xx_irq_process+0x4e4>)
 8007804:	f7fc fb24 	bl	8003e50 <hal_mcu_trace_print>
 8007808:	485c      	ldr	r0, [pc, #368]	; (800797c <apps_common_lr11xx_irq_process+0x4e8>)
 800780a:	f7fc fb21 	bl	8003e50 <hal_mcu_trace_print>
 800780e:	4862      	ldr	r0, [pc, #392]	; (8007998 <apps_common_lr11xx_irq_process+0x504>)
 8007810:	f7fc fb1e 	bl	8003e50 <hal_mcu_trace_print>
 8007814:	485b      	ldr	r0, [pc, #364]	; (8007984 <apps_common_lr11xx_irq_process+0x4f0>)
 8007816:	f7fc fb1b 	bl	8003e50 <hal_mcu_trace_print>
            on_rttof_request_valid( );
 800781a:	f3af 8000 	nop.w
        }

        if( ( irq_regs & LR11XX_SYSTEM_IRQ_RTTOF_REQ_DISCARDED ) == LR11XX_SYSTEM_IRQ_RTTOF_REQ_DISCARDED )
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007824:	2b00      	cmp	r3, #0
 8007826:	d015      	beq.n	8007854 <apps_common_lr11xx_irq_process+0x3c0>
        {
            HAL_DBG_TRACE_INFO( "RTToF request discarded\n\r" );
 8007828:	4851      	ldr	r0, [pc, #324]	; (8007970 <apps_common_lr11xx_irq_process+0x4dc>)
 800782a:	f7fc fb11 	bl	8003e50 <hal_mcu_trace_print>
 800782e:	4851      	ldr	r0, [pc, #324]	; (8007974 <apps_common_lr11xx_irq_process+0x4e0>)
 8007830:	f7fc fb0e 	bl	8003e50 <hal_mcu_trace_print>
 8007834:	f240 21c2 	movw	r1, #706	; 0x2c2
 8007838:	484f      	ldr	r0, [pc, #316]	; (8007978 <apps_common_lr11xx_irq_process+0x4e4>)
 800783a:	f7fc fb09 	bl	8003e50 <hal_mcu_trace_print>
 800783e:	484f      	ldr	r0, [pc, #316]	; (800797c <apps_common_lr11xx_irq_process+0x4e8>)
 8007840:	f7fc fb06 	bl	8003e50 <hal_mcu_trace_print>
 8007844:	4855      	ldr	r0, [pc, #340]	; (800799c <apps_common_lr11xx_irq_process+0x508>)
 8007846:	f7fc fb03 	bl	8003e50 <hal_mcu_trace_print>
 800784a:	484e      	ldr	r0, [pc, #312]	; (8007984 <apps_common_lr11xx_irq_process+0x4f0>)
 800784c:	f7fc fb00 	bl	8003e50 <hal_mcu_trace_print>
            on_rttof_request_discarded( );
 8007850:	f3af 8000 	nop.w
        }

        if( ( irq_regs & LR11XX_SYSTEM_IRQ_RTTOF_RESP_DONE ) == LR11XX_SYSTEM_IRQ_RTTOF_RESP_DONE )
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800785a:	2b00      	cmp	r3, #0
 800785c:	d015      	beq.n	800788a <apps_common_lr11xx_irq_process+0x3f6>
        {
            HAL_DBG_TRACE_INFO( "RTToF response done\n\r" );
 800785e:	4844      	ldr	r0, [pc, #272]	; (8007970 <apps_common_lr11xx_irq_process+0x4dc>)
 8007860:	f7fc faf6 	bl	8003e50 <hal_mcu_trace_print>
 8007864:	4843      	ldr	r0, [pc, #268]	; (8007974 <apps_common_lr11xx_irq_process+0x4e0>)
 8007866:	f7fc faf3 	bl	8003e50 <hal_mcu_trace_print>
 800786a:	f44f 7132 	mov.w	r1, #712	; 0x2c8
 800786e:	4842      	ldr	r0, [pc, #264]	; (8007978 <apps_common_lr11xx_irq_process+0x4e4>)
 8007870:	f7fc faee 	bl	8003e50 <hal_mcu_trace_print>
 8007874:	4841      	ldr	r0, [pc, #260]	; (800797c <apps_common_lr11xx_irq_process+0x4e8>)
 8007876:	f7fc faeb 	bl	8003e50 <hal_mcu_trace_print>
 800787a:	4849      	ldr	r0, [pc, #292]	; (80079a0 <apps_common_lr11xx_irq_process+0x50c>)
 800787c:	f7fc fae8 	bl	8003e50 <hal_mcu_trace_print>
 8007880:	4840      	ldr	r0, [pc, #256]	; (8007984 <apps_common_lr11xx_irq_process+0x4f0>)
 8007882:	f7fc fae5 	bl	8003e50 <hal_mcu_trace_print>
            on_rttof_response_done( );
 8007886:	f3af 8000 	nop.w
        }

        if( ( irq_regs & LR11XX_SYSTEM_IRQ_RTTOF_EXCH_VALID ) == LR11XX_SYSTEM_IRQ_RTTOF_EXCH_VALID )
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007890:	2b00      	cmp	r3, #0
 8007892:	d015      	beq.n	80078c0 <apps_common_lr11xx_irq_process+0x42c>
        {
            HAL_DBG_TRACE_INFO( "RTToF exchange valid\n\r" );
 8007894:	4836      	ldr	r0, [pc, #216]	; (8007970 <apps_common_lr11xx_irq_process+0x4dc>)
 8007896:	f7fc fadb 	bl	8003e50 <hal_mcu_trace_print>
 800789a:	4836      	ldr	r0, [pc, #216]	; (8007974 <apps_common_lr11xx_irq_process+0x4e0>)
 800789c:	f7fc fad8 	bl	8003e50 <hal_mcu_trace_print>
 80078a0:	f240 21ce 	movw	r1, #718	; 0x2ce
 80078a4:	4834      	ldr	r0, [pc, #208]	; (8007978 <apps_common_lr11xx_irq_process+0x4e4>)
 80078a6:	f7fc fad3 	bl	8003e50 <hal_mcu_trace_print>
 80078aa:	4834      	ldr	r0, [pc, #208]	; (800797c <apps_common_lr11xx_irq_process+0x4e8>)
 80078ac:	f7fc fad0 	bl	8003e50 <hal_mcu_trace_print>
 80078b0:	483c      	ldr	r0, [pc, #240]	; (80079a4 <apps_common_lr11xx_irq_process+0x510>)
 80078b2:	f7fc facd 	bl	8003e50 <hal_mcu_trace_print>
 80078b6:	4833      	ldr	r0, [pc, #204]	; (8007984 <apps_common_lr11xx_irq_process+0x4f0>)
 80078b8:	f7fc faca 	bl	8003e50 <hal_mcu_trace_print>
            on_rttof_exchange_valid( );
 80078bc:	f3af 8000 	nop.w
        }

        if( ( irq_regs & LR11XX_SYSTEM_IRQ_RTTOF_TIMEOUT ) == LR11XX_SYSTEM_IRQ_RTTOF_TIMEOUT )
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d015      	beq.n	80078f6 <apps_common_lr11xx_irq_process+0x462>
        {
            HAL_DBG_TRACE_INFO( "RTToF timeout\n\r" );
 80078ca:	4829      	ldr	r0, [pc, #164]	; (8007970 <apps_common_lr11xx_irq_process+0x4dc>)
 80078cc:	f7fc fac0 	bl	8003e50 <hal_mcu_trace_print>
 80078d0:	4828      	ldr	r0, [pc, #160]	; (8007974 <apps_common_lr11xx_irq_process+0x4e0>)
 80078d2:	f7fc fabd 	bl	8003e50 <hal_mcu_trace_print>
 80078d6:	f44f 7135 	mov.w	r1, #724	; 0x2d4
 80078da:	4827      	ldr	r0, [pc, #156]	; (8007978 <apps_common_lr11xx_irq_process+0x4e4>)
 80078dc:	f7fc fab8 	bl	8003e50 <hal_mcu_trace_print>
 80078e0:	4826      	ldr	r0, [pc, #152]	; (800797c <apps_common_lr11xx_irq_process+0x4e8>)
 80078e2:	f7fc fab5 	bl	8003e50 <hal_mcu_trace_print>
 80078e6:	4830      	ldr	r0, [pc, #192]	; (80079a8 <apps_common_lr11xx_irq_process+0x514>)
 80078e8:	f7fc fab2 	bl	8003e50 <hal_mcu_trace_print>
 80078ec:	4825      	ldr	r0, [pc, #148]	; (8007984 <apps_common_lr11xx_irq_process+0x4f0>)
 80078ee:	f7fc faaf 	bl	8003e50 <hal_mcu_trace_print>
            on_rttof_timeout( );
 80078f2:	f3af 8000 	nop.w
        }

        if( ( irq_regs & LR11XX_SYSTEM_IRQ_WIFI_SCAN_DONE ) == LR11XX_SYSTEM_IRQ_WIFI_SCAN_DONE )
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d015      	beq.n	800792c <apps_common_lr11xx_irq_process+0x498>
        {
            HAL_DBG_TRACE_INFO( "Wi-Fi scan done\n\r" );
 8007900:	481b      	ldr	r0, [pc, #108]	; (8007970 <apps_common_lr11xx_irq_process+0x4dc>)
 8007902:	f7fc faa5 	bl	8003e50 <hal_mcu_trace_print>
 8007906:	481b      	ldr	r0, [pc, #108]	; (8007974 <apps_common_lr11xx_irq_process+0x4e0>)
 8007908:	f7fc faa2 	bl	8003e50 <hal_mcu_trace_print>
 800790c:	f240 21da 	movw	r1, #730	; 0x2da
 8007910:	4819      	ldr	r0, [pc, #100]	; (8007978 <apps_common_lr11xx_irq_process+0x4e4>)
 8007912:	f7fc fa9d 	bl	8003e50 <hal_mcu_trace_print>
 8007916:	4819      	ldr	r0, [pc, #100]	; (800797c <apps_common_lr11xx_irq_process+0x4e8>)
 8007918:	f7fc fa9a 	bl	8003e50 <hal_mcu_trace_print>
 800791c:	4823      	ldr	r0, [pc, #140]	; (80079ac <apps_common_lr11xx_irq_process+0x518>)
 800791e:	f7fc fa97 	bl	8003e50 <hal_mcu_trace_print>
 8007922:	4818      	ldr	r0, [pc, #96]	; (8007984 <apps_common_lr11xx_irq_process+0x4f0>)
 8007924:	f7fc fa94 	bl	8003e50 <hal_mcu_trace_print>
            on_wifi_scan_done( );
 8007928:	f000 fb8a 	bl	8008040 <on_wifi_scan_done>
        }

        if( ( irq_regs & LR11XX_SYSTEM_IRQ_GNSS_SCAN_DONE ) == LR11XX_SYSTEM_IRQ_GNSS_SCAN_DONE )
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007932:	2b00      	cmp	r3, #0
 8007934:	d015      	beq.n	8007962 <apps_common_lr11xx_irq_process+0x4ce>
        {
            HAL_DBG_TRACE_INFO( "GNSS scan done\n\r" );
 8007936:	480e      	ldr	r0, [pc, #56]	; (8007970 <apps_common_lr11xx_irq_process+0x4dc>)
 8007938:	f7fc fa8a 	bl	8003e50 <hal_mcu_trace_print>
 800793c:	480d      	ldr	r0, [pc, #52]	; (8007974 <apps_common_lr11xx_irq_process+0x4e0>)
 800793e:	f7fc fa87 	bl	8003e50 <hal_mcu_trace_print>
 8007942:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 8007946:	480c      	ldr	r0, [pc, #48]	; (8007978 <apps_common_lr11xx_irq_process+0x4e4>)
 8007948:	f7fc fa82 	bl	8003e50 <hal_mcu_trace_print>
 800794c:	480b      	ldr	r0, [pc, #44]	; (800797c <apps_common_lr11xx_irq_process+0x4e8>)
 800794e:	f7fc fa7f 	bl	8003e50 <hal_mcu_trace_print>
 8007952:	4817      	ldr	r0, [pc, #92]	; (80079b0 <apps_common_lr11xx_irq_process+0x51c>)
 8007954:	f7fc fa7c 	bl	8003e50 <hal_mcu_trace_print>
 8007958:	480a      	ldr	r0, [pc, #40]	; (8007984 <apps_common_lr11xx_irq_process+0x4f0>)
 800795a:	f7fc fa79 	bl	8003e50 <hal_mcu_trace_print>
            on_gnss_scan_done( );
 800795e:	f000 fb93 	bl	8008088 <on_gnss_scan_done>
        }

        HAL_DBG_TRACE_PRINTF( "\n\r" );
 8007962:	4814      	ldr	r0, [pc, #80]	; (80079b4 <apps_common_lr11xx_irq_process+0x520>)
 8007964:	f7fc fa74 	bl	8003e50 <hal_mcu_trace_print>
    }
}
 8007968:	bf00      	nop
 800796a:	3710      	adds	r7, #16
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}
 8007970:	0800c010 	.word	0x0800c010
 8007974:	0800bf70 	.word	0x0800bf70
 8007978:	0800bf80 	.word	0x0800bf80
 800797c:	0800c018 	.word	0x0800c018
 8007980:	0800c444 	.word	0x0800c444
 8007984:	0800c008 	.word	0x0800c008
 8007988:	0800c0b4 	.word	0x0800c0b4
 800798c:	0800c0bc 	.word	0x0800c0bc
 8007990:	0800c464 	.word	0x0800c464
 8007994:	0800c474 	.word	0x0800c474
 8007998:	0800c488 	.word	0x0800c488
 800799c:	0800c4a0 	.word	0x0800c4a0
 80079a0:	0800c4bc 	.word	0x0800c4bc
 80079a4:	0800c4d4 	.word	0x0800c4d4
 80079a8:	0800c4ec 	.word	0x0800c4ec
 80079ac:	0800c4fc 	.word	0x0800c4fc
 80079b0:	0800c510 	.word	0x0800c510
 80079b4:	0800c190 	.word	0x0800c190

080079b8 <apps_common_lr11xx_handle_pre_tx>:

void apps_common_lr11xx_handle_pre_tx( void )
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	af00      	add	r7, sp, #0
    if( shield_pinout->led_tx != SMTC_SHIELD_PINOUT_NONE )
 80079bc:	4b06      	ldr	r3, [pc, #24]	; (80079d8 <apps_common_lr11xx_handle_pre_tx+0x20>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	795b      	ldrb	r3, [r3, #5]
 80079c2:	2b16      	cmp	r3, #22
 80079c4:	d005      	beq.n	80079d2 <apps_common_lr11xx_handle_pre_tx+0x1a>
    {
        smtc_hal_mcu_gpio_set_state( led_tx.inst, SMTC_HAL_MCU_GPIO_STATE_HIGH );
 80079c6:	4b05      	ldr	r3, [pc, #20]	; (80079dc <apps_common_lr11xx_handle_pre_tx+0x24>)
 80079c8:	689b      	ldr	r3, [r3, #8]
 80079ca:	2101      	movs	r1, #1
 80079cc:	4618      	mov	r0, r3
 80079ce:	f7fc fd09 	bl	80043e4 <smtc_hal_mcu_gpio_set_state>
    }
}
 80079d2:	bf00      	nop
 80079d4:	bd80      	pop	{r7, pc}
 80079d6:	bf00      	nop
 80079d8:	20000ae8 	.word	0x20000ae8
 80079dc:	20000aec 	.word	0x20000aec

080079e0 <apps_common_lr11xx_handle_post_tx>:

void apps_common_lr11xx_handle_post_tx( void )
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	af00      	add	r7, sp, #0
    if( shield_pinout->led_tx != SMTC_SHIELD_PINOUT_NONE )
 80079e4:	4b06      	ldr	r3, [pc, #24]	; (8007a00 <apps_common_lr11xx_handle_post_tx+0x20>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	795b      	ldrb	r3, [r3, #5]
 80079ea:	2b16      	cmp	r3, #22
 80079ec:	d005      	beq.n	80079fa <apps_common_lr11xx_handle_post_tx+0x1a>
    {
        smtc_hal_mcu_gpio_set_state( led_tx.inst, SMTC_HAL_MCU_GPIO_STATE_LOW );
 80079ee:	4b05      	ldr	r3, [pc, #20]	; (8007a04 <apps_common_lr11xx_handle_post_tx+0x24>)
 80079f0:	689b      	ldr	r3, [r3, #8]
 80079f2:	2100      	movs	r1, #0
 80079f4:	4618      	mov	r0, r3
 80079f6:	f7fc fcf5 	bl	80043e4 <smtc_hal_mcu_gpio_set_state>
    }
}
 80079fa:	bf00      	nop
 80079fc:	bd80      	pop	{r7, pc}
 80079fe:	bf00      	nop
 8007a00:	20000ae8 	.word	0x20000ae8
 8007a04:	20000aec 	.word	0x20000aec

08007a08 <apps_common_lr11xx_handle_post_rx>:
        smtc_hal_mcu_gpio_set_state( led_rx.inst, SMTC_HAL_MCU_GPIO_STATE_HIGH );
    }
}

void apps_common_lr11xx_handle_post_rx( void )
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	af00      	add	r7, sp, #0
    if( shield_pinout->led_rx != SMTC_SHIELD_PINOUT_NONE )
 8007a0c:	4b06      	ldr	r3, [pc, #24]	; (8007a28 <apps_common_lr11xx_handle_post_rx+0x20>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	799b      	ldrb	r3, [r3, #6]
 8007a12:	2b16      	cmp	r3, #22
 8007a14:	d005      	beq.n	8007a22 <apps_common_lr11xx_handle_post_rx+0x1a>
    {
        smtc_hal_mcu_gpio_set_state( led_rx.inst, SMTC_HAL_MCU_GPIO_STATE_LOW );
 8007a16:	4b05      	ldr	r3, [pc, #20]	; (8007a2c <apps_common_lr11xx_handle_post_rx+0x24>)
 8007a18:	689b      	ldr	r3, [r3, #8]
 8007a1a:	2100      	movs	r1, #0
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	f7fc fce1 	bl	80043e4 <smtc_hal_mcu_gpio_set_state>
    }
}
 8007a22:	bf00      	nop
 8007a24:	bd80      	pop	{r7, pc}
 8007a26:	bf00      	nop
 8007a28:	20000ae8 	.word	0x20000ae8
 8007a2c:	20000af8 	.word	0x20000af8

08007a30 <print_common_configuration>:
 * -----------------------------------------------------------------------------
 * --- PRIVATE FUNCTIONS DEFINITION --------------------------------------------
 */

void print_common_configuration( void )
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	af00      	add	r7, sp, #0
    HAL_DBG_TRACE_INFO( "Common parameters:\n\r" );
 8007a34:	4844      	ldr	r0, [pc, #272]	; (8007b48 <print_common_configuration+0x118>)
 8007a36:	f7fc fa0b 	bl	8003e50 <hal_mcu_trace_print>
 8007a3a:	4844      	ldr	r0, [pc, #272]	; (8007b4c <print_common_configuration+0x11c>)
 8007a3c:	f7fc fa08 	bl	8003e50 <hal_mcu_trace_print>
 8007a40:	f44f 7153 	mov.w	r1, #844	; 0x34c
 8007a44:	4842      	ldr	r0, [pc, #264]	; (8007b50 <print_common_configuration+0x120>)
 8007a46:	f7fc fa03 	bl	8003e50 <hal_mcu_trace_print>
 8007a4a:	4842      	ldr	r0, [pc, #264]	; (8007b54 <print_common_configuration+0x124>)
 8007a4c:	f7fc fa00 	bl	8003e50 <hal_mcu_trace_print>
 8007a50:	4841      	ldr	r0, [pc, #260]	; (8007b58 <print_common_configuration+0x128>)
 8007a52:	f7fc f9fd 	bl	8003e50 <hal_mcu_trace_print>
 8007a56:	4841      	ldr	r0, [pc, #260]	; (8007b5c <print_common_configuration+0x12c>)
 8007a58:	f7fc f9fa 	bl	8003e50 <hal_mcu_trace_print>
    HAL_DBG_TRACE_INFO( "   Packet type   = %s\n\r", lr11xx_radio_pkt_type_to_str( PACKET_TYPE ) );
 8007a5c:	483a      	ldr	r0, [pc, #232]	; (8007b48 <print_common_configuration+0x118>)
 8007a5e:	f7fc f9f7 	bl	8003e50 <hal_mcu_trace_print>
 8007a62:	483a      	ldr	r0, [pc, #232]	; (8007b4c <print_common_configuration+0x11c>)
 8007a64:	f7fc f9f4 	bl	8003e50 <hal_mcu_trace_print>
 8007a68:	f240 314d 	movw	r1, #845	; 0x34d
 8007a6c:	4838      	ldr	r0, [pc, #224]	; (8007b50 <print_common_configuration+0x120>)
 8007a6e:	f7fc f9ef 	bl	8003e50 <hal_mcu_trace_print>
 8007a72:	4838      	ldr	r0, [pc, #224]	; (8007b54 <print_common_configuration+0x124>)
 8007a74:	f7fc f9ec 	bl	8003e50 <hal_mcu_trace_print>
 8007a78:	2002      	movs	r0, #2
 8007a7a:	f000 fd59 	bl	8008530 <lr11xx_radio_pkt_type_to_str>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	4619      	mov	r1, r3
 8007a82:	4837      	ldr	r0, [pc, #220]	; (8007b60 <print_common_configuration+0x130>)
 8007a84:	f7fc f9e4 	bl	8003e50 <hal_mcu_trace_print>
 8007a88:	4834      	ldr	r0, [pc, #208]	; (8007b5c <print_common_configuration+0x12c>)
 8007a8a:	f7fc f9e1 	bl	8003e50 <hal_mcu_trace_print>
    HAL_DBG_TRACE_INFO( "   RF frequency  = %u Hz\n\r", RF_FREQ_IN_HZ );
 8007a8e:	482e      	ldr	r0, [pc, #184]	; (8007b48 <print_common_configuration+0x118>)
 8007a90:	f7fc f9de 	bl	8003e50 <hal_mcu_trace_print>
 8007a94:	482d      	ldr	r0, [pc, #180]	; (8007b4c <print_common_configuration+0x11c>)
 8007a96:	f7fc f9db 	bl	8003e50 <hal_mcu_trace_print>
 8007a9a:	f240 314e 	movw	r1, #846	; 0x34e
 8007a9e:	482c      	ldr	r0, [pc, #176]	; (8007b50 <print_common_configuration+0x120>)
 8007aa0:	f7fc f9d6 	bl	8003e50 <hal_mcu_trace_print>
 8007aa4:	482b      	ldr	r0, [pc, #172]	; (8007b54 <print_common_configuration+0x124>)
 8007aa6:	f7fc f9d3 	bl	8003e50 <hal_mcu_trace_print>
 8007aaa:	492e      	ldr	r1, [pc, #184]	; (8007b64 <print_common_configuration+0x134>)
 8007aac:	482e      	ldr	r0, [pc, #184]	; (8007b68 <print_common_configuration+0x138>)
 8007aae:	f7fc f9cf 	bl	8003e50 <hal_mcu_trace_print>
 8007ab2:	482a      	ldr	r0, [pc, #168]	; (8007b5c <print_common_configuration+0x12c>)
 8007ab4:	f7fc f9cc 	bl	8003e50 <hal_mcu_trace_print>
    HAL_DBG_TRACE_INFO( "   Output power  = %i dBm\n\r", TX_OUTPUT_POWER_DBM );
 8007ab8:	4823      	ldr	r0, [pc, #140]	; (8007b48 <print_common_configuration+0x118>)
 8007aba:	f7fc f9c9 	bl	8003e50 <hal_mcu_trace_print>
 8007abe:	4823      	ldr	r0, [pc, #140]	; (8007b4c <print_common_configuration+0x11c>)
 8007ac0:	f7fc f9c6 	bl	8003e50 <hal_mcu_trace_print>
 8007ac4:	f240 314f 	movw	r1, #847	; 0x34f
 8007ac8:	4821      	ldr	r0, [pc, #132]	; (8007b50 <print_common_configuration+0x120>)
 8007aca:	f7fc f9c1 	bl	8003e50 <hal_mcu_trace_print>
 8007ace:	4821      	ldr	r0, [pc, #132]	; (8007b54 <print_common_configuration+0x124>)
 8007ad0:	f7fc f9be 	bl	8003e50 <hal_mcu_trace_print>
 8007ad4:	2116      	movs	r1, #22
 8007ad6:	4825      	ldr	r0, [pc, #148]	; (8007b6c <print_common_configuration+0x13c>)
 8007ad8:	f7fc f9ba 	bl	8003e50 <hal_mcu_trace_print>
 8007adc:	481f      	ldr	r0, [pc, #124]	; (8007b5c <print_common_configuration+0x12c>)
 8007ade:	f7fc f9b7 	bl	8003e50 <hal_mcu_trace_print>
    HAL_DBG_TRACE_INFO( "   Fallback mode = %s\n\r", lr11xx_radio_fallback_modes_to_str( FALLBACK_MODE ) );
 8007ae2:	4819      	ldr	r0, [pc, #100]	; (8007b48 <print_common_configuration+0x118>)
 8007ae4:	f7fc f9b4 	bl	8003e50 <hal_mcu_trace_print>
 8007ae8:	4818      	ldr	r0, [pc, #96]	; (8007b4c <print_common_configuration+0x11c>)
 8007aea:	f7fc f9b1 	bl	8003e50 <hal_mcu_trace_print>
 8007aee:	f44f 7154 	mov.w	r1, #848	; 0x350
 8007af2:	4817      	ldr	r0, [pc, #92]	; (8007b50 <print_common_configuration+0x120>)
 8007af4:	f7fc f9ac 	bl	8003e50 <hal_mcu_trace_print>
 8007af8:	4816      	ldr	r0, [pc, #88]	; (8007b54 <print_common_configuration+0x124>)
 8007afa:	f7fc f9a9 	bl	8003e50 <hal_mcu_trace_print>
 8007afe:	2001      	movs	r0, #1
 8007b00:	f000 fbae 	bl	8008260 <lr11xx_radio_fallback_modes_to_str>
 8007b04:	4603      	mov	r3, r0
 8007b06:	4619      	mov	r1, r3
 8007b08:	4819      	ldr	r0, [pc, #100]	; (8007b70 <print_common_configuration+0x140>)
 8007b0a:	f7fc f9a1 	bl	8003e50 <hal_mcu_trace_print>
 8007b0e:	4813      	ldr	r0, [pc, #76]	; (8007b5c <print_common_configuration+0x12c>)
 8007b10:	f7fc f99e 	bl	8003e50 <hal_mcu_trace_print>
    HAL_DBG_TRACE_INFO( ( ENABLE_RX_BOOST_MODE == true ) ? "   Rx boost activated\n\r" : "   Rx boost deactivated\n\r" );
 8007b14:	480c      	ldr	r0, [pc, #48]	; (8007b48 <print_common_configuration+0x118>)
 8007b16:	f7fc f99b 	bl	8003e50 <hal_mcu_trace_print>
 8007b1a:	480c      	ldr	r0, [pc, #48]	; (8007b4c <print_common_configuration+0x11c>)
 8007b1c:	f7fc f998 	bl	8003e50 <hal_mcu_trace_print>
 8007b20:	f240 3151 	movw	r1, #849	; 0x351
 8007b24:	480a      	ldr	r0, [pc, #40]	; (8007b50 <print_common_configuration+0x120>)
 8007b26:	f7fc f993 	bl	8003e50 <hal_mcu_trace_print>
 8007b2a:	480a      	ldr	r0, [pc, #40]	; (8007b54 <print_common_configuration+0x124>)
 8007b2c:	f7fc f990 	bl	8003e50 <hal_mcu_trace_print>
 8007b30:	4810      	ldr	r0, [pc, #64]	; (8007b74 <print_common_configuration+0x144>)
 8007b32:	f7fc f98d 	bl	8003e50 <hal_mcu_trace_print>
 8007b36:	4809      	ldr	r0, [pc, #36]	; (8007b5c <print_common_configuration+0x12c>)
 8007b38:	f7fc f98a 	bl	8003e50 <hal_mcu_trace_print>
    HAL_DBG_TRACE_PRINTF( "\n" );
 8007b3c:	480e      	ldr	r0, [pc, #56]	; (8007b78 <print_common_configuration+0x148>)
 8007b3e:	f7fc f987 	bl	8003e50 <hal_mcu_trace_print>
}
 8007b42:	bf00      	nop
 8007b44:	bd80      	pop	{r7, pc}
 8007b46:	bf00      	nop
 8007b48:	0800c010 	.word	0x0800c010
 8007b4c:	0800bf70 	.word	0x0800bf70
 8007b50:	0800bf80 	.word	0x0800bf80
 8007b54:	0800c018 	.word	0x0800c018
 8007b58:	0800c524 	.word	0x0800c524
 8007b5c:	0800c008 	.word	0x0800c008
 8007b60:	0800c1d8 	.word	0x0800c1d8
 8007b64:	33be9cd0 	.word	0x33be9cd0
 8007b68:	0800c1f0 	.word	0x0800c1f0
 8007b6c:	0800c20c 	.word	0x0800c20c
 8007b70:	0800c53c 	.word	0x0800c53c
 8007b74:	0800c554 	.word	0x0800c554
 8007b78:	0800c18c 	.word	0x0800c18c

08007b7c <print_lora_configuration>:

void print_lora_configuration( void )
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	af00      	add	r7, sp, #0
    HAL_DBG_TRACE_INFO( "LoRa modulation parameters:\n\r" );
 8007b80:	4883      	ldr	r0, [pc, #524]	; (8007d90 <print_lora_configuration+0x214>)
 8007b82:	f7fc f965 	bl	8003e50 <hal_mcu_trace_print>
 8007b86:	4883      	ldr	r0, [pc, #524]	; (8007d94 <print_lora_configuration+0x218>)
 8007b88:	f7fc f962 	bl	8003e50 <hal_mcu_trace_print>
 8007b8c:	f240 3157 	movw	r1, #855	; 0x357
 8007b90:	4881      	ldr	r0, [pc, #516]	; (8007d98 <print_lora_configuration+0x21c>)
 8007b92:	f7fc f95d 	bl	8003e50 <hal_mcu_trace_print>
 8007b96:	4881      	ldr	r0, [pc, #516]	; (8007d9c <print_lora_configuration+0x220>)
 8007b98:	f7fc f95a 	bl	8003e50 <hal_mcu_trace_print>
 8007b9c:	4880      	ldr	r0, [pc, #512]	; (8007da0 <print_lora_configuration+0x224>)
 8007b9e:	f7fc f957 	bl	8003e50 <hal_mcu_trace_print>
 8007ba2:	4880      	ldr	r0, [pc, #512]	; (8007da4 <print_lora_configuration+0x228>)
 8007ba4:	f7fc f954 	bl	8003e50 <hal_mcu_trace_print>
    HAL_DBG_TRACE_INFO( "   Spreading factor = %s\n\r", lr11xx_radio_lora_sf_to_str( LORA_SPREADING_FACTOR ) );
 8007ba8:	4879      	ldr	r0, [pc, #484]	; (8007d90 <print_lora_configuration+0x214>)
 8007baa:	f7fc f951 	bl	8003e50 <hal_mcu_trace_print>
 8007bae:	4879      	ldr	r0, [pc, #484]	; (8007d94 <print_lora_configuration+0x218>)
 8007bb0:	f7fc f94e 	bl	8003e50 <hal_mcu_trace_print>
 8007bb4:	f44f 7156 	mov.w	r1, #856	; 0x358
 8007bb8:	4877      	ldr	r0, [pc, #476]	; (8007d98 <print_lora_configuration+0x21c>)
 8007bba:	f7fc f949 	bl	8003e50 <hal_mcu_trace_print>
 8007bbe:	4877      	ldr	r0, [pc, #476]	; (8007d9c <print_lora_configuration+0x220>)
 8007bc0:	f7fc f946 	bl	8003e50 <hal_mcu_trace_print>
 8007bc4:	200c      	movs	r0, #12
 8007bc6:	f000 fb6f 	bl	80082a8 <lr11xx_radio_lora_sf_to_str>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	4619      	mov	r1, r3
 8007bce:	4876      	ldr	r0, [pc, #472]	; (8007da8 <print_lora_configuration+0x22c>)
 8007bd0:	f7fc f93e 	bl	8003e50 <hal_mcu_trace_print>
 8007bd4:	4873      	ldr	r0, [pc, #460]	; (8007da4 <print_lora_configuration+0x228>)
 8007bd6:	f7fc f93b 	bl	8003e50 <hal_mcu_trace_print>
    HAL_DBG_TRACE_INFO( "   Bandwidth        = %s\n\r", lr11xx_radio_lora_bw_to_str( LORA_BANDWIDTH ) );
 8007bda:	486d      	ldr	r0, [pc, #436]	; (8007d90 <print_lora_configuration+0x214>)
 8007bdc:	f7fc f938 	bl	8003e50 <hal_mcu_trace_print>
 8007be0:	486c      	ldr	r0, [pc, #432]	; (8007d94 <print_lora_configuration+0x218>)
 8007be2:	f7fc f935 	bl	8003e50 <hal_mcu_trace_print>
 8007be6:	f240 3159 	movw	r1, #857	; 0x359
 8007bea:	486b      	ldr	r0, [pc, #428]	; (8007d98 <print_lora_configuration+0x21c>)
 8007bec:	f7fc f930 	bl	8003e50 <hal_mcu_trace_print>
 8007bf0:	486a      	ldr	r0, [pc, #424]	; (8007d9c <print_lora_configuration+0x220>)
 8007bf2:	f7fc f92d 	bl	8003e50 <hal_mcu_trace_print>
 8007bf6:	2004      	movs	r0, #4
 8007bf8:	f000 fb9c 	bl	8008334 <lr11xx_radio_lora_bw_to_str>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	4619      	mov	r1, r3
 8007c00:	486a      	ldr	r0, [pc, #424]	; (8007dac <print_lora_configuration+0x230>)
 8007c02:	f7fc f925 	bl	8003e50 <hal_mcu_trace_print>
 8007c06:	4867      	ldr	r0, [pc, #412]	; (8007da4 <print_lora_configuration+0x228>)
 8007c08:	f7fc f922 	bl	8003e50 <hal_mcu_trace_print>
    HAL_DBG_TRACE_INFO( "   Coding rate      = %s\n\r", lr11xx_radio_lora_cr_to_str( LORA_CODING_RATE ) );
 8007c0c:	4860      	ldr	r0, [pc, #384]	; (8007d90 <print_lora_configuration+0x214>)
 8007c0e:	f7fc f91f 	bl	8003e50 <hal_mcu_trace_print>
 8007c12:	4860      	ldr	r0, [pc, #384]	; (8007d94 <print_lora_configuration+0x218>)
 8007c14:	f7fc f91c 	bl	8003e50 <hal_mcu_trace_print>
 8007c18:	f240 315a 	movw	r1, #858	; 0x35a
 8007c1c:	485e      	ldr	r0, [pc, #376]	; (8007d98 <print_lora_configuration+0x21c>)
 8007c1e:	f7fc f917 	bl	8003e50 <hal_mcu_trace_print>
 8007c22:	485e      	ldr	r0, [pc, #376]	; (8007d9c <print_lora_configuration+0x220>)
 8007c24:	f7fc f914 	bl	8003e50 <hal_mcu_trace_print>
 8007c28:	2001      	movs	r0, #1
 8007c2a:	f000 fbe7 	bl	80083fc <lr11xx_radio_lora_cr_to_str>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	4619      	mov	r1, r3
 8007c32:	485f      	ldr	r0, [pc, #380]	; (8007db0 <print_lora_configuration+0x234>)
 8007c34:	f7fc f90c 	bl	8003e50 <hal_mcu_trace_print>
 8007c38:	485a      	ldr	r0, [pc, #360]	; (8007da4 <print_lora_configuration+0x228>)
 8007c3a:	f7fc f909 	bl	8003e50 <hal_mcu_trace_print>
    HAL_DBG_TRACE_PRINTF( "\n" );
 8007c3e:	485d      	ldr	r0, [pc, #372]	; (8007db4 <print_lora_configuration+0x238>)
 8007c40:	f7fc f906 	bl	8003e50 <hal_mcu_trace_print>

    HAL_DBG_TRACE_INFO( "LoRa packet parameters:\n\r" );
 8007c44:	4852      	ldr	r0, [pc, #328]	; (8007d90 <print_lora_configuration+0x214>)
 8007c46:	f7fc f903 	bl	8003e50 <hal_mcu_trace_print>
 8007c4a:	4852      	ldr	r0, [pc, #328]	; (8007d94 <print_lora_configuration+0x218>)
 8007c4c:	f7fc f900 	bl	8003e50 <hal_mcu_trace_print>
 8007c50:	f240 315d 	movw	r1, #861	; 0x35d
 8007c54:	4850      	ldr	r0, [pc, #320]	; (8007d98 <print_lora_configuration+0x21c>)
 8007c56:	f7fc f8fb 	bl	8003e50 <hal_mcu_trace_print>
 8007c5a:	4850      	ldr	r0, [pc, #320]	; (8007d9c <print_lora_configuration+0x220>)
 8007c5c:	f7fc f8f8 	bl	8003e50 <hal_mcu_trace_print>
 8007c60:	4855      	ldr	r0, [pc, #340]	; (8007db8 <print_lora_configuration+0x23c>)
 8007c62:	f7fc f8f5 	bl	8003e50 <hal_mcu_trace_print>
 8007c66:	484f      	ldr	r0, [pc, #316]	; (8007da4 <print_lora_configuration+0x228>)
 8007c68:	f7fc f8f2 	bl	8003e50 <hal_mcu_trace_print>
    HAL_DBG_TRACE_INFO( "   Preamble length = %d symbol(s)\n\r", LORA_PREAMBLE_LENGTH );
 8007c6c:	4848      	ldr	r0, [pc, #288]	; (8007d90 <print_lora_configuration+0x214>)
 8007c6e:	f7fc f8ef 	bl	8003e50 <hal_mcu_trace_print>
 8007c72:	4848      	ldr	r0, [pc, #288]	; (8007d94 <print_lora_configuration+0x218>)
 8007c74:	f7fc f8ec 	bl	8003e50 <hal_mcu_trace_print>
 8007c78:	f240 315e 	movw	r1, #862	; 0x35e
 8007c7c:	4846      	ldr	r0, [pc, #280]	; (8007d98 <print_lora_configuration+0x21c>)
 8007c7e:	f7fc f8e7 	bl	8003e50 <hal_mcu_trace_print>
 8007c82:	4846      	ldr	r0, [pc, #280]	; (8007d9c <print_lora_configuration+0x220>)
 8007c84:	f7fc f8e4 	bl	8003e50 <hal_mcu_trace_print>
 8007c88:	2108      	movs	r1, #8
 8007c8a:	484c      	ldr	r0, [pc, #304]	; (8007dbc <print_lora_configuration+0x240>)
 8007c8c:	f7fc f8e0 	bl	8003e50 <hal_mcu_trace_print>
 8007c90:	4844      	ldr	r0, [pc, #272]	; (8007da4 <print_lora_configuration+0x228>)
 8007c92:	f7fc f8dd 	bl	8003e50 <hal_mcu_trace_print>
    HAL_DBG_TRACE_INFO( "   Header mode     = %s\n\r", lr11xx_radio_lora_pkt_len_modes_to_str( LORA_PKT_LEN_MODE ) );
 8007c96:	483e      	ldr	r0, [pc, #248]	; (8007d90 <print_lora_configuration+0x214>)
 8007c98:	f7fc f8da 	bl	8003e50 <hal_mcu_trace_print>
 8007c9c:	483d      	ldr	r0, [pc, #244]	; (8007d94 <print_lora_configuration+0x218>)
 8007c9e:	f7fc f8d7 	bl	8003e50 <hal_mcu_trace_print>
 8007ca2:	f240 315f 	movw	r1, #863	; 0x35f
 8007ca6:	483c      	ldr	r0, [pc, #240]	; (8007d98 <print_lora_configuration+0x21c>)
 8007ca8:	f7fc f8d2 	bl	8003e50 <hal_mcu_trace_print>
 8007cac:	483b      	ldr	r0, [pc, #236]	; (8007d9c <print_lora_configuration+0x220>)
 8007cae:	f7fc f8cf 	bl	8003e50 <hal_mcu_trace_print>
 8007cb2:	2000      	movs	r0, #0
 8007cb4:	f000 fc04 	bl	80084c0 <lr11xx_radio_lora_pkt_len_modes_to_str>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	4619      	mov	r1, r3
 8007cbc:	4840      	ldr	r0, [pc, #256]	; (8007dc0 <print_lora_configuration+0x244>)
 8007cbe:	f7fc f8c7 	bl	8003e50 <hal_mcu_trace_print>
 8007cc2:	4838      	ldr	r0, [pc, #224]	; (8007da4 <print_lora_configuration+0x228>)
 8007cc4:	f7fc f8c4 	bl	8003e50 <hal_mcu_trace_print>
    HAL_DBG_TRACE_INFO( "   Payload length  = %d byte(s)\n\r", PAYLOAD_LENGTH );
 8007cc8:	4831      	ldr	r0, [pc, #196]	; (8007d90 <print_lora_configuration+0x214>)
 8007cca:	f7fc f8c1 	bl	8003e50 <hal_mcu_trace_print>
 8007cce:	4831      	ldr	r0, [pc, #196]	; (8007d94 <print_lora_configuration+0x218>)
 8007cd0:	f7fc f8be 	bl	8003e50 <hal_mcu_trace_print>
 8007cd4:	f44f 7158 	mov.w	r1, #864	; 0x360
 8007cd8:	482f      	ldr	r0, [pc, #188]	; (8007d98 <print_lora_configuration+0x21c>)
 8007cda:	f7fc f8b9 	bl	8003e50 <hal_mcu_trace_print>
 8007cde:	482f      	ldr	r0, [pc, #188]	; (8007d9c <print_lora_configuration+0x220>)
 8007ce0:	f7fc f8b6 	bl	8003e50 <hal_mcu_trace_print>
 8007ce4:	210c      	movs	r1, #12
 8007ce6:	4837      	ldr	r0, [pc, #220]	; (8007dc4 <print_lora_configuration+0x248>)
 8007ce8:	f7fc f8b2 	bl	8003e50 <hal_mcu_trace_print>
 8007cec:	482d      	ldr	r0, [pc, #180]	; (8007da4 <print_lora_configuration+0x228>)
 8007cee:	f7fc f8af 	bl	8003e50 <hal_mcu_trace_print>
    HAL_DBG_TRACE_INFO( "   CRC mode        = %s\n\r", lr11xx_radio_lora_crc_to_str( LORA_CRC ) );
 8007cf2:	4827      	ldr	r0, [pc, #156]	; (8007d90 <print_lora_configuration+0x214>)
 8007cf4:	f7fc f8ac 	bl	8003e50 <hal_mcu_trace_print>
 8007cf8:	4826      	ldr	r0, [pc, #152]	; (8007d94 <print_lora_configuration+0x218>)
 8007cfa:	f7fc f8a9 	bl	8003e50 <hal_mcu_trace_print>
 8007cfe:	f240 3161 	movw	r1, #865	; 0x361
 8007d02:	4825      	ldr	r0, [pc, #148]	; (8007d98 <print_lora_configuration+0x21c>)
 8007d04:	f7fc f8a4 	bl	8003e50 <hal_mcu_trace_print>
 8007d08:	4824      	ldr	r0, [pc, #144]	; (8007d9c <print_lora_configuration+0x220>)
 8007d0a:	f7fc f8a1 	bl	8003e50 <hal_mcu_trace_print>
 8007d0e:	2001      	movs	r0, #1
 8007d10:	f000 fbba 	bl	8008488 <lr11xx_radio_lora_crc_to_str>
 8007d14:	4603      	mov	r3, r0
 8007d16:	4619      	mov	r1, r3
 8007d18:	482b      	ldr	r0, [pc, #172]	; (8007dc8 <print_lora_configuration+0x24c>)
 8007d1a:	f7fc f899 	bl	8003e50 <hal_mcu_trace_print>
 8007d1e:	4821      	ldr	r0, [pc, #132]	; (8007da4 <print_lora_configuration+0x228>)
 8007d20:	f7fc f896 	bl	8003e50 <hal_mcu_trace_print>
    HAL_DBG_TRACE_INFO( "   IQ              = %s\n\r", lr11xx_radio_lora_iq_to_str( LORA_IQ ) );
 8007d24:	481a      	ldr	r0, [pc, #104]	; (8007d90 <print_lora_configuration+0x214>)
 8007d26:	f7fc f893 	bl	8003e50 <hal_mcu_trace_print>
 8007d2a:	481a      	ldr	r0, [pc, #104]	; (8007d94 <print_lora_configuration+0x218>)
 8007d2c:	f7fc f890 	bl	8003e50 <hal_mcu_trace_print>
 8007d30:	f240 3162 	movw	r1, #866	; 0x362
 8007d34:	4818      	ldr	r0, [pc, #96]	; (8007d98 <print_lora_configuration+0x21c>)
 8007d36:	f7fc f88b 	bl	8003e50 <hal_mcu_trace_print>
 8007d3a:	4818      	ldr	r0, [pc, #96]	; (8007d9c <print_lora_configuration+0x220>)
 8007d3c:	f7fc f888 	bl	8003e50 <hal_mcu_trace_print>
 8007d40:	2001      	movs	r0, #1
 8007d42:	f000 fbd9 	bl	80084f8 <lr11xx_radio_lora_iq_to_str>
 8007d46:	4603      	mov	r3, r0
 8007d48:	4619      	mov	r1, r3
 8007d4a:	4820      	ldr	r0, [pc, #128]	; (8007dcc <print_lora_configuration+0x250>)
 8007d4c:	f7fc f880 	bl	8003e50 <hal_mcu_trace_print>
 8007d50:	4814      	ldr	r0, [pc, #80]	; (8007da4 <print_lora_configuration+0x228>)
 8007d52:	f7fc f87d 	bl	8003e50 <hal_mcu_trace_print>
    HAL_DBG_TRACE_PRINTF( "\n\r" );
 8007d56:	481e      	ldr	r0, [pc, #120]	; (8007dd0 <print_lora_configuration+0x254>)
 8007d58:	f7fc f87a 	bl	8003e50 <hal_mcu_trace_print>

    HAL_DBG_TRACE_INFO( "LoRa syncword = 0x%02X\n\r", LORA_SYNCWORD );
 8007d5c:	480c      	ldr	r0, [pc, #48]	; (8007d90 <print_lora_configuration+0x214>)
 8007d5e:	f7fc f877 	bl	8003e50 <hal_mcu_trace_print>
 8007d62:	480c      	ldr	r0, [pc, #48]	; (8007d94 <print_lora_configuration+0x218>)
 8007d64:	f7fc f874 	bl	8003e50 <hal_mcu_trace_print>
 8007d68:	f240 3165 	movw	r1, #869	; 0x365
 8007d6c:	480a      	ldr	r0, [pc, #40]	; (8007d98 <print_lora_configuration+0x21c>)
 8007d6e:	f7fc f86f 	bl	8003e50 <hal_mcu_trace_print>
 8007d72:	480a      	ldr	r0, [pc, #40]	; (8007d9c <print_lora_configuration+0x220>)
 8007d74:	f7fc f86c 	bl	8003e50 <hal_mcu_trace_print>
 8007d78:	2112      	movs	r1, #18
 8007d7a:	4816      	ldr	r0, [pc, #88]	; (8007dd4 <print_lora_configuration+0x258>)
 8007d7c:	f7fc f868 	bl	8003e50 <hal_mcu_trace_print>
 8007d80:	4808      	ldr	r0, [pc, #32]	; (8007da4 <print_lora_configuration+0x228>)
 8007d82:	f7fc f865 	bl	8003e50 <hal_mcu_trace_print>
    HAL_DBG_TRACE_PRINTF( "\n\r" );
 8007d86:	4812      	ldr	r0, [pc, #72]	; (8007dd0 <print_lora_configuration+0x254>)
 8007d88:	f7fc f862 	bl	8003e50 <hal_mcu_trace_print>
}
 8007d8c:	bf00      	nop
 8007d8e:	bd80      	pop	{r7, pc}
 8007d90:	0800c010 	.word	0x0800c010
 8007d94:	0800bf70 	.word	0x0800bf70
 8007d98:	0800bf80 	.word	0x0800bf80
 8007d9c:	0800c018 	.word	0x0800c018
 8007da0:	0800c56c 	.word	0x0800c56c
 8007da4:	0800c008 	.word	0x0800c008
 8007da8:	0800c58c 	.word	0x0800c58c
 8007dac:	0800c5a8 	.word	0x0800c5a8
 8007db0:	0800c5c4 	.word	0x0800c5c4
 8007db4:	0800c18c 	.word	0x0800c18c
 8007db8:	0800c5e0 	.word	0x0800c5e0
 8007dbc:	0800c5fc 	.word	0x0800c5fc
 8007dc0:	0800c620 	.word	0x0800c620
 8007dc4:	0800c63c 	.word	0x0800c63c
 8007dc8:	0800c660 	.word	0x0800c660
 8007dcc:	0800c67c 	.word	0x0800c67c
 8007dd0:	0800c190 	.word	0x0800c190
 8007dd4:	0800c698 	.word	0x0800c698

08007dd8 <print_driver_version>:
    }
    HAL_DBG_TRACE_PRINTF( "\n" );
}

void print_driver_version( void )
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	af00      	add	r7, sp, #0
    HAL_DBG_TRACE_INFO( "LR11XX driver version: %s\n\r", lr11xx_driver_version_get_version_string( ) );
 8007ddc:	480c      	ldr	r0, [pc, #48]	; (8007e10 <print_driver_version+0x38>)
 8007dde:	f7fc f837 	bl	8003e50 <hal_mcu_trace_print>
 8007de2:	480c      	ldr	r0, [pc, #48]	; (8007e14 <print_driver_version+0x3c>)
 8007de4:	f7fc f834 	bl	8003e50 <hal_mcu_trace_print>
 8007de8:	f240 3193 	movw	r1, #915	; 0x393
 8007dec:	480a      	ldr	r0, [pc, #40]	; (8007e18 <print_driver_version+0x40>)
 8007dee:	f7fc f82f 	bl	8003e50 <hal_mcu_trace_print>
 8007df2:	480a      	ldr	r0, [pc, #40]	; (8007e1c <print_driver_version+0x44>)
 8007df4:	f7fc f82c 	bl	8003e50 <hal_mcu_trace_print>
 8007df8:	f000 fbd4 	bl	80085a4 <lr11xx_driver_version_get_version_string>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	4619      	mov	r1, r3
 8007e00:	4807      	ldr	r0, [pc, #28]	; (8007e20 <print_driver_version+0x48>)
 8007e02:	f7fc f825 	bl	8003e50 <hal_mcu_trace_print>
 8007e06:	4807      	ldr	r0, [pc, #28]	; (8007e24 <print_driver_version+0x4c>)
 8007e08:	f7fc f822 	bl	8003e50 <hal_mcu_trace_print>
}
 8007e0c:	bf00      	nop
 8007e0e:	bd80      	pop	{r7, pc}
 8007e10:	0800c010 	.word	0x0800c010
 8007e14:	0800bf70 	.word	0x0800bf70
 8007e18:	0800bf80 	.word	0x0800bf80
 8007e1c:	0800c018 	.word	0x0800c018
 8007e20:	0800c8b8 	.word	0x0800c8b8
 8007e24:	0800c008 	.word	0x0800c008

08007e28 <radio_on_dio_irq>:

void radio_on_dio_irq( void* context )
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b083      	sub	sp, #12
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
    irq_fired = true;
 8007e30:	4b04      	ldr	r3, [pc, #16]	; (8007e44 <radio_on_dio_irq+0x1c>)
 8007e32:	2201      	movs	r2, #1
 8007e34:	701a      	strb	r2, [r3, #0]
}
 8007e36:	bf00      	nop
 8007e38:	370c      	adds	r7, #12
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e40:	4770      	bx	lr
 8007e42:	bf00      	nop
 8007e44:	20000ae4 	.word	0x20000ae4

08007e48 <on_rx_done>:
void on_tx_done( void )
{
    HAL_DBG_TRACE_INFO( "No IRQ routine defined\n\r" );
}
void on_rx_done( void )
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	af00      	add	r7, sp, #0
    HAL_DBG_TRACE_INFO( "No IRQ routine defined\n\r" );
 8007e4c:	480a      	ldr	r0, [pc, #40]	; (8007e78 <on_rx_done+0x30>)
 8007e4e:	f7fb ffff 	bl	8003e50 <hal_mcu_trace_print>
 8007e52:	480a      	ldr	r0, [pc, #40]	; (8007e7c <on_rx_done+0x34>)
 8007e54:	f7fb fffc 	bl	8003e50 <hal_mcu_trace_print>
 8007e58:	f44f 7168 	mov.w	r1, #928	; 0x3a0
 8007e5c:	4808      	ldr	r0, [pc, #32]	; (8007e80 <on_rx_done+0x38>)
 8007e5e:	f7fb fff7 	bl	8003e50 <hal_mcu_trace_print>
 8007e62:	4808      	ldr	r0, [pc, #32]	; (8007e84 <on_rx_done+0x3c>)
 8007e64:	f7fb fff4 	bl	8003e50 <hal_mcu_trace_print>
 8007e68:	4807      	ldr	r0, [pc, #28]	; (8007e88 <on_rx_done+0x40>)
 8007e6a:	f7fb fff1 	bl	8003e50 <hal_mcu_trace_print>
 8007e6e:	4807      	ldr	r0, [pc, #28]	; (8007e8c <on_rx_done+0x44>)
 8007e70:	f7fb ffee 	bl	8003e50 <hal_mcu_trace_print>
}
 8007e74:	bf00      	nop
 8007e76:	bd80      	pop	{r7, pc}
 8007e78:	0800c010 	.word	0x0800c010
 8007e7c:	0800bf70 	.word	0x0800bf70
 8007e80:	0800bf80 	.word	0x0800bf80
 8007e84:	0800c018 	.word	0x0800c018
 8007e88:	0800c8d4 	.word	0x0800c8d4
 8007e8c:	0800c008 	.word	0x0800c008

08007e90 <on_preamble_detected>:
void on_rx_timeout( void )
{
    HAL_DBG_TRACE_INFO( "No IRQ routine defined\n\r" );
}
void on_preamble_detected( void )
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	af00      	add	r7, sp, #0
    HAL_DBG_TRACE_INFO( "No IRQ routine defined\n\r" );
 8007e94:	480a      	ldr	r0, [pc, #40]	; (8007ec0 <on_preamble_detected+0x30>)
 8007e96:	f7fb ffdb 	bl	8003e50 <hal_mcu_trace_print>
 8007e9a:	480a      	ldr	r0, [pc, #40]	; (8007ec4 <on_preamble_detected+0x34>)
 8007e9c:	f7fb ffd8 	bl	8003e50 <hal_mcu_trace_print>
 8007ea0:	f44f 716a 	mov.w	r1, #936	; 0x3a8
 8007ea4:	4808      	ldr	r0, [pc, #32]	; (8007ec8 <on_preamble_detected+0x38>)
 8007ea6:	f7fb ffd3 	bl	8003e50 <hal_mcu_trace_print>
 8007eaa:	4808      	ldr	r0, [pc, #32]	; (8007ecc <on_preamble_detected+0x3c>)
 8007eac:	f7fb ffd0 	bl	8003e50 <hal_mcu_trace_print>
 8007eb0:	4807      	ldr	r0, [pc, #28]	; (8007ed0 <on_preamble_detected+0x40>)
 8007eb2:	f7fb ffcd 	bl	8003e50 <hal_mcu_trace_print>
 8007eb6:	4807      	ldr	r0, [pc, #28]	; (8007ed4 <on_preamble_detected+0x44>)
 8007eb8:	f7fb ffca 	bl	8003e50 <hal_mcu_trace_print>
}
 8007ebc:	bf00      	nop
 8007ebe:	bd80      	pop	{r7, pc}
 8007ec0:	0800c010 	.word	0x0800c010
 8007ec4:	0800bf70 	.word	0x0800bf70
 8007ec8:	0800bf80 	.word	0x0800bf80
 8007ecc:	0800c018 	.word	0x0800c018
 8007ed0:	0800c8d4 	.word	0x0800c8d4
 8007ed4:	0800c008 	.word	0x0800c008

08007ed8 <on_syncword_header_valid>:
void on_syncword_header_valid( void )
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	af00      	add	r7, sp, #0
    HAL_DBG_TRACE_INFO( "No IRQ routine defined\n\r" );
 8007edc:	480a      	ldr	r0, [pc, #40]	; (8007f08 <on_syncword_header_valid+0x30>)
 8007ede:	f7fb ffb7 	bl	8003e50 <hal_mcu_trace_print>
 8007ee2:	480a      	ldr	r0, [pc, #40]	; (8007f0c <on_syncword_header_valid+0x34>)
 8007ee4:	f7fb ffb4 	bl	8003e50 <hal_mcu_trace_print>
 8007ee8:	f44f 716b 	mov.w	r1, #940	; 0x3ac
 8007eec:	4808      	ldr	r0, [pc, #32]	; (8007f10 <on_syncword_header_valid+0x38>)
 8007eee:	f7fb ffaf 	bl	8003e50 <hal_mcu_trace_print>
 8007ef2:	4808      	ldr	r0, [pc, #32]	; (8007f14 <on_syncword_header_valid+0x3c>)
 8007ef4:	f7fb ffac 	bl	8003e50 <hal_mcu_trace_print>
 8007ef8:	4807      	ldr	r0, [pc, #28]	; (8007f18 <on_syncword_header_valid+0x40>)
 8007efa:	f7fb ffa9 	bl	8003e50 <hal_mcu_trace_print>
 8007efe:	4807      	ldr	r0, [pc, #28]	; (8007f1c <on_syncword_header_valid+0x44>)
 8007f00:	f7fb ffa6 	bl	8003e50 <hal_mcu_trace_print>
}
 8007f04:	bf00      	nop
 8007f06:	bd80      	pop	{r7, pc}
 8007f08:	0800c010 	.word	0x0800c010
 8007f0c:	0800bf70 	.word	0x0800bf70
 8007f10:	0800bf80 	.word	0x0800bf80
 8007f14:	0800c018 	.word	0x0800c018
 8007f18:	0800c8d4 	.word	0x0800c8d4
 8007f1c:	0800c008 	.word	0x0800c008

08007f20 <on_header_error>:
void on_header_error( void )
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	af00      	add	r7, sp, #0
    HAL_DBG_TRACE_INFO( "No IRQ routine defined\n\r" );
 8007f24:	480a      	ldr	r0, [pc, #40]	; (8007f50 <on_header_error+0x30>)
 8007f26:	f7fb ff93 	bl	8003e50 <hal_mcu_trace_print>
 8007f2a:	480a      	ldr	r0, [pc, #40]	; (8007f54 <on_header_error+0x34>)
 8007f2c:	f7fb ff90 	bl	8003e50 <hal_mcu_trace_print>
 8007f30:	f44f 716c 	mov.w	r1, #944	; 0x3b0
 8007f34:	4808      	ldr	r0, [pc, #32]	; (8007f58 <on_header_error+0x38>)
 8007f36:	f7fb ff8b 	bl	8003e50 <hal_mcu_trace_print>
 8007f3a:	4808      	ldr	r0, [pc, #32]	; (8007f5c <on_header_error+0x3c>)
 8007f3c:	f7fb ff88 	bl	8003e50 <hal_mcu_trace_print>
 8007f40:	4807      	ldr	r0, [pc, #28]	; (8007f60 <on_header_error+0x40>)
 8007f42:	f7fb ff85 	bl	8003e50 <hal_mcu_trace_print>
 8007f46:	4807      	ldr	r0, [pc, #28]	; (8007f64 <on_header_error+0x44>)
 8007f48:	f7fb ff82 	bl	8003e50 <hal_mcu_trace_print>
}
 8007f4c:	bf00      	nop
 8007f4e:	bd80      	pop	{r7, pc}
 8007f50:	0800c010 	.word	0x0800c010
 8007f54:	0800bf70 	.word	0x0800bf70
 8007f58:	0800bf80 	.word	0x0800bf80
 8007f5c:	0800c018 	.word	0x0800c018
 8007f60:	0800c8d4 	.word	0x0800c8d4
 8007f64:	0800c008 	.word	0x0800c008

08007f68 <on_cad_done_undetected>:
void on_rx_crc_error( void )
{
    HAL_DBG_TRACE_INFO( "No IRQ routine defined\n\r" );
}
void on_cad_done_undetected( void )
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	af00      	add	r7, sp, #0
    HAL_DBG_TRACE_INFO( "No IRQ routine defined\n\r" );
 8007f6c:	480a      	ldr	r0, [pc, #40]	; (8007f98 <on_cad_done_undetected+0x30>)
 8007f6e:	f7fb ff6f 	bl	8003e50 <hal_mcu_trace_print>
 8007f72:	480a      	ldr	r0, [pc, #40]	; (8007f9c <on_cad_done_undetected+0x34>)
 8007f74:	f7fb ff6c 	bl	8003e50 <hal_mcu_trace_print>
 8007f78:	f44f 716f 	mov.w	r1, #956	; 0x3bc
 8007f7c:	4808      	ldr	r0, [pc, #32]	; (8007fa0 <on_cad_done_undetected+0x38>)
 8007f7e:	f7fb ff67 	bl	8003e50 <hal_mcu_trace_print>
 8007f82:	4808      	ldr	r0, [pc, #32]	; (8007fa4 <on_cad_done_undetected+0x3c>)
 8007f84:	f7fb ff64 	bl	8003e50 <hal_mcu_trace_print>
 8007f88:	4807      	ldr	r0, [pc, #28]	; (8007fa8 <on_cad_done_undetected+0x40>)
 8007f8a:	f7fb ff61 	bl	8003e50 <hal_mcu_trace_print>
 8007f8e:	4807      	ldr	r0, [pc, #28]	; (8007fac <on_cad_done_undetected+0x44>)
 8007f90:	f7fb ff5e 	bl	8003e50 <hal_mcu_trace_print>
}
 8007f94:	bf00      	nop
 8007f96:	bd80      	pop	{r7, pc}
 8007f98:	0800c010 	.word	0x0800c010
 8007f9c:	0800bf70 	.word	0x0800bf70
 8007fa0:	0800bf80 	.word	0x0800bf80
 8007fa4:	0800c018 	.word	0x0800c018
 8007fa8:	0800c8d4 	.word	0x0800c8d4
 8007fac:	0800c008 	.word	0x0800c008

08007fb0 <on_cad_done_detected>:
void on_cad_done_detected( void )
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	af00      	add	r7, sp, #0
    HAL_DBG_TRACE_INFO( "No IRQ routine defined\n\r" );
 8007fb4:	480a      	ldr	r0, [pc, #40]	; (8007fe0 <on_cad_done_detected+0x30>)
 8007fb6:	f7fb ff4b 	bl	8003e50 <hal_mcu_trace_print>
 8007fba:	480a      	ldr	r0, [pc, #40]	; (8007fe4 <on_cad_done_detected+0x34>)
 8007fbc:	f7fb ff48 	bl	8003e50 <hal_mcu_trace_print>
 8007fc0:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8007fc4:	4808      	ldr	r0, [pc, #32]	; (8007fe8 <on_cad_done_detected+0x38>)
 8007fc6:	f7fb ff43 	bl	8003e50 <hal_mcu_trace_print>
 8007fca:	4808      	ldr	r0, [pc, #32]	; (8007fec <on_cad_done_detected+0x3c>)
 8007fcc:	f7fb ff40 	bl	8003e50 <hal_mcu_trace_print>
 8007fd0:	4807      	ldr	r0, [pc, #28]	; (8007ff0 <on_cad_done_detected+0x40>)
 8007fd2:	f7fb ff3d 	bl	8003e50 <hal_mcu_trace_print>
 8007fd6:	4807      	ldr	r0, [pc, #28]	; (8007ff4 <on_cad_done_detected+0x44>)
 8007fd8:	f7fb ff3a 	bl	8003e50 <hal_mcu_trace_print>
}
 8007fdc:	bf00      	nop
 8007fde:	bd80      	pop	{r7, pc}
 8007fe0:	0800c010 	.word	0x0800c010
 8007fe4:	0800bf70 	.word	0x0800bf70
 8007fe8:	0800bf80 	.word	0x0800bf80
 8007fec:	0800c018 	.word	0x0800c018
 8007ff0:	0800c8d4 	.word	0x0800c8d4
 8007ff4:	0800c008 	.word	0x0800c008

08007ff8 <on_lora_rx_timestamp>:
void on_lora_rx_timestamp( void )
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	af00      	add	r7, sp, #0
    HAL_DBG_TRACE_INFO( "No IRQ routine defined\n\r" );
 8007ffc:	480a      	ldr	r0, [pc, #40]	; (8008028 <on_lora_rx_timestamp+0x30>)
 8007ffe:	f7fb ff27 	bl	8003e50 <hal_mcu_trace_print>
 8008002:	480a      	ldr	r0, [pc, #40]	; (800802c <on_lora_rx_timestamp+0x34>)
 8008004:	f7fb ff24 	bl	8003e50 <hal_mcu_trace_print>
 8008008:	f44f 7171 	mov.w	r1, #964	; 0x3c4
 800800c:	4808      	ldr	r0, [pc, #32]	; (8008030 <on_lora_rx_timestamp+0x38>)
 800800e:	f7fb ff1f 	bl	8003e50 <hal_mcu_trace_print>
 8008012:	4808      	ldr	r0, [pc, #32]	; (8008034 <on_lora_rx_timestamp+0x3c>)
 8008014:	f7fb ff1c 	bl	8003e50 <hal_mcu_trace_print>
 8008018:	4807      	ldr	r0, [pc, #28]	; (8008038 <on_lora_rx_timestamp+0x40>)
 800801a:	f7fb ff19 	bl	8003e50 <hal_mcu_trace_print>
 800801e:	4807      	ldr	r0, [pc, #28]	; (800803c <on_lora_rx_timestamp+0x44>)
 8008020:	f7fb ff16 	bl	8003e50 <hal_mcu_trace_print>
}
 8008024:	bf00      	nop
 8008026:	bd80      	pop	{r7, pc}
 8008028:	0800c010 	.word	0x0800c010
 800802c:	0800bf70 	.word	0x0800bf70
 8008030:	0800bf80 	.word	0x0800bf80
 8008034:	0800c018 	.word	0x0800c018
 8008038:	0800c8d4 	.word	0x0800c8d4
 800803c:	0800c008 	.word	0x0800c008

08008040 <on_wifi_scan_done>:
void on_wifi_scan_done( void )
{
 8008040:	b580      	push	{r7, lr}
 8008042:	af00      	add	r7, sp, #0
    HAL_DBG_TRACE_INFO( "No IRQ routine defined\n\r" );
 8008044:	480a      	ldr	r0, [pc, #40]	; (8008070 <on_wifi_scan_done+0x30>)
 8008046:	f7fb ff03 	bl	8003e50 <hal_mcu_trace_print>
 800804a:	480a      	ldr	r0, [pc, #40]	; (8008074 <on_wifi_scan_done+0x34>)
 800804c:	f7fb ff00 	bl	8003e50 <hal_mcu_trace_print>
 8008050:	f44f 7172 	mov.w	r1, #968	; 0x3c8
 8008054:	4808      	ldr	r0, [pc, #32]	; (8008078 <on_wifi_scan_done+0x38>)
 8008056:	f7fb fefb 	bl	8003e50 <hal_mcu_trace_print>
 800805a:	4808      	ldr	r0, [pc, #32]	; (800807c <on_wifi_scan_done+0x3c>)
 800805c:	f7fb fef8 	bl	8003e50 <hal_mcu_trace_print>
 8008060:	4807      	ldr	r0, [pc, #28]	; (8008080 <on_wifi_scan_done+0x40>)
 8008062:	f7fb fef5 	bl	8003e50 <hal_mcu_trace_print>
 8008066:	4807      	ldr	r0, [pc, #28]	; (8008084 <on_wifi_scan_done+0x44>)
 8008068:	f7fb fef2 	bl	8003e50 <hal_mcu_trace_print>
}
 800806c:	bf00      	nop
 800806e:	bd80      	pop	{r7, pc}
 8008070:	0800c010 	.word	0x0800c010
 8008074:	0800bf70 	.word	0x0800bf70
 8008078:	0800bf80 	.word	0x0800bf80
 800807c:	0800c018 	.word	0x0800c018
 8008080:	0800c8d4 	.word	0x0800c8d4
 8008084:	0800c008 	.word	0x0800c008

08008088 <on_gnss_scan_done>:
void on_gnss_scan_done( void )
{
 8008088:	b580      	push	{r7, lr}
 800808a:	af00      	add	r7, sp, #0
    HAL_DBG_TRACE_INFO( "No IRQ routine defined\n\r" );
 800808c:	480a      	ldr	r0, [pc, #40]	; (80080b8 <on_gnss_scan_done+0x30>)
 800808e:	f7fb fedf 	bl	8003e50 <hal_mcu_trace_print>
 8008092:	480a      	ldr	r0, [pc, #40]	; (80080bc <on_gnss_scan_done+0x34>)
 8008094:	f7fb fedc 	bl	8003e50 <hal_mcu_trace_print>
 8008098:	f44f 7173 	mov.w	r1, #972	; 0x3cc
 800809c:	4808      	ldr	r0, [pc, #32]	; (80080c0 <on_gnss_scan_done+0x38>)
 800809e:	f7fb fed7 	bl	8003e50 <hal_mcu_trace_print>
 80080a2:	4808      	ldr	r0, [pc, #32]	; (80080c4 <on_gnss_scan_done+0x3c>)
 80080a4:	f7fb fed4 	bl	8003e50 <hal_mcu_trace_print>
 80080a8:	4807      	ldr	r0, [pc, #28]	; (80080c8 <on_gnss_scan_done+0x40>)
 80080aa:	f7fb fed1 	bl	8003e50 <hal_mcu_trace_print>
 80080ae:	4807      	ldr	r0, [pc, #28]	; (80080cc <on_gnss_scan_done+0x44>)
 80080b0:	f7fb fece 	bl	8003e50 <hal_mcu_trace_print>
}
 80080b4:	bf00      	nop
 80080b6:	bd80      	pop	{r7, pc}
 80080b8:	0800c010 	.word	0x0800c010
 80080bc:	0800bf70 	.word	0x0800bf70
 80080c0:	0800bf80 	.word	0x0800bf80
 80080c4:	0800c018 	.word	0x0800c018
 80080c8:	0800c8d4 	.word	0x0800c8d4
 80080cc:	0800c008 	.word	0x0800c008

080080d0 <lr11xx_hal_reset>:
 * -----------------------------------------------------------------------------
 * --- PUBLIC FUNCTIONS DEFINITION ---------------------------------------------
 */

lr11xx_hal_status_t lr11xx_hal_reset( const void* context )
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b084      	sub	sp, #16
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
    const lr11xx_hal_context_t* lr11xx_context = ( const lr11xx_hal_context_t* ) context;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	60fb      	str	r3, [r7, #12]

    smtc_hal_mcu_gpio_set_state( lr11xx_context->reset.inst, SMTC_HAL_MCU_GPIO_STATE_LOW );
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	69db      	ldr	r3, [r3, #28]
 80080e0:	2100      	movs	r1, #0
 80080e2:	4618      	mov	r0, r3
 80080e4:	f7fc f97e 	bl	80043e4 <smtc_hal_mcu_gpio_set_state>
    LL_mDelay( 1 );
 80080e8:	2001      	movs	r0, #1
 80080ea:	f7fb f971 	bl	80033d0 <LL_mDelay>
    smtc_hal_mcu_gpio_set_state( lr11xx_context->reset.inst, SMTC_HAL_MCU_GPIO_STATE_HIGH );
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	69db      	ldr	r3, [r3, #28]
 80080f2:	2101      	movs	r1, #1
 80080f4:	4618      	mov	r0, r3
 80080f6:	f7fc f975 	bl	80043e4 <smtc_hal_mcu_gpio_set_state>

    return LR11XX_HAL_STATUS_OK;
 80080fa:	2300      	movs	r3, #0
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3710      	adds	r7, #16
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}

08008104 <lr11xx_hal_write>:
}


lr11xx_hal_status_t lr11xx_hal_write( const void* context, const uint8_t* command, const uint16_t command_length,
                                      const uint8_t* data, const uint16_t data_length )
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b086      	sub	sp, #24
 8008108:	af00      	add	r7, sp, #0
 800810a:	60f8      	str	r0, [r7, #12]
 800810c:	60b9      	str	r1, [r7, #8]
 800810e:	603b      	str	r3, [r7, #0]
 8008110:	4613      	mov	r3, r2
 8008112:	80fb      	strh	r3, [r7, #6]
#if defined( USE_LR11XX_CRC_OVER_SPI )
    uint8_t cmd_crc = lr11xx_hal_compute_crc( 0xFF, command, command_length );
    cmd_crc         = lr11xx_hal_compute_crc( cmd_crc, data, data_length );
#endif

    const lr11xx_hal_context_t* lr11xx_context = ( const lr11xx_hal_context_t* ) context;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	617b      	str	r3, [r7, #20]

    lr11xx_hal_wait_on_busy( lr11xx_context );
 8008118:	6978      	ldr	r0, [r7, #20]
 800811a:	f000 f88b 	bl	8008234 <lr11xx_hal_wait_on_busy>

    smtc_hal_mcu_gpio_set_state( lr11xx_context->nss.inst, SMTC_HAL_MCU_GPIO_STATE_LOW );
 800811e:	697b      	ldr	r3, [r7, #20]
 8008120:	691b      	ldr	r3, [r3, #16]
 8008122:	2100      	movs	r1, #0
 8008124:	4618      	mov	r0, r3
 8008126:	f7fc f95d 	bl	80043e4 <smtc_hal_mcu_gpio_set_state>
    smtc_hal_mcu_spi_rw_buffer( lr11xx_context->spi.inst, command, NULL, command_length );
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	6858      	ldr	r0, [r3, #4]
 800812e:	88fb      	ldrh	r3, [r7, #6]
 8008130:	2200      	movs	r2, #0
 8008132:	68b9      	ldr	r1, [r7, #8]
 8008134:	f7fc ff46 	bl	8004fc4 <smtc_hal_mcu_spi_rw_buffer>
    smtc_hal_mcu_spi_rw_buffer( lr11xx_context->spi.inst, data, NULL, data_length );
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	6858      	ldr	r0, [r3, #4]
 800813c:	8c3b      	ldrh	r3, [r7, #32]
 800813e:	2200      	movs	r2, #0
 8008140:	6839      	ldr	r1, [r7, #0]
 8008142:	f7fc ff3f 	bl	8004fc4 <smtc_hal_mcu_spi_rw_buffer>
#if defined( USE_LR11XX_CRC_OVER_SPI )
    smtc_hal_mcu_spi_rw_buffer( lr11xx_context->spi.inst, &cmd_crc, NULL, 1 );
#endif
    smtc_hal_mcu_gpio_set_state( lr11xx_context->nss.inst, SMTC_HAL_MCU_GPIO_STATE_HIGH );
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	691b      	ldr	r3, [r3, #16]
 800814a:	2101      	movs	r1, #1
 800814c:	4618      	mov	r0, r3
 800814e:	f7fc f949 	bl	80043e4 <smtc_hal_mcu_gpio_set_state>

    return LR11XX_HAL_STATUS_OK;
 8008152:	2300      	movs	r3, #0
}
 8008154:	4618      	mov	r0, r3
 8008156:	3718      	adds	r7, #24
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}

0800815c <lr11xx_hal_read>:

lr11xx_hal_status_t lr11xx_hal_read( const void* context, const uint8_t* command, const uint16_t command_length,
                                     uint8_t* data, const uint16_t data_length )
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b086      	sub	sp, #24
 8008160:	af00      	add	r7, sp, #0
 8008162:	60f8      	str	r0, [r7, #12]
 8008164:	60b9      	str	r1, [r7, #8]
 8008166:	603b      	str	r3, [r7, #0]
 8008168:	4613      	mov	r3, r2
 800816a:	80fb      	strh	r3, [r7, #6]
#if defined( USE_LR11XX_CRC_OVER_SPI )
    const uint8_t cmd_crc = lr11xx_hal_compute_crc( 0xFF, command, command_length );
#endif

    const lr11xx_hal_context_t* lr11xx_context = ( const lr11xx_hal_context_t* ) context;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	617b      	str	r3, [r7, #20]
    const uint8_t               dummy_byte     = LR11XX_NOP;
 8008170:	2300      	movs	r3, #0
 8008172:	74fb      	strb	r3, [r7, #19]
    uint8_t                     dummy_byte_rx  = LR11XX_NOP;
 8008174:	2300      	movs	r3, #0
 8008176:	74bb      	strb	r3, [r7, #18]

    lr11xx_hal_wait_on_busy( lr11xx_context );
 8008178:	6978      	ldr	r0, [r7, #20]
 800817a:	f000 f85b 	bl	8008234 <lr11xx_hal_wait_on_busy>

    smtc_hal_mcu_gpio_set_state( lr11xx_context->nss.inst, SMTC_HAL_MCU_GPIO_STATE_LOW );
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	691b      	ldr	r3, [r3, #16]
 8008182:	2100      	movs	r1, #0
 8008184:	4618      	mov	r0, r3
 8008186:	f7fc f92d 	bl	80043e4 <smtc_hal_mcu_gpio_set_state>
    smtc_hal_mcu_spi_rw_buffer( lr11xx_context->spi.inst, command, NULL, command_length );
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	6858      	ldr	r0, [r3, #4]
 800818e:	88fb      	ldrh	r3, [r7, #6]
 8008190:	2200      	movs	r2, #0
 8008192:	68b9      	ldr	r1, [r7, #8]
 8008194:	f7fc ff16 	bl	8004fc4 <smtc_hal_mcu_spi_rw_buffer>
#if defined( USE_LR11XX_CRC_OVER_SPI )
    smtc_hal_mcu_spi_rw_buffer( lr11xx_context->spi.inst, &cmd_crc, NULL, 1 );
#endif
    smtc_hal_mcu_gpio_set_state( lr11xx_context->nss.inst, SMTC_HAL_MCU_GPIO_STATE_HIGH );
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	691b      	ldr	r3, [r3, #16]
 800819c:	2101      	movs	r1, #1
 800819e:	4618      	mov	r0, r3
 80081a0:	f7fc f920 	bl	80043e4 <smtc_hal_mcu_gpio_set_state>

    lr11xx_hal_wait_on_busy( lr11xx_context );
 80081a4:	6978      	ldr	r0, [r7, #20]
 80081a6:	f000 f845 	bl	8008234 <lr11xx_hal_wait_on_busy>

    smtc_hal_mcu_gpio_set_state( lr11xx_context->nss.inst, SMTC_HAL_MCU_GPIO_STATE_LOW );
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	691b      	ldr	r3, [r3, #16]
 80081ae:	2100      	movs	r1, #0
 80081b0:	4618      	mov	r0, r3
 80081b2:	f7fc f917 	bl	80043e4 <smtc_hal_mcu_gpio_set_state>
    smtc_hal_mcu_spi_rw_buffer( lr11xx_context->spi.inst, &dummy_byte, &dummy_byte_rx, 1 );
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	6858      	ldr	r0, [r3, #4]
 80081ba:	f107 0212 	add.w	r2, r7, #18
 80081be:	f107 0113 	add.w	r1, r7, #19
 80081c2:	2301      	movs	r3, #1
 80081c4:	f7fc fefe 	bl	8004fc4 <smtc_hal_mcu_spi_rw_buffer>
    smtc_hal_mcu_spi_rw_buffer( lr11xx_context->spi.inst, NULL, data, data_length );
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	6858      	ldr	r0, [r3, #4]
 80081cc:	8c3b      	ldrh	r3, [r7, #32]
 80081ce:	683a      	ldr	r2, [r7, #0]
 80081d0:	2100      	movs	r1, #0
 80081d2:	f7fc fef7 	bl	8004fc4 <smtc_hal_mcu_spi_rw_buffer>
#if defined( USE_LR11XX_CRC_OVER_SPI )
    uint8_t crc_rx;
    smtc_hal_mcu_spi_rw_buffer( lr11xx_context->spi.inst, &dummy_byte, &crc_rx, 1 );
#endif
    smtc_hal_mcu_gpio_set_state( lr11xx_context->nss.inst, SMTC_HAL_MCU_GPIO_STATE_HIGH );
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	691b      	ldr	r3, [r3, #16]
 80081da:	2101      	movs	r1, #1
 80081dc:	4618      	mov	r0, r3
 80081de:	f7fc f901 	bl	80043e4 <smtc_hal_mcu_gpio_set_state>
    {
        return LR11XX_HAL_STATUS_ERROR;
    }
#endif

    return LR11XX_HAL_STATUS_OK;
 80081e2:	2300      	movs	r3, #0
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	3718      	adds	r7, #24
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}

080081ec <lr11xx_hal_direct_read>:

lr11xx_hal_status_t lr11xx_hal_direct_read( const void* radio, uint8_t* data, const uint16_t data_length )
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b086      	sub	sp, #24
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	60f8      	str	r0, [r7, #12]
 80081f4:	60b9      	str	r1, [r7, #8]
 80081f6:	4613      	mov	r3, r2
 80081f8:	80fb      	strh	r3, [r7, #6]
    const lr11xx_hal_context_t* lr11xx_context = ( const lr11xx_hal_context_t* ) radio;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	617b      	str	r3, [r7, #20]

    lr11xx_hal_wait_on_busy( lr11xx_context );
 80081fe:	6978      	ldr	r0, [r7, #20]
 8008200:	f000 f818 	bl	8008234 <lr11xx_hal_wait_on_busy>

    smtc_hal_mcu_gpio_set_state( lr11xx_context->nss.inst, SMTC_HAL_MCU_GPIO_STATE_LOW );
 8008204:	697b      	ldr	r3, [r7, #20]
 8008206:	691b      	ldr	r3, [r3, #16]
 8008208:	2100      	movs	r1, #0
 800820a:	4618      	mov	r0, r3
 800820c:	f7fc f8ea 	bl	80043e4 <smtc_hal_mcu_gpio_set_state>
    smtc_hal_mcu_spi_rw_buffer( lr11xx_context->spi.inst, NULL, data, data_length );
 8008210:	697b      	ldr	r3, [r7, #20]
 8008212:	6858      	ldr	r0, [r3, #4]
 8008214:	88fb      	ldrh	r3, [r7, #6]
 8008216:	68ba      	ldr	r2, [r7, #8]
 8008218:	2100      	movs	r1, #0
 800821a:	f7fc fed3 	bl	8004fc4 <smtc_hal_mcu_spi_rw_buffer>
#if defined( USE_LR11XX_CRC_OVER_SPI )
    uint8_t crc_rx;
    smtc_hal_mcu_spi_rw_buffer( lr11xx_context->spi.inst, NULL, &crc_rx, 1 );
#endif
    smtc_hal_mcu_gpio_set_state( lr11xx_context->nss.inst, SMTC_HAL_MCU_GPIO_STATE_HIGH );
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	691b      	ldr	r3, [r3, #16]
 8008222:	2101      	movs	r1, #1
 8008224:	4618      	mov	r0, r3
 8008226:	f7fc f8dd 	bl	80043e4 <smtc_hal_mcu_gpio_set_state>
    {
        return LR11XX_HAL_STATUS_ERROR;
    }
#endif

    return LR11XX_HAL_STATUS_OK;
 800822a:	2300      	movs	r3, #0
}
 800822c:	4618      	mov	r0, r3
 800822e:	3718      	adds	r7, #24
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}

08008234 <lr11xx_hal_wait_on_busy>:
 * -----------------------------------------------------------------------------
 * --- PRIVATE FUNCTIONS DEFINITION --------------------------------------------
 */

void lr11xx_hal_wait_on_busy( const void* radio )
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b084      	sub	sp, #16
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
    const lr11xx_hal_context_t* lr11xx_context = ( const lr11xx_hal_context_t* ) radio;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	60fb      	str	r3, [r7, #12]
    smtc_hal_mcu_gpio_state_t   gpio_state;

    do
    {
        smtc_hal_mcu_gpio_get_state( lr11xx_context->busy.inst, &gpio_state );
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008244:	f107 020b 	add.w	r2, r7, #11
 8008248:	4611      	mov	r1, r2
 800824a:	4618      	mov	r0, r3
 800824c:	f7fc f8f9 	bl	8004442 <smtc_hal_mcu_gpio_get_state>
    } while( gpio_state == SMTC_HAL_MCU_GPIO_STATE_HIGH );
 8008250:	7afb      	ldrb	r3, [r7, #11]
 8008252:	2b01      	cmp	r3, #1
 8008254:	d0f4      	beq.n	8008240 <lr11xx_hal_wait_on_busy+0xc>
}
 8008256:	bf00      	nop
 8008258:	bf00      	nop
 800825a:	3710      	adds	r7, #16
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <lr11xx_radio_fallback_modes_to_str>:
    }
    }
}

const char* lr11xx_radio_fallback_modes_to_str( const lr11xx_radio_fallback_modes_t value )
{
 8008260:	b480      	push	{r7}
 8008262:	b083      	sub	sp, #12
 8008264:	af00      	add	r7, sp, #0
 8008266:	4603      	mov	r3, r0
 8008268:	71fb      	strb	r3, [r7, #7]
    switch( value )
 800826a:	79fb      	ldrb	r3, [r7, #7]
 800826c:	2b03      	cmp	r3, #3
 800826e:	d00a      	beq.n	8008286 <lr11xx_radio_fallback_modes_to_str+0x26>
 8008270:	2b03      	cmp	r3, #3
 8008272:	dc0a      	bgt.n	800828a <lr11xx_radio_fallback_modes_to_str+0x2a>
 8008274:	2b01      	cmp	r3, #1
 8008276:	d002      	beq.n	800827e <lr11xx_radio_fallback_modes_to_str+0x1e>
 8008278:	2b02      	cmp	r3, #2
 800827a:	d002      	beq.n	8008282 <lr11xx_radio_fallback_modes_to_str+0x22>
 800827c:	e005      	b.n	800828a <lr11xx_radio_fallback_modes_to_str+0x2a>
    {
    case LR11XX_RADIO_FALLBACK_STDBY_RC:
    {
        return ( const char* ) "LR11XX_RADIO_FALLBACK_STDBY_RC";
 800827e:	4b06      	ldr	r3, [pc, #24]	; (8008298 <lr11xx_radio_fallback_modes_to_str+0x38>)
 8008280:	e004      	b.n	800828c <lr11xx_radio_fallback_modes_to_str+0x2c>
    }

    case LR11XX_RADIO_FALLBACK_STDBY_XOSC:
    {
        return ( const char* ) "LR11XX_RADIO_FALLBACK_STDBY_XOSC";
 8008282:	4b06      	ldr	r3, [pc, #24]	; (800829c <lr11xx_radio_fallback_modes_to_str+0x3c>)
 8008284:	e002      	b.n	800828c <lr11xx_radio_fallback_modes_to_str+0x2c>
    }

    case LR11XX_RADIO_FALLBACK_FS:
    {
        return ( const char* ) "LR11XX_RADIO_FALLBACK_FS";
 8008286:	4b06      	ldr	r3, [pc, #24]	; (80082a0 <lr11xx_radio_fallback_modes_to_str+0x40>)
 8008288:	e000      	b.n	800828c <lr11xx_radio_fallback_modes_to_str+0x2c>
    }

    default:
    {
        return ( const char* ) "Unknown";
 800828a:	4b06      	ldr	r3, [pc, #24]	; (80082a4 <lr11xx_radio_fallback_modes_to_str+0x44>)
    }
    }
}
 800828c:	4618      	mov	r0, r3
 800828e:	370c      	adds	r7, #12
 8008290:	46bd      	mov	sp, r7
 8008292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008296:	4770      	bx	lr
 8008298:	0800c9e4 	.word	0x0800c9e4
 800829c:	0800ca04 	.word	0x0800ca04
 80082a0:	0800ca28 	.word	0x0800ca28
 80082a4:	0800c938 	.word	0x0800c938

080082a8 <lr11xx_radio_lora_sf_to_str>:
    }
    }
}

const char* lr11xx_radio_lora_sf_to_str( const lr11xx_radio_lora_sf_t value )
{
 80082a8:	b480      	push	{r7}
 80082aa:	b083      	sub	sp, #12
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	4603      	mov	r3, r0
 80082b0:	71fb      	strb	r3, [r7, #7]
    switch( value )
 80082b2:	79fb      	ldrb	r3, [r7, #7]
 80082b4:	3b05      	subs	r3, #5
 80082b6:	2b07      	cmp	r3, #7
 80082b8:	d822      	bhi.n	8008300 <lr11xx_radio_lora_sf_to_str+0x58>
 80082ba:	a201      	add	r2, pc, #4	; (adr r2, 80082c0 <lr11xx_radio_lora_sf_to_str+0x18>)
 80082bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082c0:	080082e1 	.word	0x080082e1
 80082c4:	080082e5 	.word	0x080082e5
 80082c8:	080082e9 	.word	0x080082e9
 80082cc:	080082ed 	.word	0x080082ed
 80082d0:	080082f1 	.word	0x080082f1
 80082d4:	080082f5 	.word	0x080082f5
 80082d8:	080082f9 	.word	0x080082f9
 80082dc:	080082fd 	.word	0x080082fd
    {
    case LR11XX_RADIO_LORA_SF5:
    {
        return ( const char* ) "LR11XX_RADIO_LORA_SF5";
 80082e0:	4b0b      	ldr	r3, [pc, #44]	; (8008310 <lr11xx_radio_lora_sf_to_str+0x68>)
 80082e2:	e00e      	b.n	8008302 <lr11xx_radio_lora_sf_to_str+0x5a>
    }

    case LR11XX_RADIO_LORA_SF6:
    {
        return ( const char* ) "LR11XX_RADIO_LORA_SF6";
 80082e4:	4b0b      	ldr	r3, [pc, #44]	; (8008314 <lr11xx_radio_lora_sf_to_str+0x6c>)
 80082e6:	e00c      	b.n	8008302 <lr11xx_radio_lora_sf_to_str+0x5a>
    }

    case LR11XX_RADIO_LORA_SF7:
    {
        return ( const char* ) "LR11XX_RADIO_LORA_SF7";
 80082e8:	4b0b      	ldr	r3, [pc, #44]	; (8008318 <lr11xx_radio_lora_sf_to_str+0x70>)
 80082ea:	e00a      	b.n	8008302 <lr11xx_radio_lora_sf_to_str+0x5a>
    }

    case LR11XX_RADIO_LORA_SF8:
    {
        return ( const char* ) "LR11XX_RADIO_LORA_SF8";
 80082ec:	4b0b      	ldr	r3, [pc, #44]	; (800831c <lr11xx_radio_lora_sf_to_str+0x74>)
 80082ee:	e008      	b.n	8008302 <lr11xx_radio_lora_sf_to_str+0x5a>
    }

    case LR11XX_RADIO_LORA_SF9:
    {
        return ( const char* ) "LR11XX_RADIO_LORA_SF9";
 80082f0:	4b0b      	ldr	r3, [pc, #44]	; (8008320 <lr11xx_radio_lora_sf_to_str+0x78>)
 80082f2:	e006      	b.n	8008302 <lr11xx_radio_lora_sf_to_str+0x5a>
    }

    case LR11XX_RADIO_LORA_SF10:
    {
        return ( const char* ) "LR11XX_RADIO_LORA_SF10";
 80082f4:	4b0b      	ldr	r3, [pc, #44]	; (8008324 <lr11xx_radio_lora_sf_to_str+0x7c>)
 80082f6:	e004      	b.n	8008302 <lr11xx_radio_lora_sf_to_str+0x5a>
    }

    case LR11XX_RADIO_LORA_SF11:
    {
        return ( const char* ) "LR11XX_RADIO_LORA_SF11";
 80082f8:	4b0b      	ldr	r3, [pc, #44]	; (8008328 <lr11xx_radio_lora_sf_to_str+0x80>)
 80082fa:	e002      	b.n	8008302 <lr11xx_radio_lora_sf_to_str+0x5a>
    }

    case LR11XX_RADIO_LORA_SF12:
    {
        return ( const char* ) "LR11XX_RADIO_LORA_SF12";
 80082fc:	4b0b      	ldr	r3, [pc, #44]	; (800832c <lr11xx_radio_lora_sf_to_str+0x84>)
 80082fe:	e000      	b.n	8008302 <lr11xx_radio_lora_sf_to_str+0x5a>
    }

    default:
    {
        return ( const char* ) "Unknown";
 8008300:	4b0b      	ldr	r3, [pc, #44]	; (8008330 <lr11xx_radio_lora_sf_to_str+0x88>)
    }
    }
}
 8008302:	4618      	mov	r0, r3
 8008304:	370c      	adds	r7, #12
 8008306:	46bd      	mov	sp, r7
 8008308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830c:	4770      	bx	lr
 800830e:	bf00      	nop
 8008310:	0800cc34 	.word	0x0800cc34
 8008314:	0800cc4c 	.word	0x0800cc4c
 8008318:	0800cc64 	.word	0x0800cc64
 800831c:	0800cc7c 	.word	0x0800cc7c
 8008320:	0800cc94 	.word	0x0800cc94
 8008324:	0800ccac 	.word	0x0800ccac
 8008328:	0800ccc4 	.word	0x0800ccc4
 800832c:	0800ccdc 	.word	0x0800ccdc
 8008330:	0800c938 	.word	0x0800c938

08008334 <lr11xx_radio_lora_bw_to_str>:

const char* lr11xx_radio_lora_bw_to_str( const lr11xx_radio_lora_bw_t value )
{
 8008334:	b480      	push	{r7}
 8008336:	b083      	sub	sp, #12
 8008338:	af00      	add	r7, sp, #0
 800833a:	4603      	mov	r3, r0
 800833c:	71fb      	strb	r3, [r7, #7]
    switch( value )
 800833e:	79fb      	ldrb	r3, [r7, #7]
 8008340:	3b01      	subs	r3, #1
 8008342:	2b0e      	cmp	r3, #14
 8008344:	d838      	bhi.n	80083b8 <lr11xx_radio_lora_bw_to_str+0x84>
 8008346:	a201      	add	r2, pc, #4	; (adr r2, 800834c <lr11xx_radio_lora_bw_to_str+0x18>)
 8008348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800834c:	0800838d 	.word	0x0800838d
 8008350:	08008395 	.word	0x08008395
 8008354:	0800839d 	.word	0x0800839d
 8008358:	080083a1 	.word	0x080083a1
 800835c:	080083a5 	.word	0x080083a5
 8008360:	080083a9 	.word	0x080083a9
 8008364:	080083b9 	.word	0x080083b9
 8008368:	08008389 	.word	0x08008389
 800836c:	08008391 	.word	0x08008391
 8008370:	08008399 	.word	0x08008399
 8008374:	080083b9 	.word	0x080083b9
 8008378:	080083b9 	.word	0x080083b9
 800837c:	080083ad 	.word	0x080083ad
 8008380:	080083b1 	.word	0x080083b1
 8008384:	080083b5 	.word	0x080083b5
    {
    case LR11XX_RADIO_LORA_BW_10:
    {
        return ( const char* ) "LR11XX_RADIO_LORA_BW_10";
 8008388:	4b0f      	ldr	r3, [pc, #60]	; (80083c8 <lr11xx_radio_lora_bw_to_str+0x94>)
 800838a:	e016      	b.n	80083ba <lr11xx_radio_lora_bw_to_str+0x86>
    }

    case LR11XX_RADIO_LORA_BW_15:
    {
        return ( const char* ) "LR11XX_RADIO_LORA_BW_15";
 800838c:	4b0f      	ldr	r3, [pc, #60]	; (80083cc <lr11xx_radio_lora_bw_to_str+0x98>)
 800838e:	e014      	b.n	80083ba <lr11xx_radio_lora_bw_to_str+0x86>
    }

    case LR11XX_RADIO_LORA_BW_20:
    {
        return ( const char* ) "LR11XX_RADIO_LORA_BW_20";
 8008390:	4b0f      	ldr	r3, [pc, #60]	; (80083d0 <lr11xx_radio_lora_bw_to_str+0x9c>)
 8008392:	e012      	b.n	80083ba <lr11xx_radio_lora_bw_to_str+0x86>
    }

    case LR11XX_RADIO_LORA_BW_31:
    {
        return ( const char* ) "LR11XX_RADIO_LORA_BW_31";
 8008394:	4b0f      	ldr	r3, [pc, #60]	; (80083d4 <lr11xx_radio_lora_bw_to_str+0xa0>)
 8008396:	e010      	b.n	80083ba <lr11xx_radio_lora_bw_to_str+0x86>
    }

    case LR11XX_RADIO_LORA_BW_41:
    {
        return ( const char* ) "LR11XX_RADIO_LORA_BW_41";
 8008398:	4b0f      	ldr	r3, [pc, #60]	; (80083d8 <lr11xx_radio_lora_bw_to_str+0xa4>)
 800839a:	e00e      	b.n	80083ba <lr11xx_radio_lora_bw_to_str+0x86>
    }

    case LR11XX_RADIO_LORA_BW_62:
    {
        return ( const char* ) "LR11XX_RADIO_LORA_BW_62";
 800839c:	4b0f      	ldr	r3, [pc, #60]	; (80083dc <lr11xx_radio_lora_bw_to_str+0xa8>)
 800839e:	e00c      	b.n	80083ba <lr11xx_radio_lora_bw_to_str+0x86>
    }

    case LR11XX_RADIO_LORA_BW_125:
    {
        return ( const char* ) "LR11XX_RADIO_LORA_BW_125";
 80083a0:	4b0f      	ldr	r3, [pc, #60]	; (80083e0 <lr11xx_radio_lora_bw_to_str+0xac>)
 80083a2:	e00a      	b.n	80083ba <lr11xx_radio_lora_bw_to_str+0x86>
    }

    case LR11XX_RADIO_LORA_BW_250:
    {
        return ( const char* ) "LR11XX_RADIO_LORA_BW_250";
 80083a4:	4b0f      	ldr	r3, [pc, #60]	; (80083e4 <lr11xx_radio_lora_bw_to_str+0xb0>)
 80083a6:	e008      	b.n	80083ba <lr11xx_radio_lora_bw_to_str+0x86>
    }

    case LR11XX_RADIO_LORA_BW_500:
    {
        return ( const char* ) "LR11XX_RADIO_LORA_BW_500";
 80083a8:	4b0f      	ldr	r3, [pc, #60]	; (80083e8 <lr11xx_radio_lora_bw_to_str+0xb4>)
 80083aa:	e006      	b.n	80083ba <lr11xx_radio_lora_bw_to_str+0x86>
    }

    case LR11XX_RADIO_LORA_BW_200:
    {
        return ( const char* ) "LR11XX_RADIO_LORA_BW_200";
 80083ac:	4b0f      	ldr	r3, [pc, #60]	; (80083ec <lr11xx_radio_lora_bw_to_str+0xb8>)
 80083ae:	e004      	b.n	80083ba <lr11xx_radio_lora_bw_to_str+0x86>
    }

    case LR11XX_RADIO_LORA_BW_400:
    {
        return ( const char* ) "LR11XX_RADIO_LORA_BW_400";
 80083b0:	4b0f      	ldr	r3, [pc, #60]	; (80083f0 <lr11xx_radio_lora_bw_to_str+0xbc>)
 80083b2:	e002      	b.n	80083ba <lr11xx_radio_lora_bw_to_str+0x86>
    }

    case LR11XX_RADIO_LORA_BW_800:
    {
        return ( const char* ) "LR11XX_RADIO_LORA_BW_800";
 80083b4:	4b0f      	ldr	r3, [pc, #60]	; (80083f4 <lr11xx_radio_lora_bw_to_str+0xc0>)
 80083b6:	e000      	b.n	80083ba <lr11xx_radio_lora_bw_to_str+0x86>
    }

    default:
    {
        return ( const char* ) "Unknown";
 80083b8:	4b0f      	ldr	r3, [pc, #60]	; (80083f8 <lr11xx_radio_lora_bw_to_str+0xc4>)
    }
    }
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	370c      	adds	r7, #12
 80083be:	46bd      	mov	sp, r7
 80083c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c4:	4770      	bx	lr
 80083c6:	bf00      	nop
 80083c8:	0800ccf4 	.word	0x0800ccf4
 80083cc:	0800cd0c 	.word	0x0800cd0c
 80083d0:	0800cd24 	.word	0x0800cd24
 80083d4:	0800cd3c 	.word	0x0800cd3c
 80083d8:	0800cd54 	.word	0x0800cd54
 80083dc:	0800cd6c 	.word	0x0800cd6c
 80083e0:	0800cd84 	.word	0x0800cd84
 80083e4:	0800cda0 	.word	0x0800cda0
 80083e8:	0800cdbc 	.word	0x0800cdbc
 80083ec:	0800cdd8 	.word	0x0800cdd8
 80083f0:	0800cdf4 	.word	0x0800cdf4
 80083f4:	0800ce10 	.word	0x0800ce10
 80083f8:	0800c938 	.word	0x0800c938

080083fc <lr11xx_radio_lora_cr_to_str>:

const char* lr11xx_radio_lora_cr_to_str( const lr11xx_radio_lora_cr_t value )
{
 80083fc:	b480      	push	{r7}
 80083fe:	b083      	sub	sp, #12
 8008400:	af00      	add	r7, sp, #0
 8008402:	4603      	mov	r3, r0
 8008404:	71fb      	strb	r3, [r7, #7]
    switch( value )
 8008406:	79fb      	ldrb	r3, [r7, #7]
 8008408:	2b07      	cmp	r3, #7
 800840a:	d823      	bhi.n	8008454 <lr11xx_radio_lora_cr_to_str+0x58>
 800840c:	a201      	add	r2, pc, #4	; (adr r2, 8008414 <lr11xx_radio_lora_cr_to_str+0x18>)
 800840e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008412:	bf00      	nop
 8008414:	08008435 	.word	0x08008435
 8008418:	08008439 	.word	0x08008439
 800841c:	0800843d 	.word	0x0800843d
 8008420:	08008441 	.word	0x08008441
 8008424:	08008445 	.word	0x08008445
 8008428:	08008449 	.word	0x08008449
 800842c:	0800844d 	.word	0x0800844d
 8008430:	08008451 	.word	0x08008451
    {
    case LR11XX_RADIO_LORA_NO_CR:
    {
        return ( const char* ) "LR11XX_RADIO_LORA_NO_CR";
 8008434:	4b0b      	ldr	r3, [pc, #44]	; (8008464 <lr11xx_radio_lora_cr_to_str+0x68>)
 8008436:	e00e      	b.n	8008456 <lr11xx_radio_lora_cr_to_str+0x5a>
    }

    case LR11XX_RADIO_LORA_CR_4_5:
    {
        return ( const char* ) "LR11XX_RADIO_LORA_CR_4_5";
 8008438:	4b0b      	ldr	r3, [pc, #44]	; (8008468 <lr11xx_radio_lora_cr_to_str+0x6c>)
 800843a:	e00c      	b.n	8008456 <lr11xx_radio_lora_cr_to_str+0x5a>
    }

    case LR11XX_RADIO_LORA_CR_4_6:
    {
        return ( const char* ) "LR11XX_RADIO_LORA_CR_4_6";
 800843c:	4b0b      	ldr	r3, [pc, #44]	; (800846c <lr11xx_radio_lora_cr_to_str+0x70>)
 800843e:	e00a      	b.n	8008456 <lr11xx_radio_lora_cr_to_str+0x5a>
    }

    case LR11XX_RADIO_LORA_CR_4_7:
    {
        return ( const char* ) "LR11XX_RADIO_LORA_CR_4_7";
 8008440:	4b0b      	ldr	r3, [pc, #44]	; (8008470 <lr11xx_radio_lora_cr_to_str+0x74>)
 8008442:	e008      	b.n	8008456 <lr11xx_radio_lora_cr_to_str+0x5a>
    }

    case LR11XX_RADIO_LORA_CR_4_8:
    {
        return ( const char* ) "LR11XX_RADIO_LORA_CR_4_8";
 8008444:	4b0b      	ldr	r3, [pc, #44]	; (8008474 <lr11xx_radio_lora_cr_to_str+0x78>)
 8008446:	e006      	b.n	8008456 <lr11xx_radio_lora_cr_to_str+0x5a>
    }

    case LR11XX_RADIO_LORA_CR_LI_4_5:
    {
        return ( const char* ) "LR11XX_RADIO_LORA_CR_LI_4_5";
 8008448:	4b0b      	ldr	r3, [pc, #44]	; (8008478 <lr11xx_radio_lora_cr_to_str+0x7c>)
 800844a:	e004      	b.n	8008456 <lr11xx_radio_lora_cr_to_str+0x5a>
    }

    case LR11XX_RADIO_LORA_CR_LI_4_6:
    {
        return ( const char* ) "LR11XX_RADIO_LORA_CR_LI_4_6";
 800844c:	4b0b      	ldr	r3, [pc, #44]	; (800847c <lr11xx_radio_lora_cr_to_str+0x80>)
 800844e:	e002      	b.n	8008456 <lr11xx_radio_lora_cr_to_str+0x5a>
    }

    case LR11XX_RADIO_LORA_CR_LI_4_8:
    {
        return ( const char* ) "LR11XX_RADIO_LORA_CR_LI_4_8";
 8008450:	4b0b      	ldr	r3, [pc, #44]	; (8008480 <lr11xx_radio_lora_cr_to_str+0x84>)
 8008452:	e000      	b.n	8008456 <lr11xx_radio_lora_cr_to_str+0x5a>
    }

    default:
    {
        return ( const char* ) "Unknown";
 8008454:	4b0b      	ldr	r3, [pc, #44]	; (8008484 <lr11xx_radio_lora_cr_to_str+0x88>)
    }
    }
}
 8008456:	4618      	mov	r0, r3
 8008458:	370c      	adds	r7, #12
 800845a:	46bd      	mov	sp, r7
 800845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008460:	4770      	bx	lr
 8008462:	bf00      	nop
 8008464:	0800ce2c 	.word	0x0800ce2c
 8008468:	0800ce44 	.word	0x0800ce44
 800846c:	0800ce60 	.word	0x0800ce60
 8008470:	0800ce7c 	.word	0x0800ce7c
 8008474:	0800ce98 	.word	0x0800ce98
 8008478:	0800ceb4 	.word	0x0800ceb4
 800847c:	0800ced0 	.word	0x0800ced0
 8008480:	0800ceec 	.word	0x0800ceec
 8008484:	0800c938 	.word	0x0800c938

08008488 <lr11xx_radio_lora_crc_to_str>:
    }
    }
}

const char* lr11xx_radio_lora_crc_to_str( const lr11xx_radio_lora_crc_t value )
{
 8008488:	b480      	push	{r7}
 800848a:	b083      	sub	sp, #12
 800848c:	af00      	add	r7, sp, #0
 800848e:	4603      	mov	r3, r0
 8008490:	71fb      	strb	r3, [r7, #7]
    switch( value )
 8008492:	79fb      	ldrb	r3, [r7, #7]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d002      	beq.n	800849e <lr11xx_radio_lora_crc_to_str+0x16>
 8008498:	2b01      	cmp	r3, #1
 800849a:	d002      	beq.n	80084a2 <lr11xx_radio_lora_crc_to_str+0x1a>
 800849c:	e003      	b.n	80084a6 <lr11xx_radio_lora_crc_to_str+0x1e>
    {
    case LR11XX_RADIO_LORA_CRC_OFF:
    {
        return ( const char* ) "LR11XX_RADIO_LORA_CRC_OFF";
 800849e:	4b05      	ldr	r3, [pc, #20]	; (80084b4 <lr11xx_radio_lora_crc_to_str+0x2c>)
 80084a0:	e002      	b.n	80084a8 <lr11xx_radio_lora_crc_to_str+0x20>
    }

    case LR11XX_RADIO_LORA_CRC_ON:
    {
        return ( const char* ) "LR11XX_RADIO_LORA_CRC_ON";
 80084a2:	4b05      	ldr	r3, [pc, #20]	; (80084b8 <lr11xx_radio_lora_crc_to_str+0x30>)
 80084a4:	e000      	b.n	80084a8 <lr11xx_radio_lora_crc_to_str+0x20>
    }

    default:
    {
        return ( const char* ) "Unknown";
 80084a6:	4b05      	ldr	r3, [pc, #20]	; (80084bc <lr11xx_radio_lora_crc_to_str+0x34>)
    }
    }
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	370c      	adds	r7, #12
 80084ac:	46bd      	mov	sp, r7
 80084ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b2:	4770      	bx	lr
 80084b4:	0800d1e4 	.word	0x0800d1e4
 80084b8:	0800d200 	.word	0x0800d200
 80084bc:	0800c938 	.word	0x0800c938

080084c0 <lr11xx_radio_lora_pkt_len_modes_to_str>:

const char* lr11xx_radio_lora_pkt_len_modes_to_str( const lr11xx_radio_lora_pkt_len_modes_t value )
{
 80084c0:	b480      	push	{r7}
 80084c2:	b083      	sub	sp, #12
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	4603      	mov	r3, r0
 80084c8:	71fb      	strb	r3, [r7, #7]
    switch( value )
 80084ca:	79fb      	ldrb	r3, [r7, #7]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d002      	beq.n	80084d6 <lr11xx_radio_lora_pkt_len_modes_to_str+0x16>
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	d002      	beq.n	80084da <lr11xx_radio_lora_pkt_len_modes_to_str+0x1a>
 80084d4:	e003      	b.n	80084de <lr11xx_radio_lora_pkt_len_modes_to_str+0x1e>
    {
    case LR11XX_RADIO_LORA_PKT_EXPLICIT:
    {
        return ( const char* ) "LR11XX_RADIO_LORA_PKT_EXPLICIT";
 80084d6:	4b05      	ldr	r3, [pc, #20]	; (80084ec <lr11xx_radio_lora_pkt_len_modes_to_str+0x2c>)
 80084d8:	e002      	b.n	80084e0 <lr11xx_radio_lora_pkt_len_modes_to_str+0x20>
    }

    case LR11XX_RADIO_LORA_PKT_IMPLICIT:
    {
        return ( const char* ) "LR11XX_RADIO_LORA_PKT_IMPLICIT";
 80084da:	4b05      	ldr	r3, [pc, #20]	; (80084f0 <lr11xx_radio_lora_pkt_len_modes_to_str+0x30>)
 80084dc:	e000      	b.n	80084e0 <lr11xx_radio_lora_pkt_len_modes_to_str+0x20>
    }

    default:
    {
        return ( const char* ) "Unknown";
 80084de:	4b05      	ldr	r3, [pc, #20]	; (80084f4 <lr11xx_radio_lora_pkt_len_modes_to_str+0x34>)
    }
    }
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	370c      	adds	r7, #12
 80084e4:	46bd      	mov	sp, r7
 80084e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ea:	4770      	bx	lr
 80084ec:	0800d21c 	.word	0x0800d21c
 80084f0:	0800d23c 	.word	0x0800d23c
 80084f4:	0800c938 	.word	0x0800c938

080084f8 <lr11xx_radio_lora_iq_to_str>:

const char* lr11xx_radio_lora_iq_to_str( const lr11xx_radio_lora_iq_t value )
{
 80084f8:	b480      	push	{r7}
 80084fa:	b083      	sub	sp, #12
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	4603      	mov	r3, r0
 8008500:	71fb      	strb	r3, [r7, #7]
    switch( value )
 8008502:	79fb      	ldrb	r3, [r7, #7]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d002      	beq.n	800850e <lr11xx_radio_lora_iq_to_str+0x16>
 8008508:	2b01      	cmp	r3, #1
 800850a:	d002      	beq.n	8008512 <lr11xx_radio_lora_iq_to_str+0x1a>
 800850c:	e003      	b.n	8008516 <lr11xx_radio_lora_iq_to_str+0x1e>
    {
    case LR11XX_RADIO_LORA_IQ_STANDARD:
    {
        return ( const char* ) "LR11XX_RADIO_LORA_IQ_STANDARD";
 800850e:	4b05      	ldr	r3, [pc, #20]	; (8008524 <lr11xx_radio_lora_iq_to_str+0x2c>)
 8008510:	e002      	b.n	8008518 <lr11xx_radio_lora_iq_to_str+0x20>
    }

    case LR11XX_RADIO_LORA_IQ_INVERTED:
    {
        return ( const char* ) "LR11XX_RADIO_LORA_IQ_INVERTED";
 8008512:	4b05      	ldr	r3, [pc, #20]	; (8008528 <lr11xx_radio_lora_iq_to_str+0x30>)
 8008514:	e000      	b.n	8008518 <lr11xx_radio_lora_iq_to_str+0x20>
    }

    default:
    {
        return ( const char* ) "Unknown";
 8008516:	4b05      	ldr	r3, [pc, #20]	; (800852c <lr11xx_radio_lora_iq_to_str+0x34>)
    }
    }
}
 8008518:	4618      	mov	r0, r3
 800851a:	370c      	adds	r7, #12
 800851c:	46bd      	mov	sp, r7
 800851e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008522:	4770      	bx	lr
 8008524:	0800d25c 	.word	0x0800d25c
 8008528:	0800d27c 	.word	0x0800d27c
 800852c:	0800c938 	.word	0x0800c938

08008530 <lr11xx_radio_pkt_type_to_str>:

const char* lr11xx_radio_pkt_type_to_str( const lr11xx_radio_pkt_type_t value )
{
 8008530:	b480      	push	{r7}
 8008532:	b083      	sub	sp, #12
 8008534:	af00      	add	r7, sp, #0
 8008536:	4603      	mov	r3, r0
 8008538:	71fb      	strb	r3, [r7, #7]
    switch( value )
 800853a:	79fb      	ldrb	r3, [r7, #7]
 800853c:	2b05      	cmp	r3, #5
 800853e:	d81b      	bhi.n	8008578 <lr11xx_radio_pkt_type_to_str+0x48>
 8008540:	a201      	add	r2, pc, #4	; (adr r2, 8008548 <lr11xx_radio_pkt_type_to_str+0x18>)
 8008542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008546:	bf00      	nop
 8008548:	08008561 	.word	0x08008561
 800854c:	08008565 	.word	0x08008565
 8008550:	08008569 	.word	0x08008569
 8008554:	0800856d 	.word	0x0800856d
 8008558:	08008571 	.word	0x08008571
 800855c:	08008575 	.word	0x08008575
    {
    case LR11XX_RADIO_PKT_NONE:
    {
        return ( const char* ) "LR11XX_RADIO_PKT_NONE";
 8008560:	4b09      	ldr	r3, [pc, #36]	; (8008588 <lr11xx_radio_pkt_type_to_str+0x58>)
 8008562:	e00a      	b.n	800857a <lr11xx_radio_pkt_type_to_str+0x4a>
    }

    case LR11XX_RADIO_PKT_TYPE_GFSK:
    {
        return ( const char* ) "LR11XX_RADIO_PKT_TYPE_GFSK";
 8008564:	4b09      	ldr	r3, [pc, #36]	; (800858c <lr11xx_radio_pkt_type_to_str+0x5c>)
 8008566:	e008      	b.n	800857a <lr11xx_radio_pkt_type_to_str+0x4a>
    }

    case LR11XX_RADIO_PKT_TYPE_LORA:
    {
        return ( const char* ) "LR11XX_RADIO_PKT_TYPE_LORA";
 8008568:	4b09      	ldr	r3, [pc, #36]	; (8008590 <lr11xx_radio_pkt_type_to_str+0x60>)
 800856a:	e006      	b.n	800857a <lr11xx_radio_pkt_type_to_str+0x4a>
    }

    case LR11XX_RADIO_PKT_TYPE_BPSK:
    {
        return ( const char* ) "LR11XX_RADIO_PKT_TYPE_BPSK";
 800856c:	4b09      	ldr	r3, [pc, #36]	; (8008594 <lr11xx_radio_pkt_type_to_str+0x64>)
 800856e:	e004      	b.n	800857a <lr11xx_radio_pkt_type_to_str+0x4a>
    }

    case LR11XX_RADIO_PKT_TYPE_LR_FHSS:
    {
        return ( const char* ) "LR11XX_RADIO_PKT_TYPE_LR_FHSS";
 8008570:	4b09      	ldr	r3, [pc, #36]	; (8008598 <lr11xx_radio_pkt_type_to_str+0x68>)
 8008572:	e002      	b.n	800857a <lr11xx_radio_pkt_type_to_str+0x4a>
    }

    case LR11XX_RADIO_PKT_TYPE_RTTOF:
    {
        return ( const char* ) "LR11XX_RADIO_PKT_TYPE_RTTOF";
 8008574:	4b09      	ldr	r3, [pc, #36]	; (800859c <lr11xx_radio_pkt_type_to_str+0x6c>)
 8008576:	e000      	b.n	800857a <lr11xx_radio_pkt_type_to_str+0x4a>
    }

    default:
    {
        return ( const char* ) "Unknown";
 8008578:	4b09      	ldr	r3, [pc, #36]	; (80085a0 <lr11xx_radio_pkt_type_to_str+0x70>)
    }
    }
}
 800857a:	4618      	mov	r0, r3
 800857c:	370c      	adds	r7, #12
 800857e:	46bd      	mov	sp, r7
 8008580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008584:	4770      	bx	lr
 8008586:	bf00      	nop
 8008588:	0800d29c 	.word	0x0800d29c
 800858c:	0800d2b4 	.word	0x0800d2b4
 8008590:	0800d2d0 	.word	0x0800d2d0
 8008594:	0800d2ec 	.word	0x0800d2ec
 8008598:	0800d308 	.word	0x0800d308
 800859c:	0800d328 	.word	0x0800d328
 80085a0:	0800c938 	.word	0x0800c938

080085a4 <lr11xx_driver_version_get_version_string>:
 * -----------------------------------------------------------------------------
 * --- PUBLIC FUNCTIONS DEFINITION ---------------------------------------------
 */

const char* lr11xx_driver_version_get_version_string( void )
{
 80085a4:	b480      	push	{r7}
 80085a6:	af00      	add	r7, sp, #0
    return ( const char* ) LR11XX_DRIVER_VERSION_FULL;
 80085a8:	4b02      	ldr	r3, [pc, #8]	; (80085b4 <lr11xx_driver_version_get_version_string+0x10>)
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr
 80085b4:	0800d7a4 	.word	0x0800d7a4

080085b8 <lr11xx_radio_set_lora_sync_word>:
only, please use lr11xx_radio_set_lora_public_network. \
To deactivate this warning, define C preprocessor symbol \
LR11XX_DISABLE_WARNINGS."
#endif
lr11xx_status_t lr11xx_radio_set_lora_sync_word( const void* context, const uint8_t sync_word )
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b086      	sub	sp, #24
 80085bc:	af02      	add	r7, sp, #8
 80085be:	6078      	str	r0, [r7, #4]
 80085c0:	460b      	mov	r3, r1
 80085c2:	70fb      	strb	r3, [r7, #3]
    const uint8_t cbuffer[LR11XX_RADIO_SET_LORA_SYNC_WORD_CMD_LENGTH] = {
 80085c4:	2302      	movs	r3, #2
 80085c6:	733b      	strb	r3, [r7, #12]
 80085c8:	232b      	movs	r3, #43	; 0x2b
 80085ca:	737b      	strb	r3, [r7, #13]
 80085cc:	78fb      	ldrb	r3, [r7, #3]
 80085ce:	73bb      	strb	r3, [r7, #14]
        ( uint8_t ) ( LR11XX_RADIO_SET_LORA_SYNC_WORD_OC >> 8 ),
        ( uint8_t ) ( LR11XX_RADIO_SET_LORA_SYNC_WORD_OC >> 0 ),
        sync_word,
    };

    return ( lr11xx_status_t ) lr11xx_hal_write( context, cbuffer, LR11XX_RADIO_SET_LORA_SYNC_WORD_CMD_LENGTH, 0, 0 );
 80085d0:	f107 010c 	add.w	r1, r7, #12
 80085d4:	2300      	movs	r3, #0
 80085d6:	9300      	str	r3, [sp, #0]
 80085d8:	2300      	movs	r3, #0
 80085da:	2203      	movs	r2, #3
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f7ff fd91 	bl	8008104 <lr11xx_hal_write>
 80085e2:	4603      	mov	r3, r0
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3710      	adds	r7, #16
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}

080085ec <lr11xx_radio_set_tx>:

    return status;
}

lr11xx_status_t lr11xx_radio_set_tx( const void* context, const uint32_t timeout_in_ms )
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b084      	sub	sp, #16
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
 80085f4:	6039      	str	r1, [r7, #0]
    const uint32_t timeout_in_rtc_step = lr11xx_radio_convert_time_in_ms_to_rtc_step( timeout_in_ms );
 80085f6:	6838      	ldr	r0, [r7, #0]
 80085f8:	f000 f9ca 	bl	8008990 <lr11xx_radio_convert_time_in_ms_to_rtc_step>
 80085fc:	60f8      	str	r0, [r7, #12]

    return lr11xx_radio_set_tx_with_timeout_in_rtc_step( context, timeout_in_rtc_step );
 80085fe:	68f9      	ldr	r1, [r7, #12]
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f000 f805 	bl	8008610 <lr11xx_radio_set_tx_with_timeout_in_rtc_step>
 8008606:	4603      	mov	r3, r0
}
 8008608:	4618      	mov	r0, r3
 800860a:	3710      	adds	r7, #16
 800860c:	46bd      	mov	sp, r7
 800860e:	bd80      	pop	{r7, pc}

08008610 <lr11xx_radio_set_tx_with_timeout_in_rtc_step>:

lr11xx_status_t lr11xx_radio_set_tx_with_timeout_in_rtc_step( const void* context, const uint32_t timeout_in_rtc_step )
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b086      	sub	sp, #24
 8008614:	af02      	add	r7, sp, #8
 8008616:	6078      	str	r0, [r7, #4]
 8008618:	6039      	str	r1, [r7, #0]
    lr11xx_status_t status = LR11XX_STATUS_ERROR;
 800861a:	2303      	movs	r3, #3
 800861c:	73fb      	strb	r3, [r7, #15]

    const uint8_t cbuffer[LR11XX_RADIO_SET_TX_CMD_LENGTH] = {
 800861e:	2302      	movs	r3, #2
 8008620:	723b      	strb	r3, [r7, #8]
 8008622:	230a      	movs	r3, #10
 8008624:	727b      	strb	r3, [r7, #9]
        ( uint8_t ) ( LR11XX_RADIO_SET_TX_OC >> 8 ), ( uint8_t ) ( LR11XX_RADIO_SET_TX_OC >> 0 ),
        ( uint8_t ) ( timeout_in_rtc_step >> 16 ),   ( uint8_t ) ( timeout_in_rtc_step >> 8 ),
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	0c1b      	lsrs	r3, r3, #16
 800862a:	b2db      	uxtb	r3, r3
    const uint8_t cbuffer[LR11XX_RADIO_SET_TX_CMD_LENGTH] = {
 800862c:	72bb      	strb	r3, [r7, #10]
        ( uint8_t ) ( timeout_in_rtc_step >> 16 ),   ( uint8_t ) ( timeout_in_rtc_step >> 8 ),
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	0a1b      	lsrs	r3, r3, #8
 8008632:	b2db      	uxtb	r3, r3
    const uint8_t cbuffer[LR11XX_RADIO_SET_TX_CMD_LENGTH] = {
 8008634:	72fb      	strb	r3, [r7, #11]
        ( uint8_t ) ( timeout_in_rtc_step >> 0 ),
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	b2db      	uxtb	r3, r3
    const uint8_t cbuffer[LR11XX_RADIO_SET_TX_CMD_LENGTH] = {
 800863a:	733b      	strb	r3, [r7, #12]
    };

    do
    {
        status = LR11XX_RADIO_APPLY_HIGH_ACP_WORKAROUND( context );
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f000 f9b9 	bl	80089b4 <lr11xx_radio_apply_high_acp_workaround>
 8008642:	4603      	mov	r3, r0
 8008644:	73fb      	strb	r3, [r7, #15]
        if( status != LR11XX_STATUS_OK )
 8008646:	7bfb      	ldrb	r3, [r7, #15]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d10d      	bne.n	8008668 <lr11xx_radio_set_tx_with_timeout_in_rtc_step+0x58>
        {
            break;
        }

        status = ( lr11xx_status_t ) lr11xx_hal_write( context, cbuffer, LR11XX_RADIO_SET_TX_CMD_LENGTH, 0, 0 );
 800864c:	f107 0108 	add.w	r1, r7, #8
 8008650:	2300      	movs	r3, #0
 8008652:	9300      	str	r3, [sp, #0]
 8008654:	2300      	movs	r3, #0
 8008656:	2205      	movs	r2, #5
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f7ff fd53 	bl	8008104 <lr11xx_hal_write>
 800865e:	4603      	mov	r3, r0
 8008660:	73fb      	strb	r3, [r7, #15]
        if( status != LR11XX_STATUS_OK )
 8008662:	7bfb      	ldrb	r3, [r7, #15]
 8008664:	2b00      	cmp	r3, #0
 8008666:	e000      	b.n	800866a <lr11xx_radio_set_tx_with_timeout_in_rtc_step+0x5a>
            break;
 8008668:	bf00      	nop
        {
            break;
        }
    } while( 0 );

    return status;
 800866a:	7bfb      	ldrb	r3, [r7, #15]
}
 800866c:	4618      	mov	r0, r3
 800866e:	3710      	adds	r7, #16
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}

08008674 <lr11xx_radio_set_rf_freq>:

lr11xx_status_t lr11xx_radio_set_rf_freq( const void* context, const uint32_t freq_in_hz )
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b086      	sub	sp, #24
 8008678:	af02      	add	r7, sp, #8
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	6039      	str	r1, [r7, #0]
    const uint8_t cbuffer[LR11XX_RADIO_SET_RF_FREQUENCY_CMD_LENGTH] = {
 800867e:	2302      	movs	r3, #2
 8008680:	723b      	strb	r3, [r7, #8]
 8008682:	230b      	movs	r3, #11
 8008684:	727b      	strb	r3, [r7, #9]
        ( uint8_t ) ( LR11XX_RADIO_SET_RF_FREQUENCY_OC >> 8 ),
        ( uint8_t ) ( LR11XX_RADIO_SET_RF_FREQUENCY_OC >> 0 ),
        ( uint8_t ) ( freq_in_hz >> 24 ),
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	0e1b      	lsrs	r3, r3, #24
 800868a:	b2db      	uxtb	r3, r3
    const uint8_t cbuffer[LR11XX_RADIO_SET_RF_FREQUENCY_CMD_LENGTH] = {
 800868c:	72bb      	strb	r3, [r7, #10]
        ( uint8_t ) ( freq_in_hz >> 16 ),
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	0c1b      	lsrs	r3, r3, #16
 8008692:	b2db      	uxtb	r3, r3
    const uint8_t cbuffer[LR11XX_RADIO_SET_RF_FREQUENCY_CMD_LENGTH] = {
 8008694:	72fb      	strb	r3, [r7, #11]
        ( uint8_t ) ( freq_in_hz >> 8 ),
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	0a1b      	lsrs	r3, r3, #8
 800869a:	b2db      	uxtb	r3, r3
    const uint8_t cbuffer[LR11XX_RADIO_SET_RF_FREQUENCY_CMD_LENGTH] = {
 800869c:	733b      	strb	r3, [r7, #12]
        ( uint8_t ) ( freq_in_hz >> 0 ),
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	b2db      	uxtb	r3, r3
    const uint8_t cbuffer[LR11XX_RADIO_SET_RF_FREQUENCY_CMD_LENGTH] = {
 80086a2:	737b      	strb	r3, [r7, #13]
    };

    return ( lr11xx_status_t ) lr11xx_hal_write( context, cbuffer, LR11XX_RADIO_SET_RF_FREQUENCY_CMD_LENGTH, 0, 0 );
 80086a4:	f107 0108 	add.w	r1, r7, #8
 80086a8:	2300      	movs	r3, #0
 80086aa:	9300      	str	r3, [sp, #0]
 80086ac:	2300      	movs	r3, #0
 80086ae:	2206      	movs	r2, #6
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f7ff fd27 	bl	8008104 <lr11xx_hal_write>
 80086b6:	4603      	mov	r3, r0
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	3710      	adds	r7, #16
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}

080086c0 <lr11xx_radio_set_pkt_type>:

    return ( lr11xx_status_t ) lr11xx_hal_write( context, cbuffer, LR11XX_RADIO_SET_CAD_PARAMS_CMD_LENGTH, 0, 0 );
}

lr11xx_status_t lr11xx_radio_set_pkt_type( const void* context, const lr11xx_radio_pkt_type_t pkt_type )
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b086      	sub	sp, #24
 80086c4:	af02      	add	r7, sp, #8
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	460b      	mov	r3, r1
 80086ca:	70fb      	strb	r3, [r7, #3]
    const uint8_t cbuffer[LR11XX_RADIO_SET_PKT_TYPE_CMD_LENGTH] = {
 80086cc:	2302      	movs	r3, #2
 80086ce:	733b      	strb	r3, [r7, #12]
 80086d0:	230e      	movs	r3, #14
 80086d2:	737b      	strb	r3, [r7, #13]
 80086d4:	78fb      	ldrb	r3, [r7, #3]
 80086d6:	73bb      	strb	r3, [r7, #14]
        ( uint8_t ) ( LR11XX_RADIO_SET_PKT_TYPE_OC >> 8 ),
        ( uint8_t ) ( LR11XX_RADIO_SET_PKT_TYPE_OC >> 0 ),
        ( uint8_t ) pkt_type,
    };

    return ( lr11xx_status_t ) lr11xx_hal_write( context, cbuffer, LR11XX_RADIO_SET_PKT_TYPE_CMD_LENGTH, 0, 0 );
 80086d8:	f107 010c 	add.w	r1, r7, #12
 80086dc:	2300      	movs	r3, #0
 80086de:	9300      	str	r3, [sp, #0]
 80086e0:	2300      	movs	r3, #0
 80086e2:	2203      	movs	r2, #3
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f7ff fd0d 	bl	8008104 <lr11xx_hal_write>
 80086ea:	4603      	mov	r3, r0
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3710      	adds	r7, #16
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}

080086f4 <lr11xx_radio_set_lora_mod_params>:
                                                 0, 0 );
}

lr11xx_status_t lr11xx_radio_set_lora_mod_params( const void*                           context,
                                                  const lr11xx_radio_mod_params_lora_t* mod_params )
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b086      	sub	sp, #24
 80086f8:	af02      	add	r7, sp, #8
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	6039      	str	r1, [r7, #0]
    const uint8_t cbuffer[LR11XX_RADIO_SET_MODULATION_PARAMS_LORA_CMD_LENGTH] = {
 80086fe:	2302      	movs	r3, #2
 8008700:	723b      	strb	r3, [r7, #8]
 8008702:	230f      	movs	r3, #15
 8008704:	727b      	strb	r3, [r7, #9]
        ( uint8_t ) ( LR11XX_RADIO_SET_MODULATION_PARAM_OC >> 8 ),
        ( uint8_t ) ( LR11XX_RADIO_SET_MODULATION_PARAM_OC >> 0 ),
        ( uint8_t ) mod_params->sf,
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	781b      	ldrb	r3, [r3, #0]
    const uint8_t cbuffer[LR11XX_RADIO_SET_MODULATION_PARAMS_LORA_CMD_LENGTH] = {
 800870a:	72bb      	strb	r3, [r7, #10]
        ( uint8_t ) mod_params->bw,
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	785b      	ldrb	r3, [r3, #1]
    const uint8_t cbuffer[LR11XX_RADIO_SET_MODULATION_PARAMS_LORA_CMD_LENGTH] = {
 8008710:	72fb      	strb	r3, [r7, #11]
        ( uint8_t ) mod_params->cr,
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	789b      	ldrb	r3, [r3, #2]
    const uint8_t cbuffer[LR11XX_RADIO_SET_MODULATION_PARAMS_LORA_CMD_LENGTH] = {
 8008716:	733b      	strb	r3, [r7, #12]
        ( uint8_t ) mod_params->ldro,
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	78db      	ldrb	r3, [r3, #3]
    const uint8_t cbuffer[LR11XX_RADIO_SET_MODULATION_PARAMS_LORA_CMD_LENGTH] = {
 800871c:	737b      	strb	r3, [r7, #13]
    };

    return ( lr11xx_status_t ) lr11xx_hal_write( context, cbuffer, LR11XX_RADIO_SET_MODULATION_PARAMS_LORA_CMD_LENGTH,
 800871e:	f107 0108 	add.w	r1, r7, #8
 8008722:	2300      	movs	r3, #0
 8008724:	9300      	str	r3, [sp, #0]
 8008726:	2300      	movs	r3, #0
 8008728:	2206      	movs	r2, #6
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f7ff fcea 	bl	8008104 <lr11xx_hal_write>
 8008730:	4603      	mov	r3, r0
                                                 0, 0 );
}
 8008732:	4618      	mov	r0, r3
 8008734:	3710      	adds	r7, #16
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}

0800873a <lr11xx_radio_set_lora_pkt_params>:
    return ( lr11xx_status_t ) lr11xx_hal_write( context, cbuffer, LR11XX_RADIO_SET_PKT_PARAM_BPSK_CMD_LENGTH, 0, 0 );
}

lr11xx_status_t lr11xx_radio_set_lora_pkt_params( const void*                           context,
                                                  const lr11xx_radio_pkt_params_lora_t* pkt_params )
{
 800873a:	b580      	push	{r7, lr}
 800873c:	b086      	sub	sp, #24
 800873e:	af02      	add	r7, sp, #8
 8008740:	6078      	str	r0, [r7, #4]
 8008742:	6039      	str	r1, [r7, #0]
    const uint8_t cbuffer[LR11XX_RADIO_SET_PKT_PARAM_LORA_CMD_LENGTH] = {
 8008744:	2302      	movs	r3, #2
 8008746:	723b      	strb	r3, [r7, #8]
 8008748:	2310      	movs	r3, #16
 800874a:	727b      	strb	r3, [r7, #9]
        ( uint8_t ) ( LR11XX_RADIO_SET_PKT_PARAM_OC >> 8 ),
        ( uint8_t ) ( LR11XX_RADIO_SET_PKT_PARAM_OC >> 0 ),
        ( uint8_t ) ( pkt_params->preamble_len_in_symb >> 8 ),
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	881b      	ldrh	r3, [r3, #0]
 8008750:	0a1b      	lsrs	r3, r3, #8
 8008752:	b29b      	uxth	r3, r3
 8008754:	b2db      	uxtb	r3, r3
    const uint8_t cbuffer[LR11XX_RADIO_SET_PKT_PARAM_LORA_CMD_LENGTH] = {
 8008756:	72bb      	strb	r3, [r7, #10]
        ( uint8_t ) ( pkt_params->preamble_len_in_symb >> 0 ),
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	881b      	ldrh	r3, [r3, #0]
 800875c:	b2db      	uxtb	r3, r3
    const uint8_t cbuffer[LR11XX_RADIO_SET_PKT_PARAM_LORA_CMD_LENGTH] = {
 800875e:	72fb      	strb	r3, [r7, #11]
        ( uint8_t ) ( pkt_params->header_type ),
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	789b      	ldrb	r3, [r3, #2]
    const uint8_t cbuffer[LR11XX_RADIO_SET_PKT_PARAM_LORA_CMD_LENGTH] = {
 8008764:	733b      	strb	r3, [r7, #12]
        pkt_params->pld_len_in_bytes,
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	78db      	ldrb	r3, [r3, #3]
    const uint8_t cbuffer[LR11XX_RADIO_SET_PKT_PARAM_LORA_CMD_LENGTH] = {
 800876a:	737b      	strb	r3, [r7, #13]
        ( uint8_t ) ( pkt_params->crc ),
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	791b      	ldrb	r3, [r3, #4]
    const uint8_t cbuffer[LR11XX_RADIO_SET_PKT_PARAM_LORA_CMD_LENGTH] = {
 8008770:	73bb      	strb	r3, [r7, #14]
        ( uint8_t ) ( pkt_params->iq ),
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	795b      	ldrb	r3, [r3, #5]
    const uint8_t cbuffer[LR11XX_RADIO_SET_PKT_PARAM_LORA_CMD_LENGTH] = {
 8008776:	73fb      	strb	r3, [r7, #15]
    };

    return ( lr11xx_status_t ) lr11xx_hal_write( context, cbuffer, LR11XX_RADIO_SET_PKT_PARAM_LORA_CMD_LENGTH, 0, 0 );
 8008778:	f107 0108 	add.w	r1, r7, #8
 800877c:	2300      	movs	r3, #0
 800877e:	9300      	str	r3, [sp, #0]
 8008780:	2300      	movs	r3, #0
 8008782:	2208      	movs	r2, #8
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f7ff fcbd 	bl	8008104 <lr11xx_hal_write>
 800878a:	4603      	mov	r3, r0
}
 800878c:	4618      	mov	r0, r3
 800878e:	3710      	adds	r7, #16
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}

08008794 <lr11xx_radio_set_tx_params>:

lr11xx_status_t lr11xx_radio_set_tx_params( const void* context, const int8_t pwr_in_dbm,
                                            const lr11xx_radio_ramp_time_t ramp_time )
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b086      	sub	sp, #24
 8008798:	af02      	add	r7, sp, #8
 800879a:	6078      	str	r0, [r7, #4]
 800879c:	460b      	mov	r3, r1
 800879e:	70fb      	strb	r3, [r7, #3]
 80087a0:	4613      	mov	r3, r2
 80087a2:	70bb      	strb	r3, [r7, #2]
    const uint8_t cbuffer[LR11XX_RADIO_SET_TX_PARAMS_CMD_LENGTH] = {
 80087a4:	2302      	movs	r3, #2
 80087a6:	733b      	strb	r3, [r7, #12]
 80087a8:	2311      	movs	r3, #17
 80087aa:	737b      	strb	r3, [r7, #13]
        ( uint8_t ) ( LR11XX_RADIO_SET_TX_PARAMS_OC >> 8 ),
        ( uint8_t ) ( LR11XX_RADIO_SET_TX_PARAMS_OC >> 0 ),
        ( uint8_t ) pwr_in_dbm,
 80087ac:	78fb      	ldrb	r3, [r7, #3]
    const uint8_t cbuffer[LR11XX_RADIO_SET_TX_PARAMS_CMD_LENGTH] = {
 80087ae:	73bb      	strb	r3, [r7, #14]
 80087b0:	78bb      	ldrb	r3, [r7, #2]
 80087b2:	73fb      	strb	r3, [r7, #15]
        ( uint8_t ) ramp_time,
    };

    return ( lr11xx_status_t ) lr11xx_hal_write( context, cbuffer, LR11XX_RADIO_SET_TX_PARAMS_CMD_LENGTH, 0, 0 );
 80087b4:	f107 010c 	add.w	r1, r7, #12
 80087b8:	2300      	movs	r3, #0
 80087ba:	9300      	str	r3, [sp, #0]
 80087bc:	2300      	movs	r3, #0
 80087be:	2204      	movs	r2, #4
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f7ff fc9f 	bl	8008104 <lr11xx_hal_write>
 80087c6:	4603      	mov	r3, r0
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	3710      	adds	r7, #16
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}

080087d0 <lr11xx_radio_set_rx_tx_fallback_mode>:
    return ( lr11xx_status_t ) lr11xx_hal_write( context, cbuffer, LR11XX_RADIO_SET_PKT_ADDRESS_CMD_LENGTH, 0, 0 );
}

lr11xx_status_t lr11xx_radio_set_rx_tx_fallback_mode( const void*                         context,
                                                      const lr11xx_radio_fallback_modes_t fallback_mode )
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b086      	sub	sp, #24
 80087d4:	af02      	add	r7, sp, #8
 80087d6:	6078      	str	r0, [r7, #4]
 80087d8:	460b      	mov	r3, r1
 80087da:	70fb      	strb	r3, [r7, #3]
    const uint8_t cbuffer[LR11XX_RADIO_SET_RX_TX_FALLBACK_MODE_CMD_LENGTH] = {
 80087dc:	2302      	movs	r3, #2
 80087de:	733b      	strb	r3, [r7, #12]
 80087e0:	2313      	movs	r3, #19
 80087e2:	737b      	strb	r3, [r7, #13]
 80087e4:	78fb      	ldrb	r3, [r7, #3]
 80087e6:	73bb      	strb	r3, [r7, #14]
        ( uint8_t ) ( LR11XX_RADIO_SET_RX_TX_FALLBACK_MODE_OC >> 8 ),
        ( uint8_t ) ( LR11XX_RADIO_SET_RX_TX_FALLBACK_MODE_OC >> 0 ),
        fallback_mode,
    };

    return ( lr11xx_status_t ) lr11xx_hal_write( context, cbuffer, LR11XX_RADIO_SET_RX_TX_FALLBACK_MODE_CMD_LENGTH, 0,
 80087e8:	f107 010c 	add.w	r1, r7, #12
 80087ec:	2300      	movs	r3, #0
 80087ee:	9300      	str	r3, [sp, #0]
 80087f0:	2300      	movs	r3, #0
 80087f2:	2203      	movs	r2, #3
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f7ff fc85 	bl	8008104 <lr11xx_hal_write>
 80087fa:	4603      	mov	r3, r0
                                                 0 );
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	3710      	adds	r7, #16
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}

08008804 <lr11xx_radio_set_pa_cfg>:
    return ( lr11xx_status_t ) lr11xx_hal_write( context, cbuffer, LR11XX_RADIO_SET_RX_DUTY_CYCLE_MODE_CMD_LENGTH, 0,
                                                 0 );
}

lr11xx_status_t lr11xx_radio_set_pa_cfg( const void* context, const lr11xx_radio_pa_cfg_t* pa_cfg )
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b086      	sub	sp, #24
 8008808:	af02      	add	r7, sp, #8
 800880a:	6078      	str	r0, [r7, #4]
 800880c:	6039      	str	r1, [r7, #0]
    const uint8_t cbuffer[LR11XX_RADIO_SET_PA_CFG_CMD_LENGTH] = {
 800880e:	2302      	movs	r3, #2
 8008810:	723b      	strb	r3, [r7, #8]
 8008812:	2315      	movs	r3, #21
 8008814:	727b      	strb	r3, [r7, #9]
        ( uint8_t ) ( LR11XX_RADIO_SET_PA_CFG_OC >> 8 ),
        ( uint8_t ) ( LR11XX_RADIO_SET_PA_CFG_OC >> 0 ),
        ( uint8_t ) pa_cfg->pa_sel,
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	781b      	ldrb	r3, [r3, #0]
    const uint8_t cbuffer[LR11XX_RADIO_SET_PA_CFG_CMD_LENGTH] = {
 800881a:	72bb      	strb	r3, [r7, #10]
        ( uint8_t ) pa_cfg->pa_reg_supply,
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	785b      	ldrb	r3, [r3, #1]
    const uint8_t cbuffer[LR11XX_RADIO_SET_PA_CFG_CMD_LENGTH] = {
 8008820:	72fb      	strb	r3, [r7, #11]
        pa_cfg->pa_duty_cycle,
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	789b      	ldrb	r3, [r3, #2]
    const uint8_t cbuffer[LR11XX_RADIO_SET_PA_CFG_CMD_LENGTH] = {
 8008826:	733b      	strb	r3, [r7, #12]
        pa_cfg->pa_hp_sel,
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	78db      	ldrb	r3, [r3, #3]
    const uint8_t cbuffer[LR11XX_RADIO_SET_PA_CFG_CMD_LENGTH] = {
 800882c:	737b      	strb	r3, [r7, #13]
    };

    return ( lr11xx_status_t ) lr11xx_hal_write( context, cbuffer, LR11XX_RADIO_SET_PA_CFG_CMD_LENGTH, 0, 0 );
 800882e:	f107 0108 	add.w	r1, r7, #8
 8008832:	2300      	movs	r3, #0
 8008834:	9300      	str	r3, [sp, #0]
 8008836:	2300      	movs	r3, #0
 8008838:	2206      	movs	r2, #6
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f7ff fc62 	bl	8008104 <lr11xx_hal_write>
 8008840:	4603      	mov	r3, r0
}
 8008842:	4618      	mov	r0, r3
 8008844:	3710      	adds	r7, #16
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}

0800884a <lr11xx_radio_cfg_rx_boosted>:

    return ( lr11xx_status_t ) lr11xx_hal_write( context, cbuffer, LR11XX_RADIO_SET_GFSK_WHITENING_CMD_LENGTH, 0, 0 );
}

lr11xx_status_t lr11xx_radio_cfg_rx_boosted( const void* context, const bool enable_boost_mode )
{
 800884a:	b580      	push	{r7, lr}
 800884c:	b086      	sub	sp, #24
 800884e:	af02      	add	r7, sp, #8
 8008850:	6078      	str	r0, [r7, #4]
 8008852:	460b      	mov	r3, r1
 8008854:	70fb      	strb	r3, [r7, #3]
    const uint8_t cbuffer[LR11XX_RADIO_SET_RX_BOOSTED_LENGTH] = {
 8008856:	2302      	movs	r3, #2
 8008858:	733b      	strb	r3, [r7, #12]
 800885a:	2327      	movs	r3, #39	; 0x27
 800885c:	737b      	strb	r3, [r7, #13]
        ( uint8_t ) ( LR11XX_RADIO_SET_RX_BOOSTED_OC >> 8 ),
        ( uint8_t ) ( LR11XX_RADIO_SET_RX_BOOSTED_OC >> 0 ),
        ( enable_boost_mode == true ) ? 0x01 : 0x00,
 800885e:	78fb      	ldrb	r3, [r7, #3]
    const uint8_t cbuffer[LR11XX_RADIO_SET_RX_BOOSTED_LENGTH] = {
 8008860:	73bb      	strb	r3, [r7, #14]
    };

    return ( lr11xx_status_t ) lr11xx_hal_write( context, cbuffer, LR11XX_RADIO_SET_RX_BOOSTED_LENGTH, 0, 0 );
 8008862:	f107 010c 	add.w	r1, r7, #12
 8008866:	2300      	movs	r3, #0
 8008868:	9300      	str	r3, [sp, #0]
 800886a:	2300      	movs	r3, #0
 800886c:	2203      	movs	r2, #3
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f7ff fc48 	bl	8008104 <lr11xx_hal_write>
 8008874:	4603      	mov	r3, r0
}
 8008876:	4618      	mov	r0, r3
 8008878:	3710      	adds	r7, #16
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}

0800887e <lr11xx_radio_set_rssi_calibration>:

lr11xx_status_t lr11xx_radio_set_rssi_calibration( const void*                                  context,
                                                   const lr11xx_radio_rssi_calibration_table_t* rssi_cal_table )
{
 800887e:	b580      	push	{r7, lr}
 8008880:	b088      	sub	sp, #32
 8008882:	af02      	add	r7, sp, #8
 8008884:	6078      	str	r0, [r7, #4]
 8008886:	6039      	str	r1, [r7, #0]
    const uint8_t cbuffer[LR11XX_RADIO_SET_RSSI_CALIBRATION_LENGTH] = {
 8008888:	2302      	movs	r3, #2
 800888a:	723b      	strb	r3, [r7, #8]
 800888c:	2329      	movs	r3, #41	; 0x29
 800888e:	727b      	strb	r3, [r7, #9]
        ( uint8_t ) ( LR11XX_RADIO_SET_RSSI_CALIBRATION_OC >> 8 ),
        ( uint8_t ) ( LR11XX_RADIO_SET_RSSI_CALIBRATION_OC >> 0 ),
        ( uint8_t ) ( ( ( rssi_cal_table->gain_tune.g5 & 0x0F ) << 4 ) + ( rssi_cal_table->gain_tune.g4 & 0x0F ) ),
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	785b      	ldrb	r3, [r3, #1]
 8008894:	011b      	lsls	r3, r3, #4
 8008896:	b2da      	uxtb	r2, r3
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	781b      	ldrb	r3, [r3, #0]
 800889c:	f003 030f 	and.w	r3, r3, #15
 80088a0:	b2db      	uxtb	r3, r3
 80088a2:	4413      	add	r3, r2
 80088a4:	b2db      	uxtb	r3, r3
    const uint8_t cbuffer[LR11XX_RADIO_SET_RSSI_CALIBRATION_LENGTH] = {
 80088a6:	72bb      	strb	r3, [r7, #10]
        ( uint8_t ) ( ( ( rssi_cal_table->gain_tune.g7 & 0x0F ) << 4 ) + ( rssi_cal_table->gain_tune.g6 & 0x0F ) ),
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	78db      	ldrb	r3, [r3, #3]
 80088ac:	011b      	lsls	r3, r3, #4
 80088ae:	b2da      	uxtb	r2, r3
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	789b      	ldrb	r3, [r3, #2]
 80088b4:	f003 030f 	and.w	r3, r3, #15
 80088b8:	b2db      	uxtb	r3, r3
 80088ba:	4413      	add	r3, r2
 80088bc:	b2db      	uxtb	r3, r3
    const uint8_t cbuffer[LR11XX_RADIO_SET_RSSI_CALIBRATION_LENGTH] = {
 80088be:	72fb      	strb	r3, [r7, #11]
        ( uint8_t ) ( ( ( rssi_cal_table->gain_tune.g9 & 0x0F ) << 4 ) + ( rssi_cal_table->gain_tune.g8 & 0x0F ) ),
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	795b      	ldrb	r3, [r3, #5]
 80088c4:	011b      	lsls	r3, r3, #4
 80088c6:	b2da      	uxtb	r2, r3
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	791b      	ldrb	r3, [r3, #4]
 80088cc:	f003 030f 	and.w	r3, r3, #15
 80088d0:	b2db      	uxtb	r3, r3
 80088d2:	4413      	add	r3, r2
 80088d4:	b2db      	uxtb	r3, r3
    const uint8_t cbuffer[LR11XX_RADIO_SET_RSSI_CALIBRATION_LENGTH] = {
 80088d6:	733b      	strb	r3, [r7, #12]
        ( uint8_t ) ( ( ( rssi_cal_table->gain_tune.g11 & 0x0F ) << 4 ) + ( rssi_cal_table->gain_tune.g10 & 0x0F ) ),
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	79db      	ldrb	r3, [r3, #7]
 80088dc:	011b      	lsls	r3, r3, #4
 80088de:	b2da      	uxtb	r2, r3
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	799b      	ldrb	r3, [r3, #6]
 80088e4:	f003 030f 	and.w	r3, r3, #15
 80088e8:	b2db      	uxtb	r3, r3
 80088ea:	4413      	add	r3, r2
 80088ec:	b2db      	uxtb	r3, r3
    const uint8_t cbuffer[LR11XX_RADIO_SET_RSSI_CALIBRATION_LENGTH] = {
 80088ee:	737b      	strb	r3, [r7, #13]
        ( uint8_t ) ( ( ( rssi_cal_table->gain_tune.g13 & 0x0F ) << 4 ) + ( rssi_cal_table->gain_tune.g12 & 0x0F ) ),
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	7a5b      	ldrb	r3, [r3, #9]
 80088f4:	011b      	lsls	r3, r3, #4
 80088f6:	b2da      	uxtb	r2, r3
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	7a1b      	ldrb	r3, [r3, #8]
 80088fc:	f003 030f 	and.w	r3, r3, #15
 8008900:	b2db      	uxtb	r3, r3
 8008902:	4413      	add	r3, r2
 8008904:	b2db      	uxtb	r3, r3
    const uint8_t cbuffer[LR11XX_RADIO_SET_RSSI_CALIBRATION_LENGTH] = {
 8008906:	73bb      	strb	r3, [r7, #14]
        ( uint8_t ) ( ( ( rssi_cal_table->gain_tune.g13hp2 & 0x0F ) << 4 ) +
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	7adb      	ldrb	r3, [r3, #11]
 800890c:	011b      	lsls	r3, r3, #4
 800890e:	b2da      	uxtb	r2, r3
                      ( rssi_cal_table->gain_tune.g13hp1 & 0x0F ) ),
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	7a9b      	ldrb	r3, [r3, #10]
 8008914:	f003 030f 	and.w	r3, r3, #15
 8008918:	b2db      	uxtb	r3, r3
        ( uint8_t ) ( ( ( rssi_cal_table->gain_tune.g13hp2 & 0x0F ) << 4 ) +
 800891a:	4413      	add	r3, r2
 800891c:	b2db      	uxtb	r3, r3
    const uint8_t cbuffer[LR11XX_RADIO_SET_RSSI_CALIBRATION_LENGTH] = {
 800891e:	73fb      	strb	r3, [r7, #15]
        ( uint8_t ) ( ( ( rssi_cal_table->gain_tune.g13hp4 & 0x0F ) << 4 ) +
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	7b5b      	ldrb	r3, [r3, #13]
 8008924:	011b      	lsls	r3, r3, #4
 8008926:	b2da      	uxtb	r2, r3
                      ( rssi_cal_table->gain_tune.g13hp3 & 0x0F ) ),
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	7b1b      	ldrb	r3, [r3, #12]
 800892c:	f003 030f 	and.w	r3, r3, #15
 8008930:	b2db      	uxtb	r3, r3
        ( uint8_t ) ( ( ( rssi_cal_table->gain_tune.g13hp4 & 0x0F ) << 4 ) +
 8008932:	4413      	add	r3, r2
 8008934:	b2db      	uxtb	r3, r3
    const uint8_t cbuffer[LR11XX_RADIO_SET_RSSI_CALIBRATION_LENGTH] = {
 8008936:	743b      	strb	r3, [r7, #16]
        ( uint8_t ) ( ( ( rssi_cal_table->gain_tune.g13hp6 & 0x0F ) << 4 ) +
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	7bdb      	ldrb	r3, [r3, #15]
 800893c:	011b      	lsls	r3, r3, #4
 800893e:	b2da      	uxtb	r2, r3
                      ( rssi_cal_table->gain_tune.g13hp5 & 0x0F ) ),
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	7b9b      	ldrb	r3, [r3, #14]
 8008944:	f003 030f 	and.w	r3, r3, #15
 8008948:	b2db      	uxtb	r3, r3
        ( uint8_t ) ( ( ( rssi_cal_table->gain_tune.g13hp6 & 0x0F ) << 4 ) +
 800894a:	4413      	add	r3, r2
 800894c:	b2db      	uxtb	r3, r3
    const uint8_t cbuffer[LR11XX_RADIO_SET_RSSI_CALIBRATION_LENGTH] = {
 800894e:	747b      	strb	r3, [r7, #17]
        ( uint8_t ) ( rssi_cal_table->gain_tune.g13hp7 & 0x0F ),
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	7c1b      	ldrb	r3, [r3, #16]
 8008954:	f003 030f 	and.w	r3, r3, #15
 8008958:	b2db      	uxtb	r3, r3
    const uint8_t cbuffer[LR11XX_RADIO_SET_RSSI_CALIBRATION_LENGTH] = {
 800895a:	74bb      	strb	r3, [r7, #18]
        ( uint8_t ) ( rssi_cal_table->gain_offset >> 8 ),
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8008962:	121b      	asrs	r3, r3, #8
 8008964:	b21b      	sxth	r3, r3
 8008966:	b2db      	uxtb	r3, r3
    const uint8_t cbuffer[LR11XX_RADIO_SET_RSSI_CALIBRATION_LENGTH] = {
 8008968:	74fb      	strb	r3, [r7, #19]
        ( uint8_t ) ( rssi_cal_table->gain_offset >> 0 ),
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8008970:	b2db      	uxtb	r3, r3
    const uint8_t cbuffer[LR11XX_RADIO_SET_RSSI_CALIBRATION_LENGTH] = {
 8008972:	753b      	strb	r3, [r7, #20]
    };

    return ( lr11xx_status_t ) lr11xx_hal_write( context, cbuffer, LR11XX_RADIO_SET_RSSI_CALIBRATION_LENGTH, 0, 0 );
 8008974:	f107 0108 	add.w	r1, r7, #8
 8008978:	2300      	movs	r3, #0
 800897a:	9300      	str	r3, [sp, #0]
 800897c:	2300      	movs	r3, #0
 800897e:	220d      	movs	r2, #13
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f7ff fbbf 	bl	8008104 <lr11xx_hal_write>
 8008986:	4603      	mov	r3, r0
}
 8008988:	4618      	mov	r0, r3
 800898a:	3718      	adds	r7, #24
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}

08008990 <lr11xx_radio_convert_time_in_ms_to_rtc_step>:
    // Perform integral ceil()
    return ( numerator + denominator - 1 ) / denominator;
}

uint32_t lr11xx_radio_convert_time_in_ms_to_rtc_step( uint32_t time_in_ms )
{
 8008990:	b480      	push	{r7}
 8008992:	b083      	sub	sp, #12
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
    return ( uint32_t ) ( time_in_ms * LR11XX_RTC_FREQ_IN_HZ / 1000 );
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	03db      	lsls	r3, r3, #15
 800899c:	4a04      	ldr	r2, [pc, #16]	; (80089b0 <lr11xx_radio_convert_time_in_ms_to_rtc_step+0x20>)
 800899e:	fba2 2303 	umull	r2, r3, r2, r3
 80089a2:	099b      	lsrs	r3, r3, #6
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	370c      	adds	r7, #12
 80089a8:	46bd      	mov	sp, r7
 80089aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ae:	4770      	bx	lr
 80089b0:	10624dd3 	.word	0x10624dd3

080089b4 <lr11xx_radio_apply_high_acp_workaround>:
    return ( lr11xx_status_t ) lr11xx_hal_write(
        context, command, LR11XX_RADIO_BLUETOOTH_LOW_ENERGY_BEACONNING_COMPATIBILITY_SEND_CMD_LENGTH, buffer, length );
}

lr11xx_status_t lr11xx_radio_apply_high_acp_workaround( const void* context )
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b082      	sub	sp, #8
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
    return lr11xx_regmem_write_regmem32_mask( context, 0x00F30054, 1 << 30, 0 << 30 );
 80089bc:	2300      	movs	r3, #0
 80089be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80089c2:	4904      	ldr	r1, [pc, #16]	; (80089d4 <lr11xx_radio_apply_high_acp_workaround+0x20>)
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f000 f820 	bl	8008a0a <lr11xx_regmem_write_regmem32_mask>
 80089ca:	4603      	mov	r3, r0
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	3708      	adds	r7, #8
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}
 80089d4:	00f30054 	.word	0x00f30054

080089d8 <lr11xx_regmem_write_buffer8>:

    return ( lr11xx_status_t ) lr11xx_hal_read( context, cbuffer, LR11XX_REGMEM_READ_MEM8_CMD_LENGTH, buffer, length );
}

lr11xx_status_t lr11xx_regmem_write_buffer8( const void* context, const uint8_t* buffer, const uint8_t length )
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b088      	sub	sp, #32
 80089dc:	af02      	add	r7, sp, #8
 80089de:	60f8      	str	r0, [r7, #12]
 80089e0:	60b9      	str	r1, [r7, #8]
 80089e2:	4613      	mov	r3, r2
 80089e4:	71fb      	strb	r3, [r7, #7]
    const uint8_t cbuffer[LR11XX_REGMEM_WRITE_BUFFER8_CMD_LENGTH] = {
 80089e6:	f640 1301 	movw	r3, #2305	; 0x901
 80089ea:	82bb      	strh	r3, [r7, #20]
        ( uint8_t ) ( LR11XX_REGMEM_WRITE_BUFFER8_OC >> 8 ),
        ( uint8_t ) ( LR11XX_REGMEM_WRITE_BUFFER8_OC >> 0 ),
    };

    return ( lr11xx_status_t ) lr11xx_hal_write( context, cbuffer, LR11XX_REGMEM_WRITE_BUFFER8_CMD_LENGTH, buffer,
 80089ec:	79fb      	ldrb	r3, [r7, #7]
 80089ee:	b29b      	uxth	r3, r3
 80089f0:	f107 0114 	add.w	r1, r7, #20
 80089f4:	9300      	str	r3, [sp, #0]
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	2202      	movs	r2, #2
 80089fa:	68f8      	ldr	r0, [r7, #12]
 80089fc:	f7ff fb82 	bl	8008104 <lr11xx_hal_write>
 8008a00:	4603      	mov	r3, r0
                                                 length );
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3718      	adds	r7, #24
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}

08008a0a <lr11xx_regmem_write_regmem32_mask>:
    return ( lr11xx_status_t ) lr11xx_hal_write( context, cbuffer, LR11XX_REGMEM_CLEAR_RXBUFFER_CMD_LENGTH, 0, 0 );
}

lr11xx_status_t lr11xx_regmem_write_regmem32_mask( const void* context, const uint32_t address, const uint32_t mask,
                                                   const uint32_t data )
{
 8008a0a:	b580      	push	{r7, lr}
 8008a0c:	b08a      	sub	sp, #40	; 0x28
 8008a0e:	af02      	add	r7, sp, #8
 8008a10:	60f8      	str	r0, [r7, #12]
 8008a12:	60b9      	str	r1, [r7, #8]
 8008a14:	607a      	str	r2, [r7, #4]
 8008a16:	603b      	str	r3, [r7, #0]
    uint8_t cbuffer[LR11XX_REGMEM_WRITE_REGMEM32_MASK_CMD_LENGTH];

    lr11xx_regmem_fill_cbuffer_opcode_address( cbuffer, LR11XX_REGMEM_WRITE_REGMEM32_MASK_OC, address );
 8008a18:	f107 0310 	add.w	r3, r7, #16
 8008a1c:	68ba      	ldr	r2, [r7, #8]
 8008a1e:	f44f 7186 	mov.w	r1, #268	; 0x10c
 8008a22:	4618      	mov	r0, r3
 8008a24:	f000 f82c 	bl	8008a80 <lr11xx_regmem_fill_cbuffer_opcode_address>

    cbuffer[6] = ( uint8_t ) ( mask >> 24 );
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	0e1b      	lsrs	r3, r3, #24
 8008a2c:	b2db      	uxtb	r3, r3
 8008a2e:	75bb      	strb	r3, [r7, #22]
    cbuffer[7] = ( uint8_t ) ( mask >> 16 );
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	0c1b      	lsrs	r3, r3, #16
 8008a34:	b2db      	uxtb	r3, r3
 8008a36:	75fb      	strb	r3, [r7, #23]
    cbuffer[8] = ( uint8_t ) ( mask >> 8 );
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	0a1b      	lsrs	r3, r3, #8
 8008a3c:	b2db      	uxtb	r3, r3
 8008a3e:	763b      	strb	r3, [r7, #24]
    cbuffer[9] = ( uint8_t ) ( mask >> 0 );
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	b2db      	uxtb	r3, r3
 8008a44:	767b      	strb	r3, [r7, #25]

    cbuffer[10] = ( uint8_t ) ( data >> 24 );
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	0e1b      	lsrs	r3, r3, #24
 8008a4a:	b2db      	uxtb	r3, r3
 8008a4c:	76bb      	strb	r3, [r7, #26]
    cbuffer[11] = ( uint8_t ) ( data >> 16 );
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	0c1b      	lsrs	r3, r3, #16
 8008a52:	b2db      	uxtb	r3, r3
 8008a54:	76fb      	strb	r3, [r7, #27]
    cbuffer[12] = ( uint8_t ) ( data >> 8 );
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	0a1b      	lsrs	r3, r3, #8
 8008a5a:	b2db      	uxtb	r3, r3
 8008a5c:	773b      	strb	r3, [r7, #28]
    cbuffer[13] = ( uint8_t ) ( data >> 0 );
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	b2db      	uxtb	r3, r3
 8008a62:	777b      	strb	r3, [r7, #29]

    return ( lr11xx_status_t ) lr11xx_hal_write( context, cbuffer, LR11XX_REGMEM_WRITE_REGMEM32_MASK_CMD_LENGTH, 0, 0 );
 8008a64:	f107 0110 	add.w	r1, r7, #16
 8008a68:	2300      	movs	r3, #0
 8008a6a:	9300      	str	r3, [sp, #0]
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	220e      	movs	r2, #14
 8008a70:	68f8      	ldr	r0, [r7, #12]
 8008a72:	f7ff fb47 	bl	8008104 <lr11xx_hal_write>
 8008a76:	4603      	mov	r3, r0
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3720      	adds	r7, #32
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}

08008a80 <lr11xx_regmem_fill_cbuffer_opcode_address>:
 * -----------------------------------------------------------------------------
 * --- PRIVATE FUNCTIONS DEFINITION --------------------------------------------
 */

void lr11xx_regmem_fill_cbuffer_opcode_address( uint8_t* cbuffer, uint16_t opcode, uint32_t address )
{
 8008a80:	b480      	push	{r7}
 8008a82:	b085      	sub	sp, #20
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	60f8      	str	r0, [r7, #12]
 8008a88:	460b      	mov	r3, r1
 8008a8a:	607a      	str	r2, [r7, #4]
 8008a8c:	817b      	strh	r3, [r7, #10]
    cbuffer[0] = ( uint8_t ) ( opcode >> 8 );
 8008a8e:	897b      	ldrh	r3, [r7, #10]
 8008a90:	0a1b      	lsrs	r3, r3, #8
 8008a92:	b29b      	uxth	r3, r3
 8008a94:	b2da      	uxtb	r2, r3
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	701a      	strb	r2, [r3, #0]
    cbuffer[1] = ( uint8_t ) ( opcode >> 0 );
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	3301      	adds	r3, #1
 8008a9e:	897a      	ldrh	r2, [r7, #10]
 8008aa0:	b2d2      	uxtb	r2, r2
 8008aa2:	701a      	strb	r2, [r3, #0]

    cbuffer[2] = ( uint8_t ) ( address >> 24 );
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	0e1a      	lsrs	r2, r3, #24
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	3302      	adds	r3, #2
 8008aac:	b2d2      	uxtb	r2, r2
 8008aae:	701a      	strb	r2, [r3, #0]
    cbuffer[3] = ( uint8_t ) ( address >> 16 );
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	0c1a      	lsrs	r2, r3, #16
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	3303      	adds	r3, #3
 8008ab8:	b2d2      	uxtb	r2, r2
 8008aba:	701a      	strb	r2, [r3, #0]
    cbuffer[4] = ( uint8_t ) ( address >> 8 );
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	0a1a      	lsrs	r2, r3, #8
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	3304      	adds	r3, #4
 8008ac4:	b2d2      	uxtb	r2, r2
 8008ac6:	701a      	strb	r2, [r3, #0]
    cbuffer[5] = ( uint8_t ) ( address >> 0 );
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	3305      	adds	r3, #5
 8008acc:	687a      	ldr	r2, [r7, #4]
 8008ace:	b2d2      	uxtb	r2, r2
 8008ad0:	701a      	strb	r2, [r3, #0]
}
 8008ad2:	bf00      	nop
 8008ad4:	3714      	adds	r7, #20
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008adc:	4770      	bx	lr

08008ade <lr11xx_system_get_irq_status>:
 * @param [out] irq_status irq_status status variable
 *
 * @returns Operation status
 */
static inline lr11xx_status_t lr11xx_system_get_irq_status( const void* context, lr11xx_system_irq_mask_t* irq_status )
{
 8008ade:	b580      	push	{r7, lr}
 8008ae0:	b082      	sub	sp, #8
 8008ae2:	af00      	add	r7, sp, #0
 8008ae4:	6078      	str	r0, [r7, #4]
 8008ae6:	6039      	str	r1, [r7, #0]
    return lr11xx_system_get_status( context, 0, 0, irq_status );
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	2200      	movs	r2, #0
 8008aec:	2100      	movs	r1, #0
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f000 f811 	bl	8008b16 <lr11xx_system_get_status>
 8008af4:	4603      	mov	r3, r0
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3708      	adds	r7, #8
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}

08008afe <lr11xx_system_reset>:
 * -----------------------------------------------------------------------------
 * --- PUBLIC FUNCTIONS DEFINITION ---------------------------------------------
 */

lr11xx_status_t lr11xx_system_reset( const void* context )
{
 8008afe:	b580      	push	{r7, lr}
 8008b00:	b082      	sub	sp, #8
 8008b02:	af00      	add	r7, sp, #0
 8008b04:	6078      	str	r0, [r7, #4]
    return ( lr11xx_status_t ) lr11xx_hal_reset( context );
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f7ff fae2 	bl	80080d0 <lr11xx_hal_reset>
 8008b0c:	4603      	mov	r3, r0
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3708      	adds	r7, #8
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}

08008b16 <lr11xx_system_get_status>:

lr11xx_status_t lr11xx_system_get_status( const void* context, lr11xx_system_stat1_t* stat1,
                                          lr11xx_system_stat2_t* stat2, lr11xx_system_irq_mask_t* irq_status )
{
 8008b16:	b580      	push	{r7, lr}
 8008b18:	b086      	sub	sp, #24
 8008b1a:	af00      	add	r7, sp, #0
 8008b1c:	60f8      	str	r0, [r7, #12]
 8008b1e:	60b9      	str	r1, [r7, #8]
 8008b20:	607a      	str	r2, [r7, #4]
 8008b22:	603b      	str	r3, [r7, #0]
    uint8_t         data[LR11XX_SYSTEM_GET_STATUS_DIRECT_READ_LENGTH] = { 0 };
 8008b24:	2300      	movs	r3, #0
 8008b26:	613b      	str	r3, [r7, #16]
 8008b28:	2300      	movs	r3, #0
 8008b2a:	82bb      	strh	r3, [r7, #20]

    const lr11xx_status_t status =
        ( lr11xx_status_t ) lr11xx_hal_direct_read( context, data, LR11XX_SYSTEM_GET_STATUS_DIRECT_READ_LENGTH );
 8008b2c:	f107 0310 	add.w	r3, r7, #16
 8008b30:	2206      	movs	r2, #6
 8008b32:	4619      	mov	r1, r3
 8008b34:	68f8      	ldr	r0, [r7, #12]
 8008b36:	f7ff fb59 	bl	80081ec <lr11xx_hal_direct_read>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	75fb      	strb	r3, [r7, #23]

    if( status == LR11XX_STATUS_OK )
 8008b3e:	7dfb      	ldrb	r3, [r7, #23]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d118      	bne.n	8008b76 <lr11xx_system_get_status+0x60>
    {
        lr11xx_system_convert_stat1_byte_to_enum( data[0], stat1 );
 8008b44:	7c3b      	ldrb	r3, [r7, #16]
 8008b46:	68b9      	ldr	r1, [r7, #8]
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f000 f9b6 	bl	8008eba <lr11xx_system_convert_stat1_byte_to_enum>
        lr11xx_system_convert_stat2_byte_to_enum( data[1], stat2 );
 8008b4e:	7c7b      	ldrb	r3, [r7, #17]
 8008b50:	6879      	ldr	r1, [r7, #4]
 8008b52:	4618      	mov	r0, r3
 8008b54:	f000 f9cf 	bl	8008ef6 <lr11xx_system_convert_stat2_byte_to_enum>
        if( irq_status != NULL )
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d00b      	beq.n	8008b76 <lr11xx_system_get_status+0x60>
        {
            *irq_status = ( ( lr11xx_system_irq_mask_t ) data[2] << 24 ) +
 8008b5e:	7cbb      	ldrb	r3, [r7, #18]
 8008b60:	061a      	lsls	r2, r3, #24
                          ( ( lr11xx_system_irq_mask_t ) data[3] << 16 ) +
 8008b62:	7cfb      	ldrb	r3, [r7, #19]
 8008b64:	041b      	lsls	r3, r3, #16
            *irq_status = ( ( lr11xx_system_irq_mask_t ) data[2] << 24 ) +
 8008b66:	441a      	add	r2, r3
                          ( ( lr11xx_system_irq_mask_t ) data[4] << 8 ) + ( ( lr11xx_system_irq_mask_t ) data[5] << 0 );
 8008b68:	7d3b      	ldrb	r3, [r7, #20]
 8008b6a:	021b      	lsls	r3, r3, #8
                          ( ( lr11xx_system_irq_mask_t ) data[3] << 16 ) +
 8008b6c:	4413      	add	r3, r2
                          ( ( lr11xx_system_irq_mask_t ) data[4] << 8 ) + ( ( lr11xx_system_irq_mask_t ) data[5] << 0 );
 8008b6e:	7d7a      	ldrb	r2, [r7, #21]
 8008b70:	441a      	add	r2, r3
            *irq_status = ( ( lr11xx_system_irq_mask_t ) data[2] << 24 ) +
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	601a      	str	r2, [r3, #0]
        }
    }

    return status;
 8008b76:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3718      	adds	r7, #24
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}

08008b80 <lr11xx_system_get_version>:

    return ( lr11xx_status_t ) lr11xx_hal_write( context, cbuffer, sizeof( cbuffer ), 0, 0 );
}

lr11xx_status_t lr11xx_system_get_version( const void* context, lr11xx_system_version_t* version )
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b086      	sub	sp, #24
 8008b84:	af02      	add	r7, sp, #8
 8008b86:	6078      	str	r0, [r7, #4]
 8008b88:	6039      	str	r1, [r7, #0]
    const uint8_t cbuffer[LR11XX_SYSTEM_GET_VERSION_CMD_LENGTH] = {
 8008b8a:	f240 1301 	movw	r3, #257	; 0x101
 8008b8e:	81bb      	strh	r3, [r7, #12]
        ( uint8_t ) ( LR11XX_SYSTEM_GET_VERSION_OC >> 8 ),
        ( uint8_t ) ( LR11XX_SYSTEM_GET_VERSION_OC >> 0 ),
    };
    uint8_t rbuffer[LR11XX_SYSTEM_VERSION_LENGTH] = { 0x00 };
 8008b90:	2300      	movs	r3, #0
 8008b92:	60bb      	str	r3, [r7, #8]

    const lr11xx_status_t status = ( lr11xx_status_t ) lr11xx_hal_read(
 8008b94:	f107 0308 	add.w	r3, r7, #8
 8008b98:	f107 010c 	add.w	r1, r7, #12
 8008b9c:	2204      	movs	r2, #4
 8008b9e:	9200      	str	r2, [sp, #0]
 8008ba0:	2202      	movs	r2, #2
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f7ff fada 	bl	800815c <lr11xx_hal_read>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	73fb      	strb	r3, [r7, #15]
        context, cbuffer, LR11XX_SYSTEM_GET_VERSION_CMD_LENGTH, rbuffer, LR11XX_SYSTEM_VERSION_LENGTH );

    if( status == LR11XX_STATUS_OK )
 8008bac:	7bfb      	ldrb	r3, [r7, #15]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d10f      	bne.n	8008bd2 <lr11xx_system_get_version+0x52>
    {
        version->hw   = rbuffer[0];
 8008bb2:	7a3a      	ldrb	r2, [r7, #8]
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	701a      	strb	r2, [r3, #0]
        version->type = ( lr11xx_system_version_type_t ) rbuffer[1];
 8008bb8:	7a7a      	ldrb	r2, [r7, #9]
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	705a      	strb	r2, [r3, #1]
        version->fw   = ( ( uint16_t ) rbuffer[2] << 8 ) + ( uint16_t ) rbuffer[3];
 8008bbe:	7abb      	ldrb	r3, [r7, #10]
 8008bc0:	b29b      	uxth	r3, r3
 8008bc2:	021b      	lsls	r3, r3, #8
 8008bc4:	b29a      	uxth	r2, r3
 8008bc6:	7afb      	ldrb	r3, [r7, #11]
 8008bc8:	b29b      	uxth	r3, r3
 8008bca:	4413      	add	r3, r2
 8008bcc:	b29a      	uxth	r2, r3
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	805a      	strh	r2, [r3, #2]
    }

    return status;
 8008bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	3710      	adds	r7, #16
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}

08008bdc <lr11xx_system_get_errors>:

lr11xx_status_t lr11xx_system_get_errors( const void* context, lr11xx_system_errors_t* errors )
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b086      	sub	sp, #24
 8008be0:	af02      	add	r7, sp, #8
 8008be2:	6078      	str	r0, [r7, #4]
 8008be4:	6039      	str	r1, [r7, #0]
    const uint8_t cbuffer[LR11XX_SYSTEM_GET_ERRORS_CMD_LENGTH] = {
 8008be6:	f640 5301 	movw	r3, #3329	; 0xd01
 8008bea:	81bb      	strh	r3, [r7, #12]
        ( uint8_t ) ( LR11XX_SYSTEM_GET_ERRORS_OC >> 8 ),
        ( uint8_t ) ( LR11XX_SYSTEM_GET_ERRORS_OC >> 0 ),
    };
    uint8_t rbuffer[sizeof( errors )] = { 0x00 };
 8008bec:	2300      	movs	r3, #0
 8008bee:	60bb      	str	r3, [r7, #8]

    const lr11xx_status_t status = ( lr11xx_status_t ) lr11xx_hal_read(
 8008bf0:	f107 0308 	add.w	r3, r7, #8
 8008bf4:	f107 010c 	add.w	r1, r7, #12
 8008bf8:	2202      	movs	r2, #2
 8008bfa:	9200      	str	r2, [sp, #0]
 8008bfc:	2202      	movs	r2, #2
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f7ff faac 	bl	800815c <lr11xx_hal_read>
 8008c04:	4603      	mov	r3, r0
 8008c06:	73fb      	strb	r3, [r7, #15]
        context, cbuffer, LR11XX_SYSTEM_GET_ERRORS_CMD_LENGTH, rbuffer, sizeof( *errors ) );

    if( status == LR11XX_STATUS_OK )
 8008c08:	7bfb      	ldrb	r3, [r7, #15]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d109      	bne.n	8008c22 <lr11xx_system_get_errors+0x46>
    {
        *errors = ( ( uint16_t ) rbuffer[0] << 8 ) + ( uint16_t ) rbuffer[1];
 8008c0e:	7a3b      	ldrb	r3, [r7, #8]
 8008c10:	b29b      	uxth	r3, r3
 8008c12:	021b      	lsls	r3, r3, #8
 8008c14:	b29a      	uxth	r2, r3
 8008c16:	7a7b      	ldrb	r3, [r7, #9]
 8008c18:	b29b      	uxth	r3, r3
 8008c1a:	4413      	add	r3, r2
 8008c1c:	b29a      	uxth	r2, r3
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	801a      	strh	r2, [r3, #0]
    }

    return status;
 8008c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	3710      	adds	r7, #16
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}

08008c2c <lr11xx_system_clear_errors>:

lr11xx_status_t lr11xx_system_clear_errors( const void* context )
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b086      	sub	sp, #24
 8008c30:	af02      	add	r7, sp, #8
 8008c32:	6078      	str	r0, [r7, #4]
    const uint8_t cbuffer[LR11XX_SYSTEM_CLEAR_ERRORS_CMD_LENGTH] = {
 8008c34:	f640 6301 	movw	r3, #3585	; 0xe01
 8008c38:	81bb      	strh	r3, [r7, #12]
        ( uint8_t ) ( LR11XX_SYSTEM_CLEAR_ERRORS_OC >> 8 ),
        ( uint8_t ) ( LR11XX_SYSTEM_CLEAR_ERRORS_OC >> 0 ),
    };

    return ( lr11xx_status_t ) lr11xx_hal_write( context, cbuffer, LR11XX_SYSTEM_CLEAR_ERRORS_CMD_LENGTH, 0, 0 );
 8008c3a:	f107 010c 	add.w	r1, r7, #12
 8008c3e:	2300      	movs	r3, #0
 8008c40:	9300      	str	r3, [sp, #0]
 8008c42:	2300      	movs	r3, #0
 8008c44:	2202      	movs	r2, #2
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f7ff fa5c 	bl	8008104 <lr11xx_hal_write>
 8008c4c:	4603      	mov	r3, r0
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3710      	adds	r7, #16
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}

08008c56 <lr11xx_system_calibrate>:

lr11xx_status_t lr11xx_system_calibrate( const void* context, const uint8_t calib_param )
{
 8008c56:	b580      	push	{r7, lr}
 8008c58:	b086      	sub	sp, #24
 8008c5a:	af02      	add	r7, sp, #8
 8008c5c:	6078      	str	r0, [r7, #4]
 8008c5e:	460b      	mov	r3, r1
 8008c60:	70fb      	strb	r3, [r7, #3]
    const uint8_t cbuffer[LR11XX_SYSTEM_CALIBRATE_CMD_LENGTH] = {
 8008c62:	2301      	movs	r3, #1
 8008c64:	733b      	strb	r3, [r7, #12]
 8008c66:	230f      	movs	r3, #15
 8008c68:	737b      	strb	r3, [r7, #13]
 8008c6a:	78fb      	ldrb	r3, [r7, #3]
 8008c6c:	73bb      	strb	r3, [r7, #14]
        ( uint8_t ) ( LR11XX_SYSTEM_CALIBRATE_OC >> 8 ),
        ( uint8_t ) ( LR11XX_SYSTEM_CALIBRATE_OC >> 0 ),
        calib_param,
    };

    return ( lr11xx_status_t ) lr11xx_hal_write( context, cbuffer, LR11XX_SYSTEM_CALIBRATE_CMD_LENGTH, 0, 0 );
 8008c6e:	f107 010c 	add.w	r1, r7, #12
 8008c72:	2300      	movs	r3, #0
 8008c74:	9300      	str	r3, [sp, #0]
 8008c76:	2300      	movs	r3, #0
 8008c78:	2203      	movs	r2, #3
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f7ff fa42 	bl	8008104 <lr11xx_hal_write>
 8008c80:	4603      	mov	r3, r0
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3710      	adds	r7, #16
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}

08008c8a <lr11xx_system_set_reg_mode>:

lr11xx_status_t lr11xx_system_set_reg_mode( const void* context, const lr11xx_system_reg_mode_t reg_mode )
{
 8008c8a:	b580      	push	{r7, lr}
 8008c8c:	b086      	sub	sp, #24
 8008c8e:	af02      	add	r7, sp, #8
 8008c90:	6078      	str	r0, [r7, #4]
 8008c92:	460b      	mov	r3, r1
 8008c94:	70fb      	strb	r3, [r7, #3]
    const uint8_t cbuffer[LR11XX_SYSTEM_SET_REGMODE_CMD_LENGTH] = {
 8008c96:	2301      	movs	r3, #1
 8008c98:	733b      	strb	r3, [r7, #12]
 8008c9a:	2310      	movs	r3, #16
 8008c9c:	737b      	strb	r3, [r7, #13]
 8008c9e:	78fb      	ldrb	r3, [r7, #3]
 8008ca0:	73bb      	strb	r3, [r7, #14]
        ( uint8_t ) ( LR11XX_SYSTEM_SET_REGMODE_OC >> 8 ),
        ( uint8_t ) ( LR11XX_SYSTEM_SET_REGMODE_OC >> 0 ),
        ( uint8_t ) reg_mode,
    };

    return ( lr11xx_status_t ) lr11xx_hal_write( context, cbuffer, LR11XX_SYSTEM_SET_REGMODE_CMD_LENGTH, 0, 0 );
 8008ca2:	f107 010c 	add.w	r1, r7, #12
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	9300      	str	r3, [sp, #0]
 8008caa:	2300      	movs	r3, #0
 8008cac:	2203      	movs	r2, #3
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f7ff fa28 	bl	8008104 <lr11xx_hal_write>
 8008cb4:	4603      	mov	r3, r0
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3710      	adds	r7, #16
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}

08008cbe <lr11xx_system_set_dio_as_rf_switch>:
    return lr11xx_system_calibrate_image( context, freq1, freq2 );
}

lr11xx_status_t lr11xx_system_set_dio_as_rf_switch( const void*                         context,
                                                    const lr11xx_system_rfswitch_cfg_t* rf_switch_cfg )
{
 8008cbe:	b580      	push	{r7, lr}
 8008cc0:	b088      	sub	sp, #32
 8008cc2:	af02      	add	r7, sp, #8
 8008cc4:	6078      	str	r0, [r7, #4]
 8008cc6:	6039      	str	r1, [r7, #0]
    const uint8_t cbuffer[LR11XX_SYSTEM_SET_DIO_AS_RF_SWITCH_CMD_LENGTH] = {
 8008cc8:	2301      	movs	r3, #1
 8008cca:	733b      	strb	r3, [r7, #12]
 8008ccc:	2312      	movs	r3, #18
 8008cce:	737b      	strb	r3, [r7, #13]
        ( uint8_t ) ( LR11XX_SYSTEM_SET_DIO_AS_RF_SWITCH_OC >> 8 ),
        ( uint8_t ) ( LR11XX_SYSTEM_SET_DIO_AS_RF_SWITCH_OC >> 0 ),
        rf_switch_cfg->enable,
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	781b      	ldrb	r3, [r3, #0]
    const uint8_t cbuffer[LR11XX_SYSTEM_SET_DIO_AS_RF_SWITCH_CMD_LENGTH] = {
 8008cd4:	73bb      	strb	r3, [r7, #14]
        rf_switch_cfg->standby,
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	785b      	ldrb	r3, [r3, #1]
    const uint8_t cbuffer[LR11XX_SYSTEM_SET_DIO_AS_RF_SWITCH_CMD_LENGTH] = {
 8008cda:	73fb      	strb	r3, [r7, #15]
        rf_switch_cfg->rx,
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	789b      	ldrb	r3, [r3, #2]
    const uint8_t cbuffer[LR11XX_SYSTEM_SET_DIO_AS_RF_SWITCH_CMD_LENGTH] = {
 8008ce0:	743b      	strb	r3, [r7, #16]
        rf_switch_cfg->tx,
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	78db      	ldrb	r3, [r3, #3]
    const uint8_t cbuffer[LR11XX_SYSTEM_SET_DIO_AS_RF_SWITCH_CMD_LENGTH] = {
 8008ce6:	747b      	strb	r3, [r7, #17]
        rf_switch_cfg->tx_hp,
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	791b      	ldrb	r3, [r3, #4]
    const uint8_t cbuffer[LR11XX_SYSTEM_SET_DIO_AS_RF_SWITCH_CMD_LENGTH] = {
 8008cec:	74bb      	strb	r3, [r7, #18]
        rf_switch_cfg->tx_hf,
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	795b      	ldrb	r3, [r3, #5]
    const uint8_t cbuffer[LR11XX_SYSTEM_SET_DIO_AS_RF_SWITCH_CMD_LENGTH] = {
 8008cf2:	74fb      	strb	r3, [r7, #19]
        rf_switch_cfg->gnss,
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	799b      	ldrb	r3, [r3, #6]
    const uint8_t cbuffer[LR11XX_SYSTEM_SET_DIO_AS_RF_SWITCH_CMD_LENGTH] = {
 8008cf8:	753b      	strb	r3, [r7, #20]
        rf_switch_cfg->wifi,
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	79db      	ldrb	r3, [r3, #7]
    const uint8_t cbuffer[LR11XX_SYSTEM_SET_DIO_AS_RF_SWITCH_CMD_LENGTH] = {
 8008cfe:	757b      	strb	r3, [r7, #21]
    };

    return ( lr11xx_status_t ) lr11xx_hal_write( context, cbuffer, LR11XX_SYSTEM_SET_DIO_AS_RF_SWITCH_CMD_LENGTH, 0,
 8008d00:	f107 010c 	add.w	r1, r7, #12
 8008d04:	2300      	movs	r3, #0
 8008d06:	9300      	str	r3, [sp, #0]
 8008d08:	2300      	movs	r3, #0
 8008d0a:	220a      	movs	r2, #10
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f7ff f9f9 	bl	8008104 <lr11xx_hal_write>
 8008d12:	4603      	mov	r3, r0
                                                 0 );
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3718      	adds	r7, #24
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}

08008d1c <lr11xx_system_set_dio_irq_params>:

lr11xx_status_t lr11xx_system_set_dio_irq_params( const void*                    context,
                                                  const lr11xx_system_irq_mask_t irqs_to_enable_dio1,
                                                  const lr11xx_system_irq_mask_t irqs_to_enable_dio2 )
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b08a      	sub	sp, #40	; 0x28
 8008d20:	af02      	add	r7, sp, #8
 8008d22:	60f8      	str	r0, [r7, #12]
 8008d24:	60b9      	str	r1, [r7, #8]
 8008d26:	607a      	str	r2, [r7, #4]
    const uint8_t cbuffer[LR11XX_SYSTEM_SET_DIO_IRQ_PARAMS_CMD_LENGTH] = {
 8008d28:	2301      	movs	r3, #1
 8008d2a:	753b      	strb	r3, [r7, #20]
 8008d2c:	2313      	movs	r3, #19
 8008d2e:	757b      	strb	r3, [r7, #21]
        ( uint8_t ) ( LR11XX_SYSTEM_SET_DIOIRQPARAMS_OC >> 8 ),
        ( uint8_t ) ( LR11XX_SYSTEM_SET_DIOIRQPARAMS_OC >> 0 ),
        ( uint8_t ) ( irqs_to_enable_dio1 >> 24 ),
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	0e1b      	lsrs	r3, r3, #24
 8008d34:	b2db      	uxtb	r3, r3
    const uint8_t cbuffer[LR11XX_SYSTEM_SET_DIO_IRQ_PARAMS_CMD_LENGTH] = {
 8008d36:	75bb      	strb	r3, [r7, #22]
        ( uint8_t ) ( irqs_to_enable_dio1 >> 16 ),
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	0c1b      	lsrs	r3, r3, #16
 8008d3c:	b2db      	uxtb	r3, r3
    const uint8_t cbuffer[LR11XX_SYSTEM_SET_DIO_IRQ_PARAMS_CMD_LENGTH] = {
 8008d3e:	75fb      	strb	r3, [r7, #23]
        ( uint8_t ) ( irqs_to_enable_dio1 >> 8 ),
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	0a1b      	lsrs	r3, r3, #8
 8008d44:	b2db      	uxtb	r3, r3
    const uint8_t cbuffer[LR11XX_SYSTEM_SET_DIO_IRQ_PARAMS_CMD_LENGTH] = {
 8008d46:	763b      	strb	r3, [r7, #24]
        ( uint8_t ) ( irqs_to_enable_dio1 >> 0 ),
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	b2db      	uxtb	r3, r3
    const uint8_t cbuffer[LR11XX_SYSTEM_SET_DIO_IRQ_PARAMS_CMD_LENGTH] = {
 8008d4c:	767b      	strb	r3, [r7, #25]
        ( uint8_t ) ( irqs_to_enable_dio2 >> 24 ),
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	0e1b      	lsrs	r3, r3, #24
 8008d52:	b2db      	uxtb	r3, r3
    const uint8_t cbuffer[LR11XX_SYSTEM_SET_DIO_IRQ_PARAMS_CMD_LENGTH] = {
 8008d54:	76bb      	strb	r3, [r7, #26]
        ( uint8_t ) ( irqs_to_enable_dio2 >> 16 ),
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	0c1b      	lsrs	r3, r3, #16
 8008d5a:	b2db      	uxtb	r3, r3
    const uint8_t cbuffer[LR11XX_SYSTEM_SET_DIO_IRQ_PARAMS_CMD_LENGTH] = {
 8008d5c:	76fb      	strb	r3, [r7, #27]
        ( uint8_t ) ( irqs_to_enable_dio2 >> 8 ),
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	0a1b      	lsrs	r3, r3, #8
 8008d62:	b2db      	uxtb	r3, r3
    const uint8_t cbuffer[LR11XX_SYSTEM_SET_DIO_IRQ_PARAMS_CMD_LENGTH] = {
 8008d64:	773b      	strb	r3, [r7, #28]
        ( uint8_t ) ( irqs_to_enable_dio2 >> 0 ),
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	b2db      	uxtb	r3, r3
    const uint8_t cbuffer[LR11XX_SYSTEM_SET_DIO_IRQ_PARAMS_CMD_LENGTH] = {
 8008d6a:	777b      	strb	r3, [r7, #29]
    };

    return ( lr11xx_status_t ) lr11xx_hal_write( context, cbuffer, LR11XX_SYSTEM_SET_DIO_IRQ_PARAMS_CMD_LENGTH, 0, 0 );
 8008d6c:	f107 0114 	add.w	r1, r7, #20
 8008d70:	2300      	movs	r3, #0
 8008d72:	9300      	str	r3, [sp, #0]
 8008d74:	2300      	movs	r3, #0
 8008d76:	220a      	movs	r2, #10
 8008d78:	68f8      	ldr	r0, [r7, #12]
 8008d7a:	f7ff f9c3 	bl	8008104 <lr11xx_hal_write>
 8008d7e:	4603      	mov	r3, r0
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	3720      	adds	r7, #32
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}

08008d88 <lr11xx_system_clear_irq_status>:

lr11xx_status_t lr11xx_system_clear_irq_status( const void* context, const lr11xx_system_irq_mask_t irqs_to_clear )
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b086      	sub	sp, #24
 8008d8c:	af02      	add	r7, sp, #8
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	6039      	str	r1, [r7, #0]
    const uint8_t cbuffer[LR11XX_SYSTEM_CLEAR_IRQ_CMD_LENGTH] = {
 8008d92:	2301      	movs	r3, #1
 8008d94:	723b      	strb	r3, [r7, #8]
 8008d96:	2314      	movs	r3, #20
 8008d98:	727b      	strb	r3, [r7, #9]
        ( uint8_t ) ( LR11XX_SYSTEM_CLEAR_IRQ_OC >> 8 ),
        ( uint8_t ) ( LR11XX_SYSTEM_CLEAR_IRQ_OC >> 0 ),
        ( uint8_t ) ( irqs_to_clear >> 24 ),
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	0e1b      	lsrs	r3, r3, #24
 8008d9e:	b2db      	uxtb	r3, r3
    const uint8_t cbuffer[LR11XX_SYSTEM_CLEAR_IRQ_CMD_LENGTH] = {
 8008da0:	72bb      	strb	r3, [r7, #10]
        ( uint8_t ) ( irqs_to_clear >> 16 ),
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	0c1b      	lsrs	r3, r3, #16
 8008da6:	b2db      	uxtb	r3, r3
    const uint8_t cbuffer[LR11XX_SYSTEM_CLEAR_IRQ_CMD_LENGTH] = {
 8008da8:	72fb      	strb	r3, [r7, #11]
        ( uint8_t ) ( irqs_to_clear >> 8 ),
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	0a1b      	lsrs	r3, r3, #8
 8008dae:	b2db      	uxtb	r3, r3
    const uint8_t cbuffer[LR11XX_SYSTEM_CLEAR_IRQ_CMD_LENGTH] = {
 8008db0:	733b      	strb	r3, [r7, #12]
        ( uint8_t ) ( irqs_to_clear >> 0 ),
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	b2db      	uxtb	r3, r3
    const uint8_t cbuffer[LR11XX_SYSTEM_CLEAR_IRQ_CMD_LENGTH] = {
 8008db6:	737b      	strb	r3, [r7, #13]
    };

    return ( lr11xx_status_t ) lr11xx_hal_write( context, cbuffer, LR11XX_SYSTEM_CLEAR_IRQ_CMD_LENGTH, 0, 0 );
 8008db8:	f107 0108 	add.w	r1, r7, #8
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	9300      	str	r3, [sp, #0]
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	2206      	movs	r2, #6
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f7ff f99d 	bl	8008104 <lr11xx_hal_write>
 8008dca:	4603      	mov	r3, r0
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3710      	adds	r7, #16
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <lr11xx_system_get_and_clear_irq_status>:

lr11xx_status_t lr11xx_system_get_and_clear_irq_status( const void* context, lr11xx_system_irq_mask_t* irq )
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b084      	sub	sp, #16
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
 8008ddc:	6039      	str	r1, [r7, #0]
    lr11xx_system_irq_mask_t lr11xx_irq_mask = LR11XX_SYSTEM_IRQ_NONE;
 8008dde:	2300      	movs	r3, #0
 8008de0:	60bb      	str	r3, [r7, #8]

    lr11xx_status_t status = lr11xx_system_get_irq_status( context, &lr11xx_irq_mask );
 8008de2:	f107 0308 	add.w	r3, r7, #8
 8008de6:	4619      	mov	r1, r3
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f7ff fe78 	bl	8008ade <lr11xx_system_get_irq_status>
 8008dee:	4603      	mov	r3, r0
 8008df0:	73fb      	strb	r3, [r7, #15]

    if( ( status == LR11XX_STATUS_OK ) && ( lr11xx_irq_mask != 0 ) )
 8008df2:	7bfb      	ldrb	r3, [r7, #15]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d109      	bne.n	8008e0c <lr11xx_system_get_and_clear_irq_status+0x38>
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d006      	beq.n	8008e0c <lr11xx_system_get_and_clear_irq_status+0x38>
    {
        status = lr11xx_system_clear_irq_status( context, lr11xx_irq_mask );
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	4619      	mov	r1, r3
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f7ff ffc0 	bl	8008d88 <lr11xx_system_clear_irq_status>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	73fb      	strb	r3, [r7, #15]
    }
    if( ( status == LR11XX_STATUS_OK ) && ( irq != NULL ) )
 8008e0c:	7bfb      	ldrb	r3, [r7, #15]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d105      	bne.n	8008e1e <lr11xx_system_get_and_clear_irq_status+0x4a>
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d002      	beq.n	8008e1e <lr11xx_system_get_and_clear_irq_status+0x4a>
    {
        *irq = lr11xx_irq_mask;
 8008e18:	68ba      	ldr	r2, [r7, #8]
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	601a      	str	r2, [r3, #0]
    }

    return status;
 8008e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3710      	adds	r7, #16
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}

08008e28 <lr11xx_system_cfg_lfclk>:

lr11xx_status_t lr11xx_system_cfg_lfclk( const void* context, const lr11xx_system_lfclk_cfg_t lfclock_cfg,
                                         const bool wait_for_32k_ready )
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b086      	sub	sp, #24
 8008e2c:	af02      	add	r7, sp, #8
 8008e2e:	6078      	str	r0, [r7, #4]
 8008e30:	460b      	mov	r3, r1
 8008e32:	70fb      	strb	r3, [r7, #3]
 8008e34:	4613      	mov	r3, r2
 8008e36:	70bb      	strb	r3, [r7, #2]
    const uint8_t cbuffer[LR11XX_SYSTEM_CFG_LFCLK_CMD_LENGTH] = {
 8008e38:	2301      	movs	r3, #1
 8008e3a:	733b      	strb	r3, [r7, #12]
 8008e3c:	2316      	movs	r3, #22
 8008e3e:	737b      	strb	r3, [r7, #13]
        ( uint8_t ) ( LR11XX_SYSTEM_CFG_LFCLK_OC >> 8 ),
        ( uint8_t ) ( LR11XX_SYSTEM_CFG_LFCLK_OC >> 0 ),
        ( uint8_t ) ( lfclock_cfg | ( wait_for_32k_ready << 2 ) ),
 8008e40:	78bb      	ldrb	r3, [r7, #2]
 8008e42:	009b      	lsls	r3, r3, #2
 8008e44:	b25a      	sxtb	r2, r3
 8008e46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008e4a:	4313      	orrs	r3, r2
 8008e4c:	b25b      	sxtb	r3, r3
 8008e4e:	b2db      	uxtb	r3, r3
    const uint8_t cbuffer[LR11XX_SYSTEM_CFG_LFCLK_CMD_LENGTH] = {
 8008e50:	73bb      	strb	r3, [r7, #14]
    };

    return ( lr11xx_status_t ) lr11xx_hal_write( context, cbuffer, LR11XX_SYSTEM_CFG_LFCLK_CMD_LENGTH, 0, 0 );
 8008e52:	f107 010c 	add.w	r1, r7, #12
 8008e56:	2300      	movs	r3, #0
 8008e58:	9300      	str	r3, [sp, #0]
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	2203      	movs	r2, #3
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f7ff f950 	bl	8008104 <lr11xx_hal_write>
 8008e64:	4603      	mov	r3, r0
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3710      	adds	r7, #16
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}

08008e6e <lr11xx_system_set_tcxo_mode>:

lr11xx_status_t lr11xx_system_set_tcxo_mode( const void* context, const lr11xx_system_tcxo_supply_voltage_t tune,
                                             const uint32_t timeout )
{
 8008e6e:	b580      	push	{r7, lr}
 8008e70:	b088      	sub	sp, #32
 8008e72:	af02      	add	r7, sp, #8
 8008e74:	60f8      	str	r0, [r7, #12]
 8008e76:	460b      	mov	r3, r1
 8008e78:	607a      	str	r2, [r7, #4]
 8008e7a:	72fb      	strb	r3, [r7, #11]
    const uint8_t cbuffer[LR11XX_SYSTEM_SET_TCXO_MODE_CMD_LENGTH] = {
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	743b      	strb	r3, [r7, #16]
 8008e80:	2317      	movs	r3, #23
 8008e82:	747b      	strb	r3, [r7, #17]
 8008e84:	7afb      	ldrb	r3, [r7, #11]
 8008e86:	74bb      	strb	r3, [r7, #18]
        ( uint8_t ) ( LR11XX_SYSTEM_SET_TCXO_MODE_OC >> 8 ),
        ( uint8_t ) ( LR11XX_SYSTEM_SET_TCXO_MODE_OC >> 0 ),
        ( uint8_t ) tune,
        ( uint8_t ) ( timeout >> 16 ),
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	0c1b      	lsrs	r3, r3, #16
 8008e8c:	b2db      	uxtb	r3, r3
    const uint8_t cbuffer[LR11XX_SYSTEM_SET_TCXO_MODE_CMD_LENGTH] = {
 8008e8e:	74fb      	strb	r3, [r7, #19]
        ( uint8_t ) ( timeout >> 8 ),
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	0a1b      	lsrs	r3, r3, #8
 8008e94:	b2db      	uxtb	r3, r3
    const uint8_t cbuffer[LR11XX_SYSTEM_SET_TCXO_MODE_CMD_LENGTH] = {
 8008e96:	753b      	strb	r3, [r7, #20]
        ( uint8_t ) ( timeout >> 0 ),
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	b2db      	uxtb	r3, r3
    const uint8_t cbuffer[LR11XX_SYSTEM_SET_TCXO_MODE_CMD_LENGTH] = {
 8008e9c:	757b      	strb	r3, [r7, #21]
    };

    return ( lr11xx_status_t ) lr11xx_hal_write( context, cbuffer, LR11XX_SYSTEM_SET_TCXO_MODE_CMD_LENGTH, 0, 0 );
 8008e9e:	f107 0110 	add.w	r1, r7, #16
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	9300      	str	r3, [sp, #0]
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	2206      	movs	r2, #6
 8008eaa:	68f8      	ldr	r0, [r7, #12]
 8008eac:	f7ff f92a 	bl	8008104 <lr11xx_hal_write>
 8008eb0:	4603      	mov	r3, r0
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	3718      	adds	r7, #24
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}

08008eba <lr11xx_system_convert_stat1_byte_to_enum>:
 * -----------------------------------------------------------------------------
 * --- PRIVATE FUNCTIONS DEFINITION --------------------------------------------
 */

static void lr11xx_system_convert_stat1_byte_to_enum( uint8_t stat1_byte, lr11xx_system_stat1_t* stat1 )
{
 8008eba:	b480      	push	{r7}
 8008ebc:	b083      	sub	sp, #12
 8008ebe:	af00      	add	r7, sp, #0
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	6039      	str	r1, [r7, #0]
 8008ec4:	71fb      	strb	r3, [r7, #7]
    if( stat1 != NULL )
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d00e      	beq.n	8008eea <lr11xx_system_convert_stat1_byte_to_enum+0x30>
    {
        stat1->is_interrupt_active = ( ( stat1_byte & 0x01 ) != 0 ) ? true : false;
 8008ecc:	79fb      	ldrb	r3, [r7, #7]
 8008ece:	f003 0301 	and.w	r3, r3, #1
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	bf14      	ite	ne
 8008ed6:	2301      	movne	r3, #1
 8008ed8:	2300      	moveq	r3, #0
 8008eda:	b2da      	uxtb	r2, r3
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	705a      	strb	r2, [r3, #1]
        stat1->command_status      = ( lr11xx_system_command_status_t ) ( stat1_byte >> 1 );
 8008ee0:	79fb      	ldrb	r3, [r7, #7]
 8008ee2:	085b      	lsrs	r3, r3, #1
 8008ee4:	b2da      	uxtb	r2, r3
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	701a      	strb	r2, [r3, #0]
    }
}
 8008eea:	bf00      	nop
 8008eec:	370c      	adds	r7, #12
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef4:	4770      	bx	lr

08008ef6 <lr11xx_system_convert_stat2_byte_to_enum>:

static void lr11xx_system_convert_stat2_byte_to_enum( uint8_t stat2_byte, lr11xx_system_stat2_t* stat2 )
{
 8008ef6:	b480      	push	{r7}
 8008ef8:	b083      	sub	sp, #12
 8008efa:	af00      	add	r7, sp, #0
 8008efc:	4603      	mov	r3, r0
 8008efe:	6039      	str	r1, [r7, #0]
 8008f00:	71fb      	strb	r3, [r7, #7]
    if( stat2 != NULL )
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d015      	beq.n	8008f34 <lr11xx_system_convert_stat2_byte_to_enum+0x3e>
    {
        stat2->is_running_from_flash = ( ( stat2_byte & 0x01 ) != 0 ) ? true : false;
 8008f08:	79fb      	ldrb	r3, [r7, #7]
 8008f0a:	f003 0301 	and.w	r3, r3, #1
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	bf14      	ite	ne
 8008f12:	2301      	movne	r3, #1
 8008f14:	2300      	moveq	r3, #0
 8008f16:	b2da      	uxtb	r2, r3
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	709a      	strb	r2, [r3, #2]
        stat2->chip_mode             = ( lr11xx_system_chip_modes_t ) ( ( stat2_byte & 0x0F ) >> 1 );
 8008f1c:	79fb      	ldrb	r3, [r7, #7]
 8008f1e:	105b      	asrs	r3, r3, #1
 8008f20:	f003 0307 	and.w	r3, r3, #7
 8008f24:	b2da      	uxtb	r2, r3
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	705a      	strb	r2, [r3, #1]
        stat2->reset_status          = ( lr11xx_system_reset_status_t ) ( ( stat2_byte & 0xF0 ) >> 4 );
 8008f2a:	79fb      	ldrb	r3, [r7, #7]
 8008f2c:	091b      	lsrs	r3, r3, #4
 8008f2e:	b2da      	uxtb	r2, r3
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	701a      	strb	r2, [r3, #0]
    }
}
 8008f34:	bf00      	nop
 8008f36:	370c      	adds	r7, #12
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr

08008f40 <srand>:
 8008f40:	b538      	push	{r3, r4, r5, lr}
 8008f42:	4b10      	ldr	r3, [pc, #64]	; (8008f84 <srand+0x44>)
 8008f44:	681d      	ldr	r5, [r3, #0]
 8008f46:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8008f48:	4604      	mov	r4, r0
 8008f4a:	b9b3      	cbnz	r3, 8008f7a <srand+0x3a>
 8008f4c:	2018      	movs	r0, #24
 8008f4e:	f001 fd25 	bl	800a99c <malloc>
 8008f52:	4602      	mov	r2, r0
 8008f54:	6328      	str	r0, [r5, #48]	; 0x30
 8008f56:	b920      	cbnz	r0, 8008f62 <srand+0x22>
 8008f58:	4b0b      	ldr	r3, [pc, #44]	; (8008f88 <srand+0x48>)
 8008f5a:	480c      	ldr	r0, [pc, #48]	; (8008f8c <srand+0x4c>)
 8008f5c:	2146      	movs	r1, #70	; 0x46
 8008f5e:	f000 fe37 	bl	8009bd0 <__assert_func>
 8008f62:	490b      	ldr	r1, [pc, #44]	; (8008f90 <srand+0x50>)
 8008f64:	4b0b      	ldr	r3, [pc, #44]	; (8008f94 <srand+0x54>)
 8008f66:	e9c0 1300 	strd	r1, r3, [r0]
 8008f6a:	4b0b      	ldr	r3, [pc, #44]	; (8008f98 <srand+0x58>)
 8008f6c:	6083      	str	r3, [r0, #8]
 8008f6e:	230b      	movs	r3, #11
 8008f70:	8183      	strh	r3, [r0, #12]
 8008f72:	2100      	movs	r1, #0
 8008f74:	2001      	movs	r0, #1
 8008f76:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8008f7a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	611c      	str	r4, [r3, #16]
 8008f80:	615a      	str	r2, [r3, #20]
 8008f82:	bd38      	pop	{r3, r4, r5, pc}
 8008f84:	20000088 	.word	0x20000088
 8008f88:	0800db0a 	.word	0x0800db0a
 8008f8c:	0800db21 	.word	0x0800db21
 8008f90:	abcd330e 	.word	0xabcd330e
 8008f94:	e66d1234 	.word	0xe66d1234
 8008f98:	0005deec 	.word	0x0005deec

08008f9c <__cvt>:
 8008f9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008fa0:	ec55 4b10 	vmov	r4, r5, d0
 8008fa4:	2d00      	cmp	r5, #0
 8008fa6:	460e      	mov	r6, r1
 8008fa8:	4619      	mov	r1, r3
 8008faa:	462b      	mov	r3, r5
 8008fac:	bfbb      	ittet	lt
 8008fae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008fb2:	461d      	movlt	r5, r3
 8008fb4:	2300      	movge	r3, #0
 8008fb6:	232d      	movlt	r3, #45	; 0x2d
 8008fb8:	700b      	strb	r3, [r1, #0]
 8008fba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008fbc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008fc0:	4691      	mov	r9, r2
 8008fc2:	f023 0820 	bic.w	r8, r3, #32
 8008fc6:	bfbc      	itt	lt
 8008fc8:	4622      	movlt	r2, r4
 8008fca:	4614      	movlt	r4, r2
 8008fcc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008fd0:	d005      	beq.n	8008fde <__cvt+0x42>
 8008fd2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008fd6:	d100      	bne.n	8008fda <__cvt+0x3e>
 8008fd8:	3601      	adds	r6, #1
 8008fda:	2102      	movs	r1, #2
 8008fdc:	e000      	b.n	8008fe0 <__cvt+0x44>
 8008fde:	2103      	movs	r1, #3
 8008fe0:	ab03      	add	r3, sp, #12
 8008fe2:	9301      	str	r3, [sp, #4]
 8008fe4:	ab02      	add	r3, sp, #8
 8008fe6:	9300      	str	r3, [sp, #0]
 8008fe8:	ec45 4b10 	vmov	d0, r4, r5
 8008fec:	4653      	mov	r3, sl
 8008fee:	4632      	mov	r2, r6
 8008ff0:	f000 fe96 	bl	8009d20 <_dtoa_r>
 8008ff4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008ff8:	4607      	mov	r7, r0
 8008ffa:	d102      	bne.n	8009002 <__cvt+0x66>
 8008ffc:	f019 0f01 	tst.w	r9, #1
 8009000:	d022      	beq.n	8009048 <__cvt+0xac>
 8009002:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009006:	eb07 0906 	add.w	r9, r7, r6
 800900a:	d110      	bne.n	800902e <__cvt+0x92>
 800900c:	783b      	ldrb	r3, [r7, #0]
 800900e:	2b30      	cmp	r3, #48	; 0x30
 8009010:	d10a      	bne.n	8009028 <__cvt+0x8c>
 8009012:	2200      	movs	r2, #0
 8009014:	2300      	movs	r3, #0
 8009016:	4620      	mov	r0, r4
 8009018:	4629      	mov	r1, r5
 800901a:	f7f7 fd55 	bl	8000ac8 <__aeabi_dcmpeq>
 800901e:	b918      	cbnz	r0, 8009028 <__cvt+0x8c>
 8009020:	f1c6 0601 	rsb	r6, r6, #1
 8009024:	f8ca 6000 	str.w	r6, [sl]
 8009028:	f8da 3000 	ldr.w	r3, [sl]
 800902c:	4499      	add	r9, r3
 800902e:	2200      	movs	r2, #0
 8009030:	2300      	movs	r3, #0
 8009032:	4620      	mov	r0, r4
 8009034:	4629      	mov	r1, r5
 8009036:	f7f7 fd47 	bl	8000ac8 <__aeabi_dcmpeq>
 800903a:	b108      	cbz	r0, 8009040 <__cvt+0xa4>
 800903c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009040:	2230      	movs	r2, #48	; 0x30
 8009042:	9b03      	ldr	r3, [sp, #12]
 8009044:	454b      	cmp	r3, r9
 8009046:	d307      	bcc.n	8009058 <__cvt+0xbc>
 8009048:	9b03      	ldr	r3, [sp, #12]
 800904a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800904c:	1bdb      	subs	r3, r3, r7
 800904e:	4638      	mov	r0, r7
 8009050:	6013      	str	r3, [r2, #0]
 8009052:	b004      	add	sp, #16
 8009054:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009058:	1c59      	adds	r1, r3, #1
 800905a:	9103      	str	r1, [sp, #12]
 800905c:	701a      	strb	r2, [r3, #0]
 800905e:	e7f0      	b.n	8009042 <__cvt+0xa6>

08009060 <__exponent>:
 8009060:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009062:	4603      	mov	r3, r0
 8009064:	2900      	cmp	r1, #0
 8009066:	bfb8      	it	lt
 8009068:	4249      	neglt	r1, r1
 800906a:	f803 2b02 	strb.w	r2, [r3], #2
 800906e:	bfb4      	ite	lt
 8009070:	222d      	movlt	r2, #45	; 0x2d
 8009072:	222b      	movge	r2, #43	; 0x2b
 8009074:	2909      	cmp	r1, #9
 8009076:	7042      	strb	r2, [r0, #1]
 8009078:	dd2a      	ble.n	80090d0 <__exponent+0x70>
 800907a:	f10d 0207 	add.w	r2, sp, #7
 800907e:	4617      	mov	r7, r2
 8009080:	260a      	movs	r6, #10
 8009082:	4694      	mov	ip, r2
 8009084:	fb91 f5f6 	sdiv	r5, r1, r6
 8009088:	fb06 1415 	mls	r4, r6, r5, r1
 800908c:	3430      	adds	r4, #48	; 0x30
 800908e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009092:	460c      	mov	r4, r1
 8009094:	2c63      	cmp	r4, #99	; 0x63
 8009096:	f102 32ff 	add.w	r2, r2, #4294967295
 800909a:	4629      	mov	r1, r5
 800909c:	dcf1      	bgt.n	8009082 <__exponent+0x22>
 800909e:	3130      	adds	r1, #48	; 0x30
 80090a0:	f1ac 0402 	sub.w	r4, ip, #2
 80090a4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80090a8:	1c41      	adds	r1, r0, #1
 80090aa:	4622      	mov	r2, r4
 80090ac:	42ba      	cmp	r2, r7
 80090ae:	d30a      	bcc.n	80090c6 <__exponent+0x66>
 80090b0:	f10d 0209 	add.w	r2, sp, #9
 80090b4:	eba2 020c 	sub.w	r2, r2, ip
 80090b8:	42bc      	cmp	r4, r7
 80090ba:	bf88      	it	hi
 80090bc:	2200      	movhi	r2, #0
 80090be:	4413      	add	r3, r2
 80090c0:	1a18      	subs	r0, r3, r0
 80090c2:	b003      	add	sp, #12
 80090c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090c6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80090ca:	f801 5f01 	strb.w	r5, [r1, #1]!
 80090ce:	e7ed      	b.n	80090ac <__exponent+0x4c>
 80090d0:	2330      	movs	r3, #48	; 0x30
 80090d2:	3130      	adds	r1, #48	; 0x30
 80090d4:	7083      	strb	r3, [r0, #2]
 80090d6:	70c1      	strb	r1, [r0, #3]
 80090d8:	1d03      	adds	r3, r0, #4
 80090da:	e7f1      	b.n	80090c0 <__exponent+0x60>

080090dc <_printf_float>:
 80090dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090e0:	ed2d 8b02 	vpush	{d8}
 80090e4:	b08d      	sub	sp, #52	; 0x34
 80090e6:	460c      	mov	r4, r1
 80090e8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80090ec:	4616      	mov	r6, r2
 80090ee:	461f      	mov	r7, r3
 80090f0:	4605      	mov	r5, r0
 80090f2:	f000 fce7 	bl	8009ac4 <_localeconv_r>
 80090f6:	f8d0 a000 	ldr.w	sl, [r0]
 80090fa:	4650      	mov	r0, sl
 80090fc:	f7f7 f8b8 	bl	8000270 <strlen>
 8009100:	2300      	movs	r3, #0
 8009102:	930a      	str	r3, [sp, #40]	; 0x28
 8009104:	6823      	ldr	r3, [r4, #0]
 8009106:	9305      	str	r3, [sp, #20]
 8009108:	f8d8 3000 	ldr.w	r3, [r8]
 800910c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009110:	3307      	adds	r3, #7
 8009112:	f023 0307 	bic.w	r3, r3, #7
 8009116:	f103 0208 	add.w	r2, r3, #8
 800911a:	f8c8 2000 	str.w	r2, [r8]
 800911e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009122:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009126:	9307      	str	r3, [sp, #28]
 8009128:	f8cd 8018 	str.w	r8, [sp, #24]
 800912c:	ee08 0a10 	vmov	s16, r0
 8009130:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8009134:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009138:	4b9e      	ldr	r3, [pc, #632]	; (80093b4 <_printf_float+0x2d8>)
 800913a:	f04f 32ff 	mov.w	r2, #4294967295
 800913e:	f7f7 fcf5 	bl	8000b2c <__aeabi_dcmpun>
 8009142:	bb88      	cbnz	r0, 80091a8 <_printf_float+0xcc>
 8009144:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009148:	4b9a      	ldr	r3, [pc, #616]	; (80093b4 <_printf_float+0x2d8>)
 800914a:	f04f 32ff 	mov.w	r2, #4294967295
 800914e:	f7f7 fccf 	bl	8000af0 <__aeabi_dcmple>
 8009152:	bb48      	cbnz	r0, 80091a8 <_printf_float+0xcc>
 8009154:	2200      	movs	r2, #0
 8009156:	2300      	movs	r3, #0
 8009158:	4640      	mov	r0, r8
 800915a:	4649      	mov	r1, r9
 800915c:	f7f7 fcbe 	bl	8000adc <__aeabi_dcmplt>
 8009160:	b110      	cbz	r0, 8009168 <_printf_float+0x8c>
 8009162:	232d      	movs	r3, #45	; 0x2d
 8009164:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009168:	4a93      	ldr	r2, [pc, #588]	; (80093b8 <_printf_float+0x2dc>)
 800916a:	4b94      	ldr	r3, [pc, #592]	; (80093bc <_printf_float+0x2e0>)
 800916c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009170:	bf94      	ite	ls
 8009172:	4690      	movls	r8, r2
 8009174:	4698      	movhi	r8, r3
 8009176:	2303      	movs	r3, #3
 8009178:	6123      	str	r3, [r4, #16]
 800917a:	9b05      	ldr	r3, [sp, #20]
 800917c:	f023 0304 	bic.w	r3, r3, #4
 8009180:	6023      	str	r3, [r4, #0]
 8009182:	f04f 0900 	mov.w	r9, #0
 8009186:	9700      	str	r7, [sp, #0]
 8009188:	4633      	mov	r3, r6
 800918a:	aa0b      	add	r2, sp, #44	; 0x2c
 800918c:	4621      	mov	r1, r4
 800918e:	4628      	mov	r0, r5
 8009190:	f000 f9da 	bl	8009548 <_printf_common>
 8009194:	3001      	adds	r0, #1
 8009196:	f040 8090 	bne.w	80092ba <_printf_float+0x1de>
 800919a:	f04f 30ff 	mov.w	r0, #4294967295
 800919e:	b00d      	add	sp, #52	; 0x34
 80091a0:	ecbd 8b02 	vpop	{d8}
 80091a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091a8:	4642      	mov	r2, r8
 80091aa:	464b      	mov	r3, r9
 80091ac:	4640      	mov	r0, r8
 80091ae:	4649      	mov	r1, r9
 80091b0:	f7f7 fcbc 	bl	8000b2c <__aeabi_dcmpun>
 80091b4:	b140      	cbz	r0, 80091c8 <_printf_float+0xec>
 80091b6:	464b      	mov	r3, r9
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	bfbc      	itt	lt
 80091bc:	232d      	movlt	r3, #45	; 0x2d
 80091be:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80091c2:	4a7f      	ldr	r2, [pc, #508]	; (80093c0 <_printf_float+0x2e4>)
 80091c4:	4b7f      	ldr	r3, [pc, #508]	; (80093c4 <_printf_float+0x2e8>)
 80091c6:	e7d1      	b.n	800916c <_printf_float+0x90>
 80091c8:	6863      	ldr	r3, [r4, #4]
 80091ca:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80091ce:	9206      	str	r2, [sp, #24]
 80091d0:	1c5a      	adds	r2, r3, #1
 80091d2:	d13f      	bne.n	8009254 <_printf_float+0x178>
 80091d4:	2306      	movs	r3, #6
 80091d6:	6063      	str	r3, [r4, #4]
 80091d8:	9b05      	ldr	r3, [sp, #20]
 80091da:	6861      	ldr	r1, [r4, #4]
 80091dc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80091e0:	2300      	movs	r3, #0
 80091e2:	9303      	str	r3, [sp, #12]
 80091e4:	ab0a      	add	r3, sp, #40	; 0x28
 80091e6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80091ea:	ab09      	add	r3, sp, #36	; 0x24
 80091ec:	ec49 8b10 	vmov	d0, r8, r9
 80091f0:	9300      	str	r3, [sp, #0]
 80091f2:	6022      	str	r2, [r4, #0]
 80091f4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80091f8:	4628      	mov	r0, r5
 80091fa:	f7ff fecf 	bl	8008f9c <__cvt>
 80091fe:	9b06      	ldr	r3, [sp, #24]
 8009200:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009202:	2b47      	cmp	r3, #71	; 0x47
 8009204:	4680      	mov	r8, r0
 8009206:	d108      	bne.n	800921a <_printf_float+0x13e>
 8009208:	1cc8      	adds	r0, r1, #3
 800920a:	db02      	blt.n	8009212 <_printf_float+0x136>
 800920c:	6863      	ldr	r3, [r4, #4]
 800920e:	4299      	cmp	r1, r3
 8009210:	dd41      	ble.n	8009296 <_printf_float+0x1ba>
 8009212:	f1ab 0302 	sub.w	r3, fp, #2
 8009216:	fa5f fb83 	uxtb.w	fp, r3
 800921a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800921e:	d820      	bhi.n	8009262 <_printf_float+0x186>
 8009220:	3901      	subs	r1, #1
 8009222:	465a      	mov	r2, fp
 8009224:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009228:	9109      	str	r1, [sp, #36]	; 0x24
 800922a:	f7ff ff19 	bl	8009060 <__exponent>
 800922e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009230:	1813      	adds	r3, r2, r0
 8009232:	2a01      	cmp	r2, #1
 8009234:	4681      	mov	r9, r0
 8009236:	6123      	str	r3, [r4, #16]
 8009238:	dc02      	bgt.n	8009240 <_printf_float+0x164>
 800923a:	6822      	ldr	r2, [r4, #0]
 800923c:	07d2      	lsls	r2, r2, #31
 800923e:	d501      	bpl.n	8009244 <_printf_float+0x168>
 8009240:	3301      	adds	r3, #1
 8009242:	6123      	str	r3, [r4, #16]
 8009244:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009248:	2b00      	cmp	r3, #0
 800924a:	d09c      	beq.n	8009186 <_printf_float+0xaa>
 800924c:	232d      	movs	r3, #45	; 0x2d
 800924e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009252:	e798      	b.n	8009186 <_printf_float+0xaa>
 8009254:	9a06      	ldr	r2, [sp, #24]
 8009256:	2a47      	cmp	r2, #71	; 0x47
 8009258:	d1be      	bne.n	80091d8 <_printf_float+0xfc>
 800925a:	2b00      	cmp	r3, #0
 800925c:	d1bc      	bne.n	80091d8 <_printf_float+0xfc>
 800925e:	2301      	movs	r3, #1
 8009260:	e7b9      	b.n	80091d6 <_printf_float+0xfa>
 8009262:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009266:	d118      	bne.n	800929a <_printf_float+0x1be>
 8009268:	2900      	cmp	r1, #0
 800926a:	6863      	ldr	r3, [r4, #4]
 800926c:	dd0b      	ble.n	8009286 <_printf_float+0x1aa>
 800926e:	6121      	str	r1, [r4, #16]
 8009270:	b913      	cbnz	r3, 8009278 <_printf_float+0x19c>
 8009272:	6822      	ldr	r2, [r4, #0]
 8009274:	07d0      	lsls	r0, r2, #31
 8009276:	d502      	bpl.n	800927e <_printf_float+0x1a2>
 8009278:	3301      	adds	r3, #1
 800927a:	440b      	add	r3, r1
 800927c:	6123      	str	r3, [r4, #16]
 800927e:	65a1      	str	r1, [r4, #88]	; 0x58
 8009280:	f04f 0900 	mov.w	r9, #0
 8009284:	e7de      	b.n	8009244 <_printf_float+0x168>
 8009286:	b913      	cbnz	r3, 800928e <_printf_float+0x1b2>
 8009288:	6822      	ldr	r2, [r4, #0]
 800928a:	07d2      	lsls	r2, r2, #31
 800928c:	d501      	bpl.n	8009292 <_printf_float+0x1b6>
 800928e:	3302      	adds	r3, #2
 8009290:	e7f4      	b.n	800927c <_printf_float+0x1a0>
 8009292:	2301      	movs	r3, #1
 8009294:	e7f2      	b.n	800927c <_printf_float+0x1a0>
 8009296:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800929a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800929c:	4299      	cmp	r1, r3
 800929e:	db05      	blt.n	80092ac <_printf_float+0x1d0>
 80092a0:	6823      	ldr	r3, [r4, #0]
 80092a2:	6121      	str	r1, [r4, #16]
 80092a4:	07d8      	lsls	r0, r3, #31
 80092a6:	d5ea      	bpl.n	800927e <_printf_float+0x1a2>
 80092a8:	1c4b      	adds	r3, r1, #1
 80092aa:	e7e7      	b.n	800927c <_printf_float+0x1a0>
 80092ac:	2900      	cmp	r1, #0
 80092ae:	bfd4      	ite	le
 80092b0:	f1c1 0202 	rsble	r2, r1, #2
 80092b4:	2201      	movgt	r2, #1
 80092b6:	4413      	add	r3, r2
 80092b8:	e7e0      	b.n	800927c <_printf_float+0x1a0>
 80092ba:	6823      	ldr	r3, [r4, #0]
 80092bc:	055a      	lsls	r2, r3, #21
 80092be:	d407      	bmi.n	80092d0 <_printf_float+0x1f4>
 80092c0:	6923      	ldr	r3, [r4, #16]
 80092c2:	4642      	mov	r2, r8
 80092c4:	4631      	mov	r1, r6
 80092c6:	4628      	mov	r0, r5
 80092c8:	47b8      	blx	r7
 80092ca:	3001      	adds	r0, #1
 80092cc:	d12c      	bne.n	8009328 <_printf_float+0x24c>
 80092ce:	e764      	b.n	800919a <_printf_float+0xbe>
 80092d0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80092d4:	f240 80e0 	bls.w	8009498 <_printf_float+0x3bc>
 80092d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80092dc:	2200      	movs	r2, #0
 80092de:	2300      	movs	r3, #0
 80092e0:	f7f7 fbf2 	bl	8000ac8 <__aeabi_dcmpeq>
 80092e4:	2800      	cmp	r0, #0
 80092e6:	d034      	beq.n	8009352 <_printf_float+0x276>
 80092e8:	4a37      	ldr	r2, [pc, #220]	; (80093c8 <_printf_float+0x2ec>)
 80092ea:	2301      	movs	r3, #1
 80092ec:	4631      	mov	r1, r6
 80092ee:	4628      	mov	r0, r5
 80092f0:	47b8      	blx	r7
 80092f2:	3001      	adds	r0, #1
 80092f4:	f43f af51 	beq.w	800919a <_printf_float+0xbe>
 80092f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80092fc:	429a      	cmp	r2, r3
 80092fe:	db02      	blt.n	8009306 <_printf_float+0x22a>
 8009300:	6823      	ldr	r3, [r4, #0]
 8009302:	07d8      	lsls	r0, r3, #31
 8009304:	d510      	bpl.n	8009328 <_printf_float+0x24c>
 8009306:	ee18 3a10 	vmov	r3, s16
 800930a:	4652      	mov	r2, sl
 800930c:	4631      	mov	r1, r6
 800930e:	4628      	mov	r0, r5
 8009310:	47b8      	blx	r7
 8009312:	3001      	adds	r0, #1
 8009314:	f43f af41 	beq.w	800919a <_printf_float+0xbe>
 8009318:	f04f 0800 	mov.w	r8, #0
 800931c:	f104 091a 	add.w	r9, r4, #26
 8009320:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009322:	3b01      	subs	r3, #1
 8009324:	4543      	cmp	r3, r8
 8009326:	dc09      	bgt.n	800933c <_printf_float+0x260>
 8009328:	6823      	ldr	r3, [r4, #0]
 800932a:	079b      	lsls	r3, r3, #30
 800932c:	f100 8107 	bmi.w	800953e <_printf_float+0x462>
 8009330:	68e0      	ldr	r0, [r4, #12]
 8009332:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009334:	4298      	cmp	r0, r3
 8009336:	bfb8      	it	lt
 8009338:	4618      	movlt	r0, r3
 800933a:	e730      	b.n	800919e <_printf_float+0xc2>
 800933c:	2301      	movs	r3, #1
 800933e:	464a      	mov	r2, r9
 8009340:	4631      	mov	r1, r6
 8009342:	4628      	mov	r0, r5
 8009344:	47b8      	blx	r7
 8009346:	3001      	adds	r0, #1
 8009348:	f43f af27 	beq.w	800919a <_printf_float+0xbe>
 800934c:	f108 0801 	add.w	r8, r8, #1
 8009350:	e7e6      	b.n	8009320 <_printf_float+0x244>
 8009352:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009354:	2b00      	cmp	r3, #0
 8009356:	dc39      	bgt.n	80093cc <_printf_float+0x2f0>
 8009358:	4a1b      	ldr	r2, [pc, #108]	; (80093c8 <_printf_float+0x2ec>)
 800935a:	2301      	movs	r3, #1
 800935c:	4631      	mov	r1, r6
 800935e:	4628      	mov	r0, r5
 8009360:	47b8      	blx	r7
 8009362:	3001      	adds	r0, #1
 8009364:	f43f af19 	beq.w	800919a <_printf_float+0xbe>
 8009368:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800936c:	4313      	orrs	r3, r2
 800936e:	d102      	bne.n	8009376 <_printf_float+0x29a>
 8009370:	6823      	ldr	r3, [r4, #0]
 8009372:	07d9      	lsls	r1, r3, #31
 8009374:	d5d8      	bpl.n	8009328 <_printf_float+0x24c>
 8009376:	ee18 3a10 	vmov	r3, s16
 800937a:	4652      	mov	r2, sl
 800937c:	4631      	mov	r1, r6
 800937e:	4628      	mov	r0, r5
 8009380:	47b8      	blx	r7
 8009382:	3001      	adds	r0, #1
 8009384:	f43f af09 	beq.w	800919a <_printf_float+0xbe>
 8009388:	f04f 0900 	mov.w	r9, #0
 800938c:	f104 0a1a 	add.w	sl, r4, #26
 8009390:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009392:	425b      	negs	r3, r3
 8009394:	454b      	cmp	r3, r9
 8009396:	dc01      	bgt.n	800939c <_printf_float+0x2c0>
 8009398:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800939a:	e792      	b.n	80092c2 <_printf_float+0x1e6>
 800939c:	2301      	movs	r3, #1
 800939e:	4652      	mov	r2, sl
 80093a0:	4631      	mov	r1, r6
 80093a2:	4628      	mov	r0, r5
 80093a4:	47b8      	blx	r7
 80093a6:	3001      	adds	r0, #1
 80093a8:	f43f aef7 	beq.w	800919a <_printf_float+0xbe>
 80093ac:	f109 0901 	add.w	r9, r9, #1
 80093b0:	e7ee      	b.n	8009390 <_printf_float+0x2b4>
 80093b2:	bf00      	nop
 80093b4:	7fefffff 	.word	0x7fefffff
 80093b8:	0800db79 	.word	0x0800db79
 80093bc:	0800db7d 	.word	0x0800db7d
 80093c0:	0800db81 	.word	0x0800db81
 80093c4:	0800db85 	.word	0x0800db85
 80093c8:	0800db89 	.word	0x0800db89
 80093cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80093ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80093d0:	429a      	cmp	r2, r3
 80093d2:	bfa8      	it	ge
 80093d4:	461a      	movge	r2, r3
 80093d6:	2a00      	cmp	r2, #0
 80093d8:	4691      	mov	r9, r2
 80093da:	dc37      	bgt.n	800944c <_printf_float+0x370>
 80093dc:	f04f 0b00 	mov.w	fp, #0
 80093e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80093e4:	f104 021a 	add.w	r2, r4, #26
 80093e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80093ea:	9305      	str	r3, [sp, #20]
 80093ec:	eba3 0309 	sub.w	r3, r3, r9
 80093f0:	455b      	cmp	r3, fp
 80093f2:	dc33      	bgt.n	800945c <_printf_float+0x380>
 80093f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80093f8:	429a      	cmp	r2, r3
 80093fa:	db3b      	blt.n	8009474 <_printf_float+0x398>
 80093fc:	6823      	ldr	r3, [r4, #0]
 80093fe:	07da      	lsls	r2, r3, #31
 8009400:	d438      	bmi.n	8009474 <_printf_float+0x398>
 8009402:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009406:	eba2 0903 	sub.w	r9, r2, r3
 800940a:	9b05      	ldr	r3, [sp, #20]
 800940c:	1ad2      	subs	r2, r2, r3
 800940e:	4591      	cmp	r9, r2
 8009410:	bfa8      	it	ge
 8009412:	4691      	movge	r9, r2
 8009414:	f1b9 0f00 	cmp.w	r9, #0
 8009418:	dc35      	bgt.n	8009486 <_printf_float+0x3aa>
 800941a:	f04f 0800 	mov.w	r8, #0
 800941e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009422:	f104 0a1a 	add.w	sl, r4, #26
 8009426:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800942a:	1a9b      	subs	r3, r3, r2
 800942c:	eba3 0309 	sub.w	r3, r3, r9
 8009430:	4543      	cmp	r3, r8
 8009432:	f77f af79 	ble.w	8009328 <_printf_float+0x24c>
 8009436:	2301      	movs	r3, #1
 8009438:	4652      	mov	r2, sl
 800943a:	4631      	mov	r1, r6
 800943c:	4628      	mov	r0, r5
 800943e:	47b8      	blx	r7
 8009440:	3001      	adds	r0, #1
 8009442:	f43f aeaa 	beq.w	800919a <_printf_float+0xbe>
 8009446:	f108 0801 	add.w	r8, r8, #1
 800944a:	e7ec      	b.n	8009426 <_printf_float+0x34a>
 800944c:	4613      	mov	r3, r2
 800944e:	4631      	mov	r1, r6
 8009450:	4642      	mov	r2, r8
 8009452:	4628      	mov	r0, r5
 8009454:	47b8      	blx	r7
 8009456:	3001      	adds	r0, #1
 8009458:	d1c0      	bne.n	80093dc <_printf_float+0x300>
 800945a:	e69e      	b.n	800919a <_printf_float+0xbe>
 800945c:	2301      	movs	r3, #1
 800945e:	4631      	mov	r1, r6
 8009460:	4628      	mov	r0, r5
 8009462:	9205      	str	r2, [sp, #20]
 8009464:	47b8      	blx	r7
 8009466:	3001      	adds	r0, #1
 8009468:	f43f ae97 	beq.w	800919a <_printf_float+0xbe>
 800946c:	9a05      	ldr	r2, [sp, #20]
 800946e:	f10b 0b01 	add.w	fp, fp, #1
 8009472:	e7b9      	b.n	80093e8 <_printf_float+0x30c>
 8009474:	ee18 3a10 	vmov	r3, s16
 8009478:	4652      	mov	r2, sl
 800947a:	4631      	mov	r1, r6
 800947c:	4628      	mov	r0, r5
 800947e:	47b8      	blx	r7
 8009480:	3001      	adds	r0, #1
 8009482:	d1be      	bne.n	8009402 <_printf_float+0x326>
 8009484:	e689      	b.n	800919a <_printf_float+0xbe>
 8009486:	9a05      	ldr	r2, [sp, #20]
 8009488:	464b      	mov	r3, r9
 800948a:	4442      	add	r2, r8
 800948c:	4631      	mov	r1, r6
 800948e:	4628      	mov	r0, r5
 8009490:	47b8      	blx	r7
 8009492:	3001      	adds	r0, #1
 8009494:	d1c1      	bne.n	800941a <_printf_float+0x33e>
 8009496:	e680      	b.n	800919a <_printf_float+0xbe>
 8009498:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800949a:	2a01      	cmp	r2, #1
 800949c:	dc01      	bgt.n	80094a2 <_printf_float+0x3c6>
 800949e:	07db      	lsls	r3, r3, #31
 80094a0:	d53a      	bpl.n	8009518 <_printf_float+0x43c>
 80094a2:	2301      	movs	r3, #1
 80094a4:	4642      	mov	r2, r8
 80094a6:	4631      	mov	r1, r6
 80094a8:	4628      	mov	r0, r5
 80094aa:	47b8      	blx	r7
 80094ac:	3001      	adds	r0, #1
 80094ae:	f43f ae74 	beq.w	800919a <_printf_float+0xbe>
 80094b2:	ee18 3a10 	vmov	r3, s16
 80094b6:	4652      	mov	r2, sl
 80094b8:	4631      	mov	r1, r6
 80094ba:	4628      	mov	r0, r5
 80094bc:	47b8      	blx	r7
 80094be:	3001      	adds	r0, #1
 80094c0:	f43f ae6b 	beq.w	800919a <_printf_float+0xbe>
 80094c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80094c8:	2200      	movs	r2, #0
 80094ca:	2300      	movs	r3, #0
 80094cc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80094d0:	f7f7 fafa 	bl	8000ac8 <__aeabi_dcmpeq>
 80094d4:	b9d8      	cbnz	r0, 800950e <_printf_float+0x432>
 80094d6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80094da:	f108 0201 	add.w	r2, r8, #1
 80094de:	4631      	mov	r1, r6
 80094e0:	4628      	mov	r0, r5
 80094e2:	47b8      	blx	r7
 80094e4:	3001      	adds	r0, #1
 80094e6:	d10e      	bne.n	8009506 <_printf_float+0x42a>
 80094e8:	e657      	b.n	800919a <_printf_float+0xbe>
 80094ea:	2301      	movs	r3, #1
 80094ec:	4652      	mov	r2, sl
 80094ee:	4631      	mov	r1, r6
 80094f0:	4628      	mov	r0, r5
 80094f2:	47b8      	blx	r7
 80094f4:	3001      	adds	r0, #1
 80094f6:	f43f ae50 	beq.w	800919a <_printf_float+0xbe>
 80094fa:	f108 0801 	add.w	r8, r8, #1
 80094fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009500:	3b01      	subs	r3, #1
 8009502:	4543      	cmp	r3, r8
 8009504:	dcf1      	bgt.n	80094ea <_printf_float+0x40e>
 8009506:	464b      	mov	r3, r9
 8009508:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800950c:	e6da      	b.n	80092c4 <_printf_float+0x1e8>
 800950e:	f04f 0800 	mov.w	r8, #0
 8009512:	f104 0a1a 	add.w	sl, r4, #26
 8009516:	e7f2      	b.n	80094fe <_printf_float+0x422>
 8009518:	2301      	movs	r3, #1
 800951a:	4642      	mov	r2, r8
 800951c:	e7df      	b.n	80094de <_printf_float+0x402>
 800951e:	2301      	movs	r3, #1
 8009520:	464a      	mov	r2, r9
 8009522:	4631      	mov	r1, r6
 8009524:	4628      	mov	r0, r5
 8009526:	47b8      	blx	r7
 8009528:	3001      	adds	r0, #1
 800952a:	f43f ae36 	beq.w	800919a <_printf_float+0xbe>
 800952e:	f108 0801 	add.w	r8, r8, #1
 8009532:	68e3      	ldr	r3, [r4, #12]
 8009534:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009536:	1a5b      	subs	r3, r3, r1
 8009538:	4543      	cmp	r3, r8
 800953a:	dcf0      	bgt.n	800951e <_printf_float+0x442>
 800953c:	e6f8      	b.n	8009330 <_printf_float+0x254>
 800953e:	f04f 0800 	mov.w	r8, #0
 8009542:	f104 0919 	add.w	r9, r4, #25
 8009546:	e7f4      	b.n	8009532 <_printf_float+0x456>

08009548 <_printf_common>:
 8009548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800954c:	4616      	mov	r6, r2
 800954e:	4699      	mov	r9, r3
 8009550:	688a      	ldr	r2, [r1, #8]
 8009552:	690b      	ldr	r3, [r1, #16]
 8009554:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009558:	4293      	cmp	r3, r2
 800955a:	bfb8      	it	lt
 800955c:	4613      	movlt	r3, r2
 800955e:	6033      	str	r3, [r6, #0]
 8009560:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009564:	4607      	mov	r7, r0
 8009566:	460c      	mov	r4, r1
 8009568:	b10a      	cbz	r2, 800956e <_printf_common+0x26>
 800956a:	3301      	adds	r3, #1
 800956c:	6033      	str	r3, [r6, #0]
 800956e:	6823      	ldr	r3, [r4, #0]
 8009570:	0699      	lsls	r1, r3, #26
 8009572:	bf42      	ittt	mi
 8009574:	6833      	ldrmi	r3, [r6, #0]
 8009576:	3302      	addmi	r3, #2
 8009578:	6033      	strmi	r3, [r6, #0]
 800957a:	6825      	ldr	r5, [r4, #0]
 800957c:	f015 0506 	ands.w	r5, r5, #6
 8009580:	d106      	bne.n	8009590 <_printf_common+0x48>
 8009582:	f104 0a19 	add.w	sl, r4, #25
 8009586:	68e3      	ldr	r3, [r4, #12]
 8009588:	6832      	ldr	r2, [r6, #0]
 800958a:	1a9b      	subs	r3, r3, r2
 800958c:	42ab      	cmp	r3, r5
 800958e:	dc26      	bgt.n	80095de <_printf_common+0x96>
 8009590:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009594:	1e13      	subs	r3, r2, #0
 8009596:	6822      	ldr	r2, [r4, #0]
 8009598:	bf18      	it	ne
 800959a:	2301      	movne	r3, #1
 800959c:	0692      	lsls	r2, r2, #26
 800959e:	d42b      	bmi.n	80095f8 <_printf_common+0xb0>
 80095a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80095a4:	4649      	mov	r1, r9
 80095a6:	4638      	mov	r0, r7
 80095a8:	47c0      	blx	r8
 80095aa:	3001      	adds	r0, #1
 80095ac:	d01e      	beq.n	80095ec <_printf_common+0xa4>
 80095ae:	6823      	ldr	r3, [r4, #0]
 80095b0:	6922      	ldr	r2, [r4, #16]
 80095b2:	f003 0306 	and.w	r3, r3, #6
 80095b6:	2b04      	cmp	r3, #4
 80095b8:	bf02      	ittt	eq
 80095ba:	68e5      	ldreq	r5, [r4, #12]
 80095bc:	6833      	ldreq	r3, [r6, #0]
 80095be:	1aed      	subeq	r5, r5, r3
 80095c0:	68a3      	ldr	r3, [r4, #8]
 80095c2:	bf0c      	ite	eq
 80095c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80095c8:	2500      	movne	r5, #0
 80095ca:	4293      	cmp	r3, r2
 80095cc:	bfc4      	itt	gt
 80095ce:	1a9b      	subgt	r3, r3, r2
 80095d0:	18ed      	addgt	r5, r5, r3
 80095d2:	2600      	movs	r6, #0
 80095d4:	341a      	adds	r4, #26
 80095d6:	42b5      	cmp	r5, r6
 80095d8:	d11a      	bne.n	8009610 <_printf_common+0xc8>
 80095da:	2000      	movs	r0, #0
 80095dc:	e008      	b.n	80095f0 <_printf_common+0xa8>
 80095de:	2301      	movs	r3, #1
 80095e0:	4652      	mov	r2, sl
 80095e2:	4649      	mov	r1, r9
 80095e4:	4638      	mov	r0, r7
 80095e6:	47c0      	blx	r8
 80095e8:	3001      	adds	r0, #1
 80095ea:	d103      	bne.n	80095f4 <_printf_common+0xac>
 80095ec:	f04f 30ff 	mov.w	r0, #4294967295
 80095f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095f4:	3501      	adds	r5, #1
 80095f6:	e7c6      	b.n	8009586 <_printf_common+0x3e>
 80095f8:	18e1      	adds	r1, r4, r3
 80095fa:	1c5a      	adds	r2, r3, #1
 80095fc:	2030      	movs	r0, #48	; 0x30
 80095fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009602:	4422      	add	r2, r4
 8009604:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009608:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800960c:	3302      	adds	r3, #2
 800960e:	e7c7      	b.n	80095a0 <_printf_common+0x58>
 8009610:	2301      	movs	r3, #1
 8009612:	4622      	mov	r2, r4
 8009614:	4649      	mov	r1, r9
 8009616:	4638      	mov	r0, r7
 8009618:	47c0      	blx	r8
 800961a:	3001      	adds	r0, #1
 800961c:	d0e6      	beq.n	80095ec <_printf_common+0xa4>
 800961e:	3601      	adds	r6, #1
 8009620:	e7d9      	b.n	80095d6 <_printf_common+0x8e>
	...

08009624 <_printf_i>:
 8009624:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009628:	7e0f      	ldrb	r7, [r1, #24]
 800962a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800962c:	2f78      	cmp	r7, #120	; 0x78
 800962e:	4691      	mov	r9, r2
 8009630:	4680      	mov	r8, r0
 8009632:	460c      	mov	r4, r1
 8009634:	469a      	mov	sl, r3
 8009636:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800963a:	d807      	bhi.n	800964c <_printf_i+0x28>
 800963c:	2f62      	cmp	r7, #98	; 0x62
 800963e:	d80a      	bhi.n	8009656 <_printf_i+0x32>
 8009640:	2f00      	cmp	r7, #0
 8009642:	f000 80d4 	beq.w	80097ee <_printf_i+0x1ca>
 8009646:	2f58      	cmp	r7, #88	; 0x58
 8009648:	f000 80c0 	beq.w	80097cc <_printf_i+0x1a8>
 800964c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009650:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009654:	e03a      	b.n	80096cc <_printf_i+0xa8>
 8009656:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800965a:	2b15      	cmp	r3, #21
 800965c:	d8f6      	bhi.n	800964c <_printf_i+0x28>
 800965e:	a101      	add	r1, pc, #4	; (adr r1, 8009664 <_printf_i+0x40>)
 8009660:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009664:	080096bd 	.word	0x080096bd
 8009668:	080096d1 	.word	0x080096d1
 800966c:	0800964d 	.word	0x0800964d
 8009670:	0800964d 	.word	0x0800964d
 8009674:	0800964d 	.word	0x0800964d
 8009678:	0800964d 	.word	0x0800964d
 800967c:	080096d1 	.word	0x080096d1
 8009680:	0800964d 	.word	0x0800964d
 8009684:	0800964d 	.word	0x0800964d
 8009688:	0800964d 	.word	0x0800964d
 800968c:	0800964d 	.word	0x0800964d
 8009690:	080097d5 	.word	0x080097d5
 8009694:	080096fd 	.word	0x080096fd
 8009698:	0800978f 	.word	0x0800978f
 800969c:	0800964d 	.word	0x0800964d
 80096a0:	0800964d 	.word	0x0800964d
 80096a4:	080097f7 	.word	0x080097f7
 80096a8:	0800964d 	.word	0x0800964d
 80096ac:	080096fd 	.word	0x080096fd
 80096b0:	0800964d 	.word	0x0800964d
 80096b4:	0800964d 	.word	0x0800964d
 80096b8:	08009797 	.word	0x08009797
 80096bc:	682b      	ldr	r3, [r5, #0]
 80096be:	1d1a      	adds	r2, r3, #4
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	602a      	str	r2, [r5, #0]
 80096c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80096c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80096cc:	2301      	movs	r3, #1
 80096ce:	e09f      	b.n	8009810 <_printf_i+0x1ec>
 80096d0:	6820      	ldr	r0, [r4, #0]
 80096d2:	682b      	ldr	r3, [r5, #0]
 80096d4:	0607      	lsls	r7, r0, #24
 80096d6:	f103 0104 	add.w	r1, r3, #4
 80096da:	6029      	str	r1, [r5, #0]
 80096dc:	d501      	bpl.n	80096e2 <_printf_i+0xbe>
 80096de:	681e      	ldr	r6, [r3, #0]
 80096e0:	e003      	b.n	80096ea <_printf_i+0xc6>
 80096e2:	0646      	lsls	r6, r0, #25
 80096e4:	d5fb      	bpl.n	80096de <_printf_i+0xba>
 80096e6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80096ea:	2e00      	cmp	r6, #0
 80096ec:	da03      	bge.n	80096f6 <_printf_i+0xd2>
 80096ee:	232d      	movs	r3, #45	; 0x2d
 80096f0:	4276      	negs	r6, r6
 80096f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096f6:	485a      	ldr	r0, [pc, #360]	; (8009860 <_printf_i+0x23c>)
 80096f8:	230a      	movs	r3, #10
 80096fa:	e012      	b.n	8009722 <_printf_i+0xfe>
 80096fc:	682b      	ldr	r3, [r5, #0]
 80096fe:	6820      	ldr	r0, [r4, #0]
 8009700:	1d19      	adds	r1, r3, #4
 8009702:	6029      	str	r1, [r5, #0]
 8009704:	0605      	lsls	r5, r0, #24
 8009706:	d501      	bpl.n	800970c <_printf_i+0xe8>
 8009708:	681e      	ldr	r6, [r3, #0]
 800970a:	e002      	b.n	8009712 <_printf_i+0xee>
 800970c:	0641      	lsls	r1, r0, #25
 800970e:	d5fb      	bpl.n	8009708 <_printf_i+0xe4>
 8009710:	881e      	ldrh	r6, [r3, #0]
 8009712:	4853      	ldr	r0, [pc, #332]	; (8009860 <_printf_i+0x23c>)
 8009714:	2f6f      	cmp	r7, #111	; 0x6f
 8009716:	bf0c      	ite	eq
 8009718:	2308      	moveq	r3, #8
 800971a:	230a      	movne	r3, #10
 800971c:	2100      	movs	r1, #0
 800971e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009722:	6865      	ldr	r5, [r4, #4]
 8009724:	60a5      	str	r5, [r4, #8]
 8009726:	2d00      	cmp	r5, #0
 8009728:	bfa2      	ittt	ge
 800972a:	6821      	ldrge	r1, [r4, #0]
 800972c:	f021 0104 	bicge.w	r1, r1, #4
 8009730:	6021      	strge	r1, [r4, #0]
 8009732:	b90e      	cbnz	r6, 8009738 <_printf_i+0x114>
 8009734:	2d00      	cmp	r5, #0
 8009736:	d04b      	beq.n	80097d0 <_printf_i+0x1ac>
 8009738:	4615      	mov	r5, r2
 800973a:	fbb6 f1f3 	udiv	r1, r6, r3
 800973e:	fb03 6711 	mls	r7, r3, r1, r6
 8009742:	5dc7      	ldrb	r7, [r0, r7]
 8009744:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009748:	4637      	mov	r7, r6
 800974a:	42bb      	cmp	r3, r7
 800974c:	460e      	mov	r6, r1
 800974e:	d9f4      	bls.n	800973a <_printf_i+0x116>
 8009750:	2b08      	cmp	r3, #8
 8009752:	d10b      	bne.n	800976c <_printf_i+0x148>
 8009754:	6823      	ldr	r3, [r4, #0]
 8009756:	07de      	lsls	r6, r3, #31
 8009758:	d508      	bpl.n	800976c <_printf_i+0x148>
 800975a:	6923      	ldr	r3, [r4, #16]
 800975c:	6861      	ldr	r1, [r4, #4]
 800975e:	4299      	cmp	r1, r3
 8009760:	bfde      	ittt	le
 8009762:	2330      	movle	r3, #48	; 0x30
 8009764:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009768:	f105 35ff 	addle.w	r5, r5, #4294967295
 800976c:	1b52      	subs	r2, r2, r5
 800976e:	6122      	str	r2, [r4, #16]
 8009770:	f8cd a000 	str.w	sl, [sp]
 8009774:	464b      	mov	r3, r9
 8009776:	aa03      	add	r2, sp, #12
 8009778:	4621      	mov	r1, r4
 800977a:	4640      	mov	r0, r8
 800977c:	f7ff fee4 	bl	8009548 <_printf_common>
 8009780:	3001      	adds	r0, #1
 8009782:	d14a      	bne.n	800981a <_printf_i+0x1f6>
 8009784:	f04f 30ff 	mov.w	r0, #4294967295
 8009788:	b004      	add	sp, #16
 800978a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800978e:	6823      	ldr	r3, [r4, #0]
 8009790:	f043 0320 	orr.w	r3, r3, #32
 8009794:	6023      	str	r3, [r4, #0]
 8009796:	4833      	ldr	r0, [pc, #204]	; (8009864 <_printf_i+0x240>)
 8009798:	2778      	movs	r7, #120	; 0x78
 800979a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800979e:	6823      	ldr	r3, [r4, #0]
 80097a0:	6829      	ldr	r1, [r5, #0]
 80097a2:	061f      	lsls	r7, r3, #24
 80097a4:	f851 6b04 	ldr.w	r6, [r1], #4
 80097a8:	d402      	bmi.n	80097b0 <_printf_i+0x18c>
 80097aa:	065f      	lsls	r7, r3, #25
 80097ac:	bf48      	it	mi
 80097ae:	b2b6      	uxthmi	r6, r6
 80097b0:	07df      	lsls	r7, r3, #31
 80097b2:	bf48      	it	mi
 80097b4:	f043 0320 	orrmi.w	r3, r3, #32
 80097b8:	6029      	str	r1, [r5, #0]
 80097ba:	bf48      	it	mi
 80097bc:	6023      	strmi	r3, [r4, #0]
 80097be:	b91e      	cbnz	r6, 80097c8 <_printf_i+0x1a4>
 80097c0:	6823      	ldr	r3, [r4, #0]
 80097c2:	f023 0320 	bic.w	r3, r3, #32
 80097c6:	6023      	str	r3, [r4, #0]
 80097c8:	2310      	movs	r3, #16
 80097ca:	e7a7      	b.n	800971c <_printf_i+0xf8>
 80097cc:	4824      	ldr	r0, [pc, #144]	; (8009860 <_printf_i+0x23c>)
 80097ce:	e7e4      	b.n	800979a <_printf_i+0x176>
 80097d0:	4615      	mov	r5, r2
 80097d2:	e7bd      	b.n	8009750 <_printf_i+0x12c>
 80097d4:	682b      	ldr	r3, [r5, #0]
 80097d6:	6826      	ldr	r6, [r4, #0]
 80097d8:	6961      	ldr	r1, [r4, #20]
 80097da:	1d18      	adds	r0, r3, #4
 80097dc:	6028      	str	r0, [r5, #0]
 80097de:	0635      	lsls	r5, r6, #24
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	d501      	bpl.n	80097e8 <_printf_i+0x1c4>
 80097e4:	6019      	str	r1, [r3, #0]
 80097e6:	e002      	b.n	80097ee <_printf_i+0x1ca>
 80097e8:	0670      	lsls	r0, r6, #25
 80097ea:	d5fb      	bpl.n	80097e4 <_printf_i+0x1c0>
 80097ec:	8019      	strh	r1, [r3, #0]
 80097ee:	2300      	movs	r3, #0
 80097f0:	6123      	str	r3, [r4, #16]
 80097f2:	4615      	mov	r5, r2
 80097f4:	e7bc      	b.n	8009770 <_printf_i+0x14c>
 80097f6:	682b      	ldr	r3, [r5, #0]
 80097f8:	1d1a      	adds	r2, r3, #4
 80097fa:	602a      	str	r2, [r5, #0]
 80097fc:	681d      	ldr	r5, [r3, #0]
 80097fe:	6862      	ldr	r2, [r4, #4]
 8009800:	2100      	movs	r1, #0
 8009802:	4628      	mov	r0, r5
 8009804:	f7f6 fce4 	bl	80001d0 <memchr>
 8009808:	b108      	cbz	r0, 800980e <_printf_i+0x1ea>
 800980a:	1b40      	subs	r0, r0, r5
 800980c:	6060      	str	r0, [r4, #4]
 800980e:	6863      	ldr	r3, [r4, #4]
 8009810:	6123      	str	r3, [r4, #16]
 8009812:	2300      	movs	r3, #0
 8009814:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009818:	e7aa      	b.n	8009770 <_printf_i+0x14c>
 800981a:	6923      	ldr	r3, [r4, #16]
 800981c:	462a      	mov	r2, r5
 800981e:	4649      	mov	r1, r9
 8009820:	4640      	mov	r0, r8
 8009822:	47d0      	blx	sl
 8009824:	3001      	adds	r0, #1
 8009826:	d0ad      	beq.n	8009784 <_printf_i+0x160>
 8009828:	6823      	ldr	r3, [r4, #0]
 800982a:	079b      	lsls	r3, r3, #30
 800982c:	d413      	bmi.n	8009856 <_printf_i+0x232>
 800982e:	68e0      	ldr	r0, [r4, #12]
 8009830:	9b03      	ldr	r3, [sp, #12]
 8009832:	4298      	cmp	r0, r3
 8009834:	bfb8      	it	lt
 8009836:	4618      	movlt	r0, r3
 8009838:	e7a6      	b.n	8009788 <_printf_i+0x164>
 800983a:	2301      	movs	r3, #1
 800983c:	4632      	mov	r2, r6
 800983e:	4649      	mov	r1, r9
 8009840:	4640      	mov	r0, r8
 8009842:	47d0      	blx	sl
 8009844:	3001      	adds	r0, #1
 8009846:	d09d      	beq.n	8009784 <_printf_i+0x160>
 8009848:	3501      	adds	r5, #1
 800984a:	68e3      	ldr	r3, [r4, #12]
 800984c:	9903      	ldr	r1, [sp, #12]
 800984e:	1a5b      	subs	r3, r3, r1
 8009850:	42ab      	cmp	r3, r5
 8009852:	dcf2      	bgt.n	800983a <_printf_i+0x216>
 8009854:	e7eb      	b.n	800982e <_printf_i+0x20a>
 8009856:	2500      	movs	r5, #0
 8009858:	f104 0619 	add.w	r6, r4, #25
 800985c:	e7f5      	b.n	800984a <_printf_i+0x226>
 800985e:	bf00      	nop
 8009860:	0800db8b 	.word	0x0800db8b
 8009864:	0800db9c 	.word	0x0800db9c

08009868 <std>:
 8009868:	2300      	movs	r3, #0
 800986a:	b510      	push	{r4, lr}
 800986c:	4604      	mov	r4, r0
 800986e:	e9c0 3300 	strd	r3, r3, [r0]
 8009872:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009876:	6083      	str	r3, [r0, #8]
 8009878:	8181      	strh	r1, [r0, #12]
 800987a:	6643      	str	r3, [r0, #100]	; 0x64
 800987c:	81c2      	strh	r2, [r0, #14]
 800987e:	6183      	str	r3, [r0, #24]
 8009880:	4619      	mov	r1, r3
 8009882:	2208      	movs	r2, #8
 8009884:	305c      	adds	r0, #92	; 0x5c
 8009886:	f000 f915 	bl	8009ab4 <memset>
 800988a:	4b0d      	ldr	r3, [pc, #52]	; (80098c0 <std+0x58>)
 800988c:	6263      	str	r3, [r4, #36]	; 0x24
 800988e:	4b0d      	ldr	r3, [pc, #52]	; (80098c4 <std+0x5c>)
 8009890:	62a3      	str	r3, [r4, #40]	; 0x28
 8009892:	4b0d      	ldr	r3, [pc, #52]	; (80098c8 <std+0x60>)
 8009894:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009896:	4b0d      	ldr	r3, [pc, #52]	; (80098cc <std+0x64>)
 8009898:	6323      	str	r3, [r4, #48]	; 0x30
 800989a:	4b0d      	ldr	r3, [pc, #52]	; (80098d0 <std+0x68>)
 800989c:	6224      	str	r4, [r4, #32]
 800989e:	429c      	cmp	r4, r3
 80098a0:	d006      	beq.n	80098b0 <std+0x48>
 80098a2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80098a6:	4294      	cmp	r4, r2
 80098a8:	d002      	beq.n	80098b0 <std+0x48>
 80098aa:	33d0      	adds	r3, #208	; 0xd0
 80098ac:	429c      	cmp	r4, r3
 80098ae:	d105      	bne.n	80098bc <std+0x54>
 80098b0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80098b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098b8:	f000 b978 	b.w	8009bac <__retarget_lock_init_recursive>
 80098bc:	bd10      	pop	{r4, pc}
 80098be:	bf00      	nop
 80098c0:	080099ed 	.word	0x080099ed
 80098c4:	08009a0f 	.word	0x08009a0f
 80098c8:	08009a47 	.word	0x08009a47
 80098cc:	08009a6b 	.word	0x08009a6b
 80098d0:	20000b1c 	.word	0x20000b1c

080098d4 <stdio_exit_handler>:
 80098d4:	4a02      	ldr	r2, [pc, #8]	; (80098e0 <stdio_exit_handler+0xc>)
 80098d6:	4903      	ldr	r1, [pc, #12]	; (80098e4 <stdio_exit_handler+0x10>)
 80098d8:	4803      	ldr	r0, [pc, #12]	; (80098e8 <stdio_exit_handler+0x14>)
 80098da:	f000 b869 	b.w	80099b0 <_fwalk_sglue>
 80098de:	bf00      	nop
 80098e0:	20000030 	.word	0x20000030
 80098e4:	0800b5b9 	.word	0x0800b5b9
 80098e8:	2000003c 	.word	0x2000003c

080098ec <cleanup_stdio>:
 80098ec:	6841      	ldr	r1, [r0, #4]
 80098ee:	4b0c      	ldr	r3, [pc, #48]	; (8009920 <cleanup_stdio+0x34>)
 80098f0:	4299      	cmp	r1, r3
 80098f2:	b510      	push	{r4, lr}
 80098f4:	4604      	mov	r4, r0
 80098f6:	d001      	beq.n	80098fc <cleanup_stdio+0x10>
 80098f8:	f001 fe5e 	bl	800b5b8 <_fflush_r>
 80098fc:	68a1      	ldr	r1, [r4, #8]
 80098fe:	4b09      	ldr	r3, [pc, #36]	; (8009924 <cleanup_stdio+0x38>)
 8009900:	4299      	cmp	r1, r3
 8009902:	d002      	beq.n	800990a <cleanup_stdio+0x1e>
 8009904:	4620      	mov	r0, r4
 8009906:	f001 fe57 	bl	800b5b8 <_fflush_r>
 800990a:	68e1      	ldr	r1, [r4, #12]
 800990c:	4b06      	ldr	r3, [pc, #24]	; (8009928 <cleanup_stdio+0x3c>)
 800990e:	4299      	cmp	r1, r3
 8009910:	d004      	beq.n	800991c <cleanup_stdio+0x30>
 8009912:	4620      	mov	r0, r4
 8009914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009918:	f001 be4e 	b.w	800b5b8 <_fflush_r>
 800991c:	bd10      	pop	{r4, pc}
 800991e:	bf00      	nop
 8009920:	20000b1c 	.word	0x20000b1c
 8009924:	20000b84 	.word	0x20000b84
 8009928:	20000bec 	.word	0x20000bec

0800992c <global_stdio_init.part.0>:
 800992c:	b510      	push	{r4, lr}
 800992e:	4b0b      	ldr	r3, [pc, #44]	; (800995c <global_stdio_init.part.0+0x30>)
 8009930:	4c0b      	ldr	r4, [pc, #44]	; (8009960 <global_stdio_init.part.0+0x34>)
 8009932:	4a0c      	ldr	r2, [pc, #48]	; (8009964 <global_stdio_init.part.0+0x38>)
 8009934:	601a      	str	r2, [r3, #0]
 8009936:	4620      	mov	r0, r4
 8009938:	2200      	movs	r2, #0
 800993a:	2104      	movs	r1, #4
 800993c:	f7ff ff94 	bl	8009868 <std>
 8009940:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009944:	2201      	movs	r2, #1
 8009946:	2109      	movs	r1, #9
 8009948:	f7ff ff8e 	bl	8009868 <std>
 800994c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009950:	2202      	movs	r2, #2
 8009952:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009956:	2112      	movs	r1, #18
 8009958:	f7ff bf86 	b.w	8009868 <std>
 800995c:	20000c54 	.word	0x20000c54
 8009960:	20000b1c 	.word	0x20000b1c
 8009964:	080098d5 	.word	0x080098d5

08009968 <__sfp_lock_acquire>:
 8009968:	4801      	ldr	r0, [pc, #4]	; (8009970 <__sfp_lock_acquire+0x8>)
 800996a:	f000 b920 	b.w	8009bae <__retarget_lock_acquire_recursive>
 800996e:	bf00      	nop
 8009970:	20000c5d 	.word	0x20000c5d

08009974 <__sfp_lock_release>:
 8009974:	4801      	ldr	r0, [pc, #4]	; (800997c <__sfp_lock_release+0x8>)
 8009976:	f000 b91b 	b.w	8009bb0 <__retarget_lock_release_recursive>
 800997a:	bf00      	nop
 800997c:	20000c5d 	.word	0x20000c5d

08009980 <__sinit>:
 8009980:	b510      	push	{r4, lr}
 8009982:	4604      	mov	r4, r0
 8009984:	f7ff fff0 	bl	8009968 <__sfp_lock_acquire>
 8009988:	6a23      	ldr	r3, [r4, #32]
 800998a:	b11b      	cbz	r3, 8009994 <__sinit+0x14>
 800998c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009990:	f7ff bff0 	b.w	8009974 <__sfp_lock_release>
 8009994:	4b04      	ldr	r3, [pc, #16]	; (80099a8 <__sinit+0x28>)
 8009996:	6223      	str	r3, [r4, #32]
 8009998:	4b04      	ldr	r3, [pc, #16]	; (80099ac <__sinit+0x2c>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d1f5      	bne.n	800998c <__sinit+0xc>
 80099a0:	f7ff ffc4 	bl	800992c <global_stdio_init.part.0>
 80099a4:	e7f2      	b.n	800998c <__sinit+0xc>
 80099a6:	bf00      	nop
 80099a8:	080098ed 	.word	0x080098ed
 80099ac:	20000c54 	.word	0x20000c54

080099b0 <_fwalk_sglue>:
 80099b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099b4:	4607      	mov	r7, r0
 80099b6:	4688      	mov	r8, r1
 80099b8:	4614      	mov	r4, r2
 80099ba:	2600      	movs	r6, #0
 80099bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80099c0:	f1b9 0901 	subs.w	r9, r9, #1
 80099c4:	d505      	bpl.n	80099d2 <_fwalk_sglue+0x22>
 80099c6:	6824      	ldr	r4, [r4, #0]
 80099c8:	2c00      	cmp	r4, #0
 80099ca:	d1f7      	bne.n	80099bc <_fwalk_sglue+0xc>
 80099cc:	4630      	mov	r0, r6
 80099ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099d2:	89ab      	ldrh	r3, [r5, #12]
 80099d4:	2b01      	cmp	r3, #1
 80099d6:	d907      	bls.n	80099e8 <_fwalk_sglue+0x38>
 80099d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80099dc:	3301      	adds	r3, #1
 80099de:	d003      	beq.n	80099e8 <_fwalk_sglue+0x38>
 80099e0:	4629      	mov	r1, r5
 80099e2:	4638      	mov	r0, r7
 80099e4:	47c0      	blx	r8
 80099e6:	4306      	orrs	r6, r0
 80099e8:	3568      	adds	r5, #104	; 0x68
 80099ea:	e7e9      	b.n	80099c0 <_fwalk_sglue+0x10>

080099ec <__sread>:
 80099ec:	b510      	push	{r4, lr}
 80099ee:	460c      	mov	r4, r1
 80099f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099f4:	f000 f88c 	bl	8009b10 <_read_r>
 80099f8:	2800      	cmp	r0, #0
 80099fa:	bfab      	itete	ge
 80099fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80099fe:	89a3      	ldrhlt	r3, [r4, #12]
 8009a00:	181b      	addge	r3, r3, r0
 8009a02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009a06:	bfac      	ite	ge
 8009a08:	6563      	strge	r3, [r4, #84]	; 0x54
 8009a0a:	81a3      	strhlt	r3, [r4, #12]
 8009a0c:	bd10      	pop	{r4, pc}

08009a0e <__swrite>:
 8009a0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a12:	461f      	mov	r7, r3
 8009a14:	898b      	ldrh	r3, [r1, #12]
 8009a16:	05db      	lsls	r3, r3, #23
 8009a18:	4605      	mov	r5, r0
 8009a1a:	460c      	mov	r4, r1
 8009a1c:	4616      	mov	r6, r2
 8009a1e:	d505      	bpl.n	8009a2c <__swrite+0x1e>
 8009a20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a24:	2302      	movs	r3, #2
 8009a26:	2200      	movs	r2, #0
 8009a28:	f000 f860 	bl	8009aec <_lseek_r>
 8009a2c:	89a3      	ldrh	r3, [r4, #12]
 8009a2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009a36:	81a3      	strh	r3, [r4, #12]
 8009a38:	4632      	mov	r2, r6
 8009a3a:	463b      	mov	r3, r7
 8009a3c:	4628      	mov	r0, r5
 8009a3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a42:	f000 b877 	b.w	8009b34 <_write_r>

08009a46 <__sseek>:
 8009a46:	b510      	push	{r4, lr}
 8009a48:	460c      	mov	r4, r1
 8009a4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a4e:	f000 f84d 	bl	8009aec <_lseek_r>
 8009a52:	1c43      	adds	r3, r0, #1
 8009a54:	89a3      	ldrh	r3, [r4, #12]
 8009a56:	bf15      	itete	ne
 8009a58:	6560      	strne	r0, [r4, #84]	; 0x54
 8009a5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009a5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009a62:	81a3      	strheq	r3, [r4, #12]
 8009a64:	bf18      	it	ne
 8009a66:	81a3      	strhne	r3, [r4, #12]
 8009a68:	bd10      	pop	{r4, pc}

08009a6a <__sclose>:
 8009a6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a6e:	f000 b82d 	b.w	8009acc <_close_r>
	...

08009a74 <_vsiprintf_r>:
 8009a74:	b500      	push	{lr}
 8009a76:	b09b      	sub	sp, #108	; 0x6c
 8009a78:	9100      	str	r1, [sp, #0]
 8009a7a:	9104      	str	r1, [sp, #16]
 8009a7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009a80:	9105      	str	r1, [sp, #20]
 8009a82:	9102      	str	r1, [sp, #8]
 8009a84:	4905      	ldr	r1, [pc, #20]	; (8009a9c <_vsiprintf_r+0x28>)
 8009a86:	9103      	str	r1, [sp, #12]
 8009a88:	4669      	mov	r1, sp
 8009a8a:	f001 fc11 	bl	800b2b0 <_svfiprintf_r>
 8009a8e:	9b00      	ldr	r3, [sp, #0]
 8009a90:	2200      	movs	r2, #0
 8009a92:	701a      	strb	r2, [r3, #0]
 8009a94:	b01b      	add	sp, #108	; 0x6c
 8009a96:	f85d fb04 	ldr.w	pc, [sp], #4
 8009a9a:	bf00      	nop
 8009a9c:	ffff0208 	.word	0xffff0208

08009aa0 <vsiprintf>:
 8009aa0:	4613      	mov	r3, r2
 8009aa2:	460a      	mov	r2, r1
 8009aa4:	4601      	mov	r1, r0
 8009aa6:	4802      	ldr	r0, [pc, #8]	; (8009ab0 <vsiprintf+0x10>)
 8009aa8:	6800      	ldr	r0, [r0, #0]
 8009aaa:	f7ff bfe3 	b.w	8009a74 <_vsiprintf_r>
 8009aae:	bf00      	nop
 8009ab0:	20000088 	.word	0x20000088

08009ab4 <memset>:
 8009ab4:	4402      	add	r2, r0
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	4293      	cmp	r3, r2
 8009aba:	d100      	bne.n	8009abe <memset+0xa>
 8009abc:	4770      	bx	lr
 8009abe:	f803 1b01 	strb.w	r1, [r3], #1
 8009ac2:	e7f9      	b.n	8009ab8 <memset+0x4>

08009ac4 <_localeconv_r>:
 8009ac4:	4800      	ldr	r0, [pc, #0]	; (8009ac8 <_localeconv_r+0x4>)
 8009ac6:	4770      	bx	lr
 8009ac8:	2000017c 	.word	0x2000017c

08009acc <_close_r>:
 8009acc:	b538      	push	{r3, r4, r5, lr}
 8009ace:	4d06      	ldr	r5, [pc, #24]	; (8009ae8 <_close_r+0x1c>)
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	4604      	mov	r4, r0
 8009ad4:	4608      	mov	r0, r1
 8009ad6:	602b      	str	r3, [r5, #0]
 8009ad8:	f7f7 f969 	bl	8000dae <_close>
 8009adc:	1c43      	adds	r3, r0, #1
 8009ade:	d102      	bne.n	8009ae6 <_close_r+0x1a>
 8009ae0:	682b      	ldr	r3, [r5, #0]
 8009ae2:	b103      	cbz	r3, 8009ae6 <_close_r+0x1a>
 8009ae4:	6023      	str	r3, [r4, #0]
 8009ae6:	bd38      	pop	{r3, r4, r5, pc}
 8009ae8:	20000c58 	.word	0x20000c58

08009aec <_lseek_r>:
 8009aec:	b538      	push	{r3, r4, r5, lr}
 8009aee:	4d07      	ldr	r5, [pc, #28]	; (8009b0c <_lseek_r+0x20>)
 8009af0:	4604      	mov	r4, r0
 8009af2:	4608      	mov	r0, r1
 8009af4:	4611      	mov	r1, r2
 8009af6:	2200      	movs	r2, #0
 8009af8:	602a      	str	r2, [r5, #0]
 8009afa:	461a      	mov	r2, r3
 8009afc:	f7f7 f97e 	bl	8000dfc <_lseek>
 8009b00:	1c43      	adds	r3, r0, #1
 8009b02:	d102      	bne.n	8009b0a <_lseek_r+0x1e>
 8009b04:	682b      	ldr	r3, [r5, #0]
 8009b06:	b103      	cbz	r3, 8009b0a <_lseek_r+0x1e>
 8009b08:	6023      	str	r3, [r4, #0]
 8009b0a:	bd38      	pop	{r3, r4, r5, pc}
 8009b0c:	20000c58 	.word	0x20000c58

08009b10 <_read_r>:
 8009b10:	b538      	push	{r3, r4, r5, lr}
 8009b12:	4d07      	ldr	r5, [pc, #28]	; (8009b30 <_read_r+0x20>)
 8009b14:	4604      	mov	r4, r0
 8009b16:	4608      	mov	r0, r1
 8009b18:	4611      	mov	r1, r2
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	602a      	str	r2, [r5, #0]
 8009b1e:	461a      	mov	r2, r3
 8009b20:	f7f7 f90c 	bl	8000d3c <_read>
 8009b24:	1c43      	adds	r3, r0, #1
 8009b26:	d102      	bne.n	8009b2e <_read_r+0x1e>
 8009b28:	682b      	ldr	r3, [r5, #0]
 8009b2a:	b103      	cbz	r3, 8009b2e <_read_r+0x1e>
 8009b2c:	6023      	str	r3, [r4, #0]
 8009b2e:	bd38      	pop	{r3, r4, r5, pc}
 8009b30:	20000c58 	.word	0x20000c58

08009b34 <_write_r>:
 8009b34:	b538      	push	{r3, r4, r5, lr}
 8009b36:	4d07      	ldr	r5, [pc, #28]	; (8009b54 <_write_r+0x20>)
 8009b38:	4604      	mov	r4, r0
 8009b3a:	4608      	mov	r0, r1
 8009b3c:	4611      	mov	r1, r2
 8009b3e:	2200      	movs	r2, #0
 8009b40:	602a      	str	r2, [r5, #0]
 8009b42:	461a      	mov	r2, r3
 8009b44:	f7f7 f917 	bl	8000d76 <_write>
 8009b48:	1c43      	adds	r3, r0, #1
 8009b4a:	d102      	bne.n	8009b52 <_write_r+0x1e>
 8009b4c:	682b      	ldr	r3, [r5, #0]
 8009b4e:	b103      	cbz	r3, 8009b52 <_write_r+0x1e>
 8009b50:	6023      	str	r3, [r4, #0]
 8009b52:	bd38      	pop	{r3, r4, r5, pc}
 8009b54:	20000c58 	.word	0x20000c58

08009b58 <__errno>:
 8009b58:	4b01      	ldr	r3, [pc, #4]	; (8009b60 <__errno+0x8>)
 8009b5a:	6818      	ldr	r0, [r3, #0]
 8009b5c:	4770      	bx	lr
 8009b5e:	bf00      	nop
 8009b60:	20000088 	.word	0x20000088

08009b64 <__libc_init_array>:
 8009b64:	b570      	push	{r4, r5, r6, lr}
 8009b66:	4d0d      	ldr	r5, [pc, #52]	; (8009b9c <__libc_init_array+0x38>)
 8009b68:	4c0d      	ldr	r4, [pc, #52]	; (8009ba0 <__libc_init_array+0x3c>)
 8009b6a:	1b64      	subs	r4, r4, r5
 8009b6c:	10a4      	asrs	r4, r4, #2
 8009b6e:	2600      	movs	r6, #0
 8009b70:	42a6      	cmp	r6, r4
 8009b72:	d109      	bne.n	8009b88 <__libc_init_array+0x24>
 8009b74:	4d0b      	ldr	r5, [pc, #44]	; (8009ba4 <__libc_init_array+0x40>)
 8009b76:	4c0c      	ldr	r4, [pc, #48]	; (8009ba8 <__libc_init_array+0x44>)
 8009b78:	f002 f896 	bl	800bca8 <_init>
 8009b7c:	1b64      	subs	r4, r4, r5
 8009b7e:	10a4      	asrs	r4, r4, #2
 8009b80:	2600      	movs	r6, #0
 8009b82:	42a6      	cmp	r6, r4
 8009b84:	d105      	bne.n	8009b92 <__libc_init_array+0x2e>
 8009b86:	bd70      	pop	{r4, r5, r6, pc}
 8009b88:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b8c:	4798      	blx	r3
 8009b8e:	3601      	adds	r6, #1
 8009b90:	e7ee      	b.n	8009b70 <__libc_init_array+0xc>
 8009b92:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b96:	4798      	blx	r3
 8009b98:	3601      	adds	r6, #1
 8009b9a:	e7f2      	b.n	8009b82 <__libc_init_array+0x1e>
 8009b9c:	0800ded0 	.word	0x0800ded0
 8009ba0:	0800ded0 	.word	0x0800ded0
 8009ba4:	0800ded0 	.word	0x0800ded0
 8009ba8:	0800ded4 	.word	0x0800ded4

08009bac <__retarget_lock_init_recursive>:
 8009bac:	4770      	bx	lr

08009bae <__retarget_lock_acquire_recursive>:
 8009bae:	4770      	bx	lr

08009bb0 <__retarget_lock_release_recursive>:
 8009bb0:	4770      	bx	lr

08009bb2 <memcpy>:
 8009bb2:	440a      	add	r2, r1
 8009bb4:	4291      	cmp	r1, r2
 8009bb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8009bba:	d100      	bne.n	8009bbe <memcpy+0xc>
 8009bbc:	4770      	bx	lr
 8009bbe:	b510      	push	{r4, lr}
 8009bc0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009bc4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009bc8:	4291      	cmp	r1, r2
 8009bca:	d1f9      	bne.n	8009bc0 <memcpy+0xe>
 8009bcc:	bd10      	pop	{r4, pc}
	...

08009bd0 <__assert_func>:
 8009bd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009bd2:	4614      	mov	r4, r2
 8009bd4:	461a      	mov	r2, r3
 8009bd6:	4b09      	ldr	r3, [pc, #36]	; (8009bfc <__assert_func+0x2c>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	4605      	mov	r5, r0
 8009bdc:	68d8      	ldr	r0, [r3, #12]
 8009bde:	b14c      	cbz	r4, 8009bf4 <__assert_func+0x24>
 8009be0:	4b07      	ldr	r3, [pc, #28]	; (8009c00 <__assert_func+0x30>)
 8009be2:	9100      	str	r1, [sp, #0]
 8009be4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009be8:	4906      	ldr	r1, [pc, #24]	; (8009c04 <__assert_func+0x34>)
 8009bea:	462b      	mov	r3, r5
 8009bec:	f001 fd0c 	bl	800b608 <fiprintf>
 8009bf0:	f001 fd46 	bl	800b680 <abort>
 8009bf4:	4b04      	ldr	r3, [pc, #16]	; (8009c08 <__assert_func+0x38>)
 8009bf6:	461c      	mov	r4, r3
 8009bf8:	e7f3      	b.n	8009be2 <__assert_func+0x12>
 8009bfa:	bf00      	nop
 8009bfc:	20000088 	.word	0x20000088
 8009c00:	0800dbad 	.word	0x0800dbad
 8009c04:	0800dbba 	.word	0x0800dbba
 8009c08:	0800dbe8 	.word	0x0800dbe8

08009c0c <quorem>:
 8009c0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c10:	6903      	ldr	r3, [r0, #16]
 8009c12:	690c      	ldr	r4, [r1, #16]
 8009c14:	42a3      	cmp	r3, r4
 8009c16:	4607      	mov	r7, r0
 8009c18:	db7e      	blt.n	8009d18 <quorem+0x10c>
 8009c1a:	3c01      	subs	r4, #1
 8009c1c:	f101 0814 	add.w	r8, r1, #20
 8009c20:	f100 0514 	add.w	r5, r0, #20
 8009c24:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009c28:	9301      	str	r3, [sp, #4]
 8009c2a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009c2e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009c32:	3301      	adds	r3, #1
 8009c34:	429a      	cmp	r2, r3
 8009c36:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009c3a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009c3e:	fbb2 f6f3 	udiv	r6, r2, r3
 8009c42:	d331      	bcc.n	8009ca8 <quorem+0x9c>
 8009c44:	f04f 0e00 	mov.w	lr, #0
 8009c48:	4640      	mov	r0, r8
 8009c4a:	46ac      	mov	ip, r5
 8009c4c:	46f2      	mov	sl, lr
 8009c4e:	f850 2b04 	ldr.w	r2, [r0], #4
 8009c52:	b293      	uxth	r3, r2
 8009c54:	fb06 e303 	mla	r3, r6, r3, lr
 8009c58:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009c5c:	0c1a      	lsrs	r2, r3, #16
 8009c5e:	b29b      	uxth	r3, r3
 8009c60:	ebaa 0303 	sub.w	r3, sl, r3
 8009c64:	f8dc a000 	ldr.w	sl, [ip]
 8009c68:	fa13 f38a 	uxtah	r3, r3, sl
 8009c6c:	fb06 220e 	mla	r2, r6, lr, r2
 8009c70:	9300      	str	r3, [sp, #0]
 8009c72:	9b00      	ldr	r3, [sp, #0]
 8009c74:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009c78:	b292      	uxth	r2, r2
 8009c7a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009c7e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009c82:	f8bd 3000 	ldrh.w	r3, [sp]
 8009c86:	4581      	cmp	r9, r0
 8009c88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009c8c:	f84c 3b04 	str.w	r3, [ip], #4
 8009c90:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009c94:	d2db      	bcs.n	8009c4e <quorem+0x42>
 8009c96:	f855 300b 	ldr.w	r3, [r5, fp]
 8009c9a:	b92b      	cbnz	r3, 8009ca8 <quorem+0x9c>
 8009c9c:	9b01      	ldr	r3, [sp, #4]
 8009c9e:	3b04      	subs	r3, #4
 8009ca0:	429d      	cmp	r5, r3
 8009ca2:	461a      	mov	r2, r3
 8009ca4:	d32c      	bcc.n	8009d00 <quorem+0xf4>
 8009ca6:	613c      	str	r4, [r7, #16]
 8009ca8:	4638      	mov	r0, r7
 8009caa:	f001 f9a7 	bl	800affc <__mcmp>
 8009cae:	2800      	cmp	r0, #0
 8009cb0:	db22      	blt.n	8009cf8 <quorem+0xec>
 8009cb2:	3601      	adds	r6, #1
 8009cb4:	4629      	mov	r1, r5
 8009cb6:	2000      	movs	r0, #0
 8009cb8:	f858 2b04 	ldr.w	r2, [r8], #4
 8009cbc:	f8d1 c000 	ldr.w	ip, [r1]
 8009cc0:	b293      	uxth	r3, r2
 8009cc2:	1ac3      	subs	r3, r0, r3
 8009cc4:	0c12      	lsrs	r2, r2, #16
 8009cc6:	fa13 f38c 	uxtah	r3, r3, ip
 8009cca:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009cce:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009cd2:	b29b      	uxth	r3, r3
 8009cd4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009cd8:	45c1      	cmp	r9, r8
 8009cda:	f841 3b04 	str.w	r3, [r1], #4
 8009cde:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009ce2:	d2e9      	bcs.n	8009cb8 <quorem+0xac>
 8009ce4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009ce8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009cec:	b922      	cbnz	r2, 8009cf8 <quorem+0xec>
 8009cee:	3b04      	subs	r3, #4
 8009cf0:	429d      	cmp	r5, r3
 8009cf2:	461a      	mov	r2, r3
 8009cf4:	d30a      	bcc.n	8009d0c <quorem+0x100>
 8009cf6:	613c      	str	r4, [r7, #16]
 8009cf8:	4630      	mov	r0, r6
 8009cfa:	b003      	add	sp, #12
 8009cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d00:	6812      	ldr	r2, [r2, #0]
 8009d02:	3b04      	subs	r3, #4
 8009d04:	2a00      	cmp	r2, #0
 8009d06:	d1ce      	bne.n	8009ca6 <quorem+0x9a>
 8009d08:	3c01      	subs	r4, #1
 8009d0a:	e7c9      	b.n	8009ca0 <quorem+0x94>
 8009d0c:	6812      	ldr	r2, [r2, #0]
 8009d0e:	3b04      	subs	r3, #4
 8009d10:	2a00      	cmp	r2, #0
 8009d12:	d1f0      	bne.n	8009cf6 <quorem+0xea>
 8009d14:	3c01      	subs	r4, #1
 8009d16:	e7eb      	b.n	8009cf0 <quorem+0xe4>
 8009d18:	2000      	movs	r0, #0
 8009d1a:	e7ee      	b.n	8009cfa <quorem+0xee>
 8009d1c:	0000      	movs	r0, r0
	...

08009d20 <_dtoa_r>:
 8009d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d24:	ed2d 8b04 	vpush	{d8-d9}
 8009d28:	69c5      	ldr	r5, [r0, #28]
 8009d2a:	b093      	sub	sp, #76	; 0x4c
 8009d2c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009d30:	ec57 6b10 	vmov	r6, r7, d0
 8009d34:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009d38:	9107      	str	r1, [sp, #28]
 8009d3a:	4604      	mov	r4, r0
 8009d3c:	920a      	str	r2, [sp, #40]	; 0x28
 8009d3e:	930d      	str	r3, [sp, #52]	; 0x34
 8009d40:	b975      	cbnz	r5, 8009d60 <_dtoa_r+0x40>
 8009d42:	2010      	movs	r0, #16
 8009d44:	f000 fe2a 	bl	800a99c <malloc>
 8009d48:	4602      	mov	r2, r0
 8009d4a:	61e0      	str	r0, [r4, #28]
 8009d4c:	b920      	cbnz	r0, 8009d58 <_dtoa_r+0x38>
 8009d4e:	4bae      	ldr	r3, [pc, #696]	; (800a008 <_dtoa_r+0x2e8>)
 8009d50:	21ef      	movs	r1, #239	; 0xef
 8009d52:	48ae      	ldr	r0, [pc, #696]	; (800a00c <_dtoa_r+0x2ec>)
 8009d54:	f7ff ff3c 	bl	8009bd0 <__assert_func>
 8009d58:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009d5c:	6005      	str	r5, [r0, #0]
 8009d5e:	60c5      	str	r5, [r0, #12]
 8009d60:	69e3      	ldr	r3, [r4, #28]
 8009d62:	6819      	ldr	r1, [r3, #0]
 8009d64:	b151      	cbz	r1, 8009d7c <_dtoa_r+0x5c>
 8009d66:	685a      	ldr	r2, [r3, #4]
 8009d68:	604a      	str	r2, [r1, #4]
 8009d6a:	2301      	movs	r3, #1
 8009d6c:	4093      	lsls	r3, r2
 8009d6e:	608b      	str	r3, [r1, #8]
 8009d70:	4620      	mov	r0, r4
 8009d72:	f000 ff07 	bl	800ab84 <_Bfree>
 8009d76:	69e3      	ldr	r3, [r4, #28]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	601a      	str	r2, [r3, #0]
 8009d7c:	1e3b      	subs	r3, r7, #0
 8009d7e:	bfbb      	ittet	lt
 8009d80:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009d84:	9303      	strlt	r3, [sp, #12]
 8009d86:	2300      	movge	r3, #0
 8009d88:	2201      	movlt	r2, #1
 8009d8a:	bfac      	ite	ge
 8009d8c:	f8c8 3000 	strge.w	r3, [r8]
 8009d90:	f8c8 2000 	strlt.w	r2, [r8]
 8009d94:	4b9e      	ldr	r3, [pc, #632]	; (800a010 <_dtoa_r+0x2f0>)
 8009d96:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009d9a:	ea33 0308 	bics.w	r3, r3, r8
 8009d9e:	d11b      	bne.n	8009dd8 <_dtoa_r+0xb8>
 8009da0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009da2:	f242 730f 	movw	r3, #9999	; 0x270f
 8009da6:	6013      	str	r3, [r2, #0]
 8009da8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009dac:	4333      	orrs	r3, r6
 8009dae:	f000 8593 	beq.w	800a8d8 <_dtoa_r+0xbb8>
 8009db2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009db4:	b963      	cbnz	r3, 8009dd0 <_dtoa_r+0xb0>
 8009db6:	4b97      	ldr	r3, [pc, #604]	; (800a014 <_dtoa_r+0x2f4>)
 8009db8:	e027      	b.n	8009e0a <_dtoa_r+0xea>
 8009dba:	4b97      	ldr	r3, [pc, #604]	; (800a018 <_dtoa_r+0x2f8>)
 8009dbc:	9300      	str	r3, [sp, #0]
 8009dbe:	3308      	adds	r3, #8
 8009dc0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009dc2:	6013      	str	r3, [r2, #0]
 8009dc4:	9800      	ldr	r0, [sp, #0]
 8009dc6:	b013      	add	sp, #76	; 0x4c
 8009dc8:	ecbd 8b04 	vpop	{d8-d9}
 8009dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dd0:	4b90      	ldr	r3, [pc, #576]	; (800a014 <_dtoa_r+0x2f4>)
 8009dd2:	9300      	str	r3, [sp, #0]
 8009dd4:	3303      	adds	r3, #3
 8009dd6:	e7f3      	b.n	8009dc0 <_dtoa_r+0xa0>
 8009dd8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009ddc:	2200      	movs	r2, #0
 8009dde:	ec51 0b17 	vmov	r0, r1, d7
 8009de2:	eeb0 8a47 	vmov.f32	s16, s14
 8009de6:	eef0 8a67 	vmov.f32	s17, s15
 8009dea:	2300      	movs	r3, #0
 8009dec:	f7f6 fe6c 	bl	8000ac8 <__aeabi_dcmpeq>
 8009df0:	4681      	mov	r9, r0
 8009df2:	b160      	cbz	r0, 8009e0e <_dtoa_r+0xee>
 8009df4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009df6:	2301      	movs	r3, #1
 8009df8:	6013      	str	r3, [r2, #0]
 8009dfa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	f000 8568 	beq.w	800a8d2 <_dtoa_r+0xbb2>
 8009e02:	4b86      	ldr	r3, [pc, #536]	; (800a01c <_dtoa_r+0x2fc>)
 8009e04:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009e06:	6013      	str	r3, [r2, #0]
 8009e08:	3b01      	subs	r3, #1
 8009e0a:	9300      	str	r3, [sp, #0]
 8009e0c:	e7da      	b.n	8009dc4 <_dtoa_r+0xa4>
 8009e0e:	aa10      	add	r2, sp, #64	; 0x40
 8009e10:	a911      	add	r1, sp, #68	; 0x44
 8009e12:	4620      	mov	r0, r4
 8009e14:	eeb0 0a48 	vmov.f32	s0, s16
 8009e18:	eef0 0a68 	vmov.f32	s1, s17
 8009e1c:	f001 f994 	bl	800b148 <__d2b>
 8009e20:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009e24:	4682      	mov	sl, r0
 8009e26:	2d00      	cmp	r5, #0
 8009e28:	d07f      	beq.n	8009f2a <_dtoa_r+0x20a>
 8009e2a:	ee18 3a90 	vmov	r3, s17
 8009e2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009e32:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009e36:	ec51 0b18 	vmov	r0, r1, d8
 8009e3a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009e3e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009e42:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009e46:	4619      	mov	r1, r3
 8009e48:	2200      	movs	r2, #0
 8009e4a:	4b75      	ldr	r3, [pc, #468]	; (800a020 <_dtoa_r+0x300>)
 8009e4c:	f7f6 fa1c 	bl	8000288 <__aeabi_dsub>
 8009e50:	a367      	add	r3, pc, #412	; (adr r3, 8009ff0 <_dtoa_r+0x2d0>)
 8009e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e56:	f7f6 fbcf 	bl	80005f8 <__aeabi_dmul>
 8009e5a:	a367      	add	r3, pc, #412	; (adr r3, 8009ff8 <_dtoa_r+0x2d8>)
 8009e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e60:	f7f6 fa14 	bl	800028c <__adddf3>
 8009e64:	4606      	mov	r6, r0
 8009e66:	4628      	mov	r0, r5
 8009e68:	460f      	mov	r7, r1
 8009e6a:	f7f6 fb5b 	bl	8000524 <__aeabi_i2d>
 8009e6e:	a364      	add	r3, pc, #400	; (adr r3, 800a000 <_dtoa_r+0x2e0>)
 8009e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e74:	f7f6 fbc0 	bl	80005f8 <__aeabi_dmul>
 8009e78:	4602      	mov	r2, r0
 8009e7a:	460b      	mov	r3, r1
 8009e7c:	4630      	mov	r0, r6
 8009e7e:	4639      	mov	r1, r7
 8009e80:	f7f6 fa04 	bl	800028c <__adddf3>
 8009e84:	4606      	mov	r6, r0
 8009e86:	460f      	mov	r7, r1
 8009e88:	f7f6 fe66 	bl	8000b58 <__aeabi_d2iz>
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	4683      	mov	fp, r0
 8009e90:	2300      	movs	r3, #0
 8009e92:	4630      	mov	r0, r6
 8009e94:	4639      	mov	r1, r7
 8009e96:	f7f6 fe21 	bl	8000adc <__aeabi_dcmplt>
 8009e9a:	b148      	cbz	r0, 8009eb0 <_dtoa_r+0x190>
 8009e9c:	4658      	mov	r0, fp
 8009e9e:	f7f6 fb41 	bl	8000524 <__aeabi_i2d>
 8009ea2:	4632      	mov	r2, r6
 8009ea4:	463b      	mov	r3, r7
 8009ea6:	f7f6 fe0f 	bl	8000ac8 <__aeabi_dcmpeq>
 8009eaa:	b908      	cbnz	r0, 8009eb0 <_dtoa_r+0x190>
 8009eac:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009eb0:	f1bb 0f16 	cmp.w	fp, #22
 8009eb4:	d857      	bhi.n	8009f66 <_dtoa_r+0x246>
 8009eb6:	4b5b      	ldr	r3, [pc, #364]	; (800a024 <_dtoa_r+0x304>)
 8009eb8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec0:	ec51 0b18 	vmov	r0, r1, d8
 8009ec4:	f7f6 fe0a 	bl	8000adc <__aeabi_dcmplt>
 8009ec8:	2800      	cmp	r0, #0
 8009eca:	d04e      	beq.n	8009f6a <_dtoa_r+0x24a>
 8009ecc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	930c      	str	r3, [sp, #48]	; 0x30
 8009ed4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009ed6:	1b5b      	subs	r3, r3, r5
 8009ed8:	1e5a      	subs	r2, r3, #1
 8009eda:	bf45      	ittet	mi
 8009edc:	f1c3 0301 	rsbmi	r3, r3, #1
 8009ee0:	9305      	strmi	r3, [sp, #20]
 8009ee2:	2300      	movpl	r3, #0
 8009ee4:	2300      	movmi	r3, #0
 8009ee6:	9206      	str	r2, [sp, #24]
 8009ee8:	bf54      	ite	pl
 8009eea:	9305      	strpl	r3, [sp, #20]
 8009eec:	9306      	strmi	r3, [sp, #24]
 8009eee:	f1bb 0f00 	cmp.w	fp, #0
 8009ef2:	db3c      	blt.n	8009f6e <_dtoa_r+0x24e>
 8009ef4:	9b06      	ldr	r3, [sp, #24]
 8009ef6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8009efa:	445b      	add	r3, fp
 8009efc:	9306      	str	r3, [sp, #24]
 8009efe:	2300      	movs	r3, #0
 8009f00:	9308      	str	r3, [sp, #32]
 8009f02:	9b07      	ldr	r3, [sp, #28]
 8009f04:	2b09      	cmp	r3, #9
 8009f06:	d868      	bhi.n	8009fda <_dtoa_r+0x2ba>
 8009f08:	2b05      	cmp	r3, #5
 8009f0a:	bfc4      	itt	gt
 8009f0c:	3b04      	subgt	r3, #4
 8009f0e:	9307      	strgt	r3, [sp, #28]
 8009f10:	9b07      	ldr	r3, [sp, #28]
 8009f12:	f1a3 0302 	sub.w	r3, r3, #2
 8009f16:	bfcc      	ite	gt
 8009f18:	2500      	movgt	r5, #0
 8009f1a:	2501      	movle	r5, #1
 8009f1c:	2b03      	cmp	r3, #3
 8009f1e:	f200 8085 	bhi.w	800a02c <_dtoa_r+0x30c>
 8009f22:	e8df f003 	tbb	[pc, r3]
 8009f26:	3b2e      	.short	0x3b2e
 8009f28:	5839      	.short	0x5839
 8009f2a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009f2e:	441d      	add	r5, r3
 8009f30:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009f34:	2b20      	cmp	r3, #32
 8009f36:	bfc1      	itttt	gt
 8009f38:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009f3c:	fa08 f803 	lslgt.w	r8, r8, r3
 8009f40:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8009f44:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009f48:	bfd6      	itet	le
 8009f4a:	f1c3 0320 	rsble	r3, r3, #32
 8009f4e:	ea48 0003 	orrgt.w	r0, r8, r3
 8009f52:	fa06 f003 	lslle.w	r0, r6, r3
 8009f56:	f7f6 fad5 	bl	8000504 <__aeabi_ui2d>
 8009f5a:	2201      	movs	r2, #1
 8009f5c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009f60:	3d01      	subs	r5, #1
 8009f62:	920e      	str	r2, [sp, #56]	; 0x38
 8009f64:	e76f      	b.n	8009e46 <_dtoa_r+0x126>
 8009f66:	2301      	movs	r3, #1
 8009f68:	e7b3      	b.n	8009ed2 <_dtoa_r+0x1b2>
 8009f6a:	900c      	str	r0, [sp, #48]	; 0x30
 8009f6c:	e7b2      	b.n	8009ed4 <_dtoa_r+0x1b4>
 8009f6e:	9b05      	ldr	r3, [sp, #20]
 8009f70:	eba3 030b 	sub.w	r3, r3, fp
 8009f74:	9305      	str	r3, [sp, #20]
 8009f76:	f1cb 0300 	rsb	r3, fp, #0
 8009f7a:	9308      	str	r3, [sp, #32]
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f80:	e7bf      	b.n	8009f02 <_dtoa_r+0x1e2>
 8009f82:	2300      	movs	r3, #0
 8009f84:	9309      	str	r3, [sp, #36]	; 0x24
 8009f86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	dc52      	bgt.n	800a032 <_dtoa_r+0x312>
 8009f8c:	2301      	movs	r3, #1
 8009f8e:	9301      	str	r3, [sp, #4]
 8009f90:	9304      	str	r3, [sp, #16]
 8009f92:	461a      	mov	r2, r3
 8009f94:	920a      	str	r2, [sp, #40]	; 0x28
 8009f96:	e00b      	b.n	8009fb0 <_dtoa_r+0x290>
 8009f98:	2301      	movs	r3, #1
 8009f9a:	e7f3      	b.n	8009f84 <_dtoa_r+0x264>
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	9309      	str	r3, [sp, #36]	; 0x24
 8009fa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fa2:	445b      	add	r3, fp
 8009fa4:	9301      	str	r3, [sp, #4]
 8009fa6:	3301      	adds	r3, #1
 8009fa8:	2b01      	cmp	r3, #1
 8009faa:	9304      	str	r3, [sp, #16]
 8009fac:	bfb8      	it	lt
 8009fae:	2301      	movlt	r3, #1
 8009fb0:	69e0      	ldr	r0, [r4, #28]
 8009fb2:	2100      	movs	r1, #0
 8009fb4:	2204      	movs	r2, #4
 8009fb6:	f102 0614 	add.w	r6, r2, #20
 8009fba:	429e      	cmp	r6, r3
 8009fbc:	d93d      	bls.n	800a03a <_dtoa_r+0x31a>
 8009fbe:	6041      	str	r1, [r0, #4]
 8009fc0:	4620      	mov	r0, r4
 8009fc2:	f000 fd9f 	bl	800ab04 <_Balloc>
 8009fc6:	9000      	str	r0, [sp, #0]
 8009fc8:	2800      	cmp	r0, #0
 8009fca:	d139      	bne.n	800a040 <_dtoa_r+0x320>
 8009fcc:	4b16      	ldr	r3, [pc, #88]	; (800a028 <_dtoa_r+0x308>)
 8009fce:	4602      	mov	r2, r0
 8009fd0:	f240 11af 	movw	r1, #431	; 0x1af
 8009fd4:	e6bd      	b.n	8009d52 <_dtoa_r+0x32>
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	e7e1      	b.n	8009f9e <_dtoa_r+0x27e>
 8009fda:	2501      	movs	r5, #1
 8009fdc:	2300      	movs	r3, #0
 8009fde:	9307      	str	r3, [sp, #28]
 8009fe0:	9509      	str	r5, [sp, #36]	; 0x24
 8009fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8009fe6:	9301      	str	r3, [sp, #4]
 8009fe8:	9304      	str	r3, [sp, #16]
 8009fea:	2200      	movs	r2, #0
 8009fec:	2312      	movs	r3, #18
 8009fee:	e7d1      	b.n	8009f94 <_dtoa_r+0x274>
 8009ff0:	636f4361 	.word	0x636f4361
 8009ff4:	3fd287a7 	.word	0x3fd287a7
 8009ff8:	8b60c8b3 	.word	0x8b60c8b3
 8009ffc:	3fc68a28 	.word	0x3fc68a28
 800a000:	509f79fb 	.word	0x509f79fb
 800a004:	3fd34413 	.word	0x3fd34413
 800a008:	0800db0a 	.word	0x0800db0a
 800a00c:	0800dbf6 	.word	0x0800dbf6
 800a010:	7ff00000 	.word	0x7ff00000
 800a014:	0800dbf2 	.word	0x0800dbf2
 800a018:	0800dbe9 	.word	0x0800dbe9
 800a01c:	0800db8a 	.word	0x0800db8a
 800a020:	3ff80000 	.word	0x3ff80000
 800a024:	0800dce0 	.word	0x0800dce0
 800a028:	0800dc4e 	.word	0x0800dc4e
 800a02c:	2301      	movs	r3, #1
 800a02e:	9309      	str	r3, [sp, #36]	; 0x24
 800a030:	e7d7      	b.n	8009fe2 <_dtoa_r+0x2c2>
 800a032:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a034:	9301      	str	r3, [sp, #4]
 800a036:	9304      	str	r3, [sp, #16]
 800a038:	e7ba      	b.n	8009fb0 <_dtoa_r+0x290>
 800a03a:	3101      	adds	r1, #1
 800a03c:	0052      	lsls	r2, r2, #1
 800a03e:	e7ba      	b.n	8009fb6 <_dtoa_r+0x296>
 800a040:	69e3      	ldr	r3, [r4, #28]
 800a042:	9a00      	ldr	r2, [sp, #0]
 800a044:	601a      	str	r2, [r3, #0]
 800a046:	9b04      	ldr	r3, [sp, #16]
 800a048:	2b0e      	cmp	r3, #14
 800a04a:	f200 80a8 	bhi.w	800a19e <_dtoa_r+0x47e>
 800a04e:	2d00      	cmp	r5, #0
 800a050:	f000 80a5 	beq.w	800a19e <_dtoa_r+0x47e>
 800a054:	f1bb 0f00 	cmp.w	fp, #0
 800a058:	dd38      	ble.n	800a0cc <_dtoa_r+0x3ac>
 800a05a:	4bc0      	ldr	r3, [pc, #768]	; (800a35c <_dtoa_r+0x63c>)
 800a05c:	f00b 020f 	and.w	r2, fp, #15
 800a060:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a064:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a068:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a06c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800a070:	d019      	beq.n	800a0a6 <_dtoa_r+0x386>
 800a072:	4bbb      	ldr	r3, [pc, #748]	; (800a360 <_dtoa_r+0x640>)
 800a074:	ec51 0b18 	vmov	r0, r1, d8
 800a078:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a07c:	f7f6 fbe6 	bl	800084c <__aeabi_ddiv>
 800a080:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a084:	f008 080f 	and.w	r8, r8, #15
 800a088:	2503      	movs	r5, #3
 800a08a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800a360 <_dtoa_r+0x640>
 800a08e:	f1b8 0f00 	cmp.w	r8, #0
 800a092:	d10a      	bne.n	800a0aa <_dtoa_r+0x38a>
 800a094:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a098:	4632      	mov	r2, r6
 800a09a:	463b      	mov	r3, r7
 800a09c:	f7f6 fbd6 	bl	800084c <__aeabi_ddiv>
 800a0a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a0a4:	e02b      	b.n	800a0fe <_dtoa_r+0x3de>
 800a0a6:	2502      	movs	r5, #2
 800a0a8:	e7ef      	b.n	800a08a <_dtoa_r+0x36a>
 800a0aa:	f018 0f01 	tst.w	r8, #1
 800a0ae:	d008      	beq.n	800a0c2 <_dtoa_r+0x3a2>
 800a0b0:	4630      	mov	r0, r6
 800a0b2:	4639      	mov	r1, r7
 800a0b4:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a0b8:	f7f6 fa9e 	bl	80005f8 <__aeabi_dmul>
 800a0bc:	3501      	adds	r5, #1
 800a0be:	4606      	mov	r6, r0
 800a0c0:	460f      	mov	r7, r1
 800a0c2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a0c6:	f109 0908 	add.w	r9, r9, #8
 800a0ca:	e7e0      	b.n	800a08e <_dtoa_r+0x36e>
 800a0cc:	f000 809f 	beq.w	800a20e <_dtoa_r+0x4ee>
 800a0d0:	f1cb 0600 	rsb	r6, fp, #0
 800a0d4:	4ba1      	ldr	r3, [pc, #644]	; (800a35c <_dtoa_r+0x63c>)
 800a0d6:	4fa2      	ldr	r7, [pc, #648]	; (800a360 <_dtoa_r+0x640>)
 800a0d8:	f006 020f 	and.w	r2, r6, #15
 800a0dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e4:	ec51 0b18 	vmov	r0, r1, d8
 800a0e8:	f7f6 fa86 	bl	80005f8 <__aeabi_dmul>
 800a0ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a0f0:	1136      	asrs	r6, r6, #4
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	2502      	movs	r5, #2
 800a0f6:	2e00      	cmp	r6, #0
 800a0f8:	d17e      	bne.n	800a1f8 <_dtoa_r+0x4d8>
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d1d0      	bne.n	800a0a0 <_dtoa_r+0x380>
 800a0fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a100:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a104:	2b00      	cmp	r3, #0
 800a106:	f000 8084 	beq.w	800a212 <_dtoa_r+0x4f2>
 800a10a:	4b96      	ldr	r3, [pc, #600]	; (800a364 <_dtoa_r+0x644>)
 800a10c:	2200      	movs	r2, #0
 800a10e:	4640      	mov	r0, r8
 800a110:	4649      	mov	r1, r9
 800a112:	f7f6 fce3 	bl	8000adc <__aeabi_dcmplt>
 800a116:	2800      	cmp	r0, #0
 800a118:	d07b      	beq.n	800a212 <_dtoa_r+0x4f2>
 800a11a:	9b04      	ldr	r3, [sp, #16]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d078      	beq.n	800a212 <_dtoa_r+0x4f2>
 800a120:	9b01      	ldr	r3, [sp, #4]
 800a122:	2b00      	cmp	r3, #0
 800a124:	dd39      	ble.n	800a19a <_dtoa_r+0x47a>
 800a126:	4b90      	ldr	r3, [pc, #576]	; (800a368 <_dtoa_r+0x648>)
 800a128:	2200      	movs	r2, #0
 800a12a:	4640      	mov	r0, r8
 800a12c:	4649      	mov	r1, r9
 800a12e:	f7f6 fa63 	bl	80005f8 <__aeabi_dmul>
 800a132:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a136:	9e01      	ldr	r6, [sp, #4]
 800a138:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a13c:	3501      	adds	r5, #1
 800a13e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a142:	4628      	mov	r0, r5
 800a144:	f7f6 f9ee 	bl	8000524 <__aeabi_i2d>
 800a148:	4642      	mov	r2, r8
 800a14a:	464b      	mov	r3, r9
 800a14c:	f7f6 fa54 	bl	80005f8 <__aeabi_dmul>
 800a150:	4b86      	ldr	r3, [pc, #536]	; (800a36c <_dtoa_r+0x64c>)
 800a152:	2200      	movs	r2, #0
 800a154:	f7f6 f89a 	bl	800028c <__adddf3>
 800a158:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a15c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a160:	9303      	str	r3, [sp, #12]
 800a162:	2e00      	cmp	r6, #0
 800a164:	d158      	bne.n	800a218 <_dtoa_r+0x4f8>
 800a166:	4b82      	ldr	r3, [pc, #520]	; (800a370 <_dtoa_r+0x650>)
 800a168:	2200      	movs	r2, #0
 800a16a:	4640      	mov	r0, r8
 800a16c:	4649      	mov	r1, r9
 800a16e:	f7f6 f88b 	bl	8000288 <__aeabi_dsub>
 800a172:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a176:	4680      	mov	r8, r0
 800a178:	4689      	mov	r9, r1
 800a17a:	f7f6 fccd 	bl	8000b18 <__aeabi_dcmpgt>
 800a17e:	2800      	cmp	r0, #0
 800a180:	f040 8296 	bne.w	800a6b0 <_dtoa_r+0x990>
 800a184:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a188:	4640      	mov	r0, r8
 800a18a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a18e:	4649      	mov	r1, r9
 800a190:	f7f6 fca4 	bl	8000adc <__aeabi_dcmplt>
 800a194:	2800      	cmp	r0, #0
 800a196:	f040 8289 	bne.w	800a6ac <_dtoa_r+0x98c>
 800a19a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a19e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	f2c0 814e 	blt.w	800a442 <_dtoa_r+0x722>
 800a1a6:	f1bb 0f0e 	cmp.w	fp, #14
 800a1aa:	f300 814a 	bgt.w	800a442 <_dtoa_r+0x722>
 800a1ae:	4b6b      	ldr	r3, [pc, #428]	; (800a35c <_dtoa_r+0x63c>)
 800a1b0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a1b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a1b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	f280 80dc 	bge.w	800a378 <_dtoa_r+0x658>
 800a1c0:	9b04      	ldr	r3, [sp, #16]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	f300 80d8 	bgt.w	800a378 <_dtoa_r+0x658>
 800a1c8:	f040 826f 	bne.w	800a6aa <_dtoa_r+0x98a>
 800a1cc:	4b68      	ldr	r3, [pc, #416]	; (800a370 <_dtoa_r+0x650>)
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	4640      	mov	r0, r8
 800a1d2:	4649      	mov	r1, r9
 800a1d4:	f7f6 fa10 	bl	80005f8 <__aeabi_dmul>
 800a1d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a1dc:	f7f6 fc92 	bl	8000b04 <__aeabi_dcmpge>
 800a1e0:	9e04      	ldr	r6, [sp, #16]
 800a1e2:	4637      	mov	r7, r6
 800a1e4:	2800      	cmp	r0, #0
 800a1e6:	f040 8245 	bne.w	800a674 <_dtoa_r+0x954>
 800a1ea:	9d00      	ldr	r5, [sp, #0]
 800a1ec:	2331      	movs	r3, #49	; 0x31
 800a1ee:	f805 3b01 	strb.w	r3, [r5], #1
 800a1f2:	f10b 0b01 	add.w	fp, fp, #1
 800a1f6:	e241      	b.n	800a67c <_dtoa_r+0x95c>
 800a1f8:	07f2      	lsls	r2, r6, #31
 800a1fa:	d505      	bpl.n	800a208 <_dtoa_r+0x4e8>
 800a1fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a200:	f7f6 f9fa 	bl	80005f8 <__aeabi_dmul>
 800a204:	3501      	adds	r5, #1
 800a206:	2301      	movs	r3, #1
 800a208:	1076      	asrs	r6, r6, #1
 800a20a:	3708      	adds	r7, #8
 800a20c:	e773      	b.n	800a0f6 <_dtoa_r+0x3d6>
 800a20e:	2502      	movs	r5, #2
 800a210:	e775      	b.n	800a0fe <_dtoa_r+0x3de>
 800a212:	9e04      	ldr	r6, [sp, #16]
 800a214:	465f      	mov	r7, fp
 800a216:	e792      	b.n	800a13e <_dtoa_r+0x41e>
 800a218:	9900      	ldr	r1, [sp, #0]
 800a21a:	4b50      	ldr	r3, [pc, #320]	; (800a35c <_dtoa_r+0x63c>)
 800a21c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a220:	4431      	add	r1, r6
 800a222:	9102      	str	r1, [sp, #8]
 800a224:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a226:	eeb0 9a47 	vmov.f32	s18, s14
 800a22a:	eef0 9a67 	vmov.f32	s19, s15
 800a22e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a232:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a236:	2900      	cmp	r1, #0
 800a238:	d044      	beq.n	800a2c4 <_dtoa_r+0x5a4>
 800a23a:	494e      	ldr	r1, [pc, #312]	; (800a374 <_dtoa_r+0x654>)
 800a23c:	2000      	movs	r0, #0
 800a23e:	f7f6 fb05 	bl	800084c <__aeabi_ddiv>
 800a242:	ec53 2b19 	vmov	r2, r3, d9
 800a246:	f7f6 f81f 	bl	8000288 <__aeabi_dsub>
 800a24a:	9d00      	ldr	r5, [sp, #0]
 800a24c:	ec41 0b19 	vmov	d9, r0, r1
 800a250:	4649      	mov	r1, r9
 800a252:	4640      	mov	r0, r8
 800a254:	f7f6 fc80 	bl	8000b58 <__aeabi_d2iz>
 800a258:	4606      	mov	r6, r0
 800a25a:	f7f6 f963 	bl	8000524 <__aeabi_i2d>
 800a25e:	4602      	mov	r2, r0
 800a260:	460b      	mov	r3, r1
 800a262:	4640      	mov	r0, r8
 800a264:	4649      	mov	r1, r9
 800a266:	f7f6 f80f 	bl	8000288 <__aeabi_dsub>
 800a26a:	3630      	adds	r6, #48	; 0x30
 800a26c:	f805 6b01 	strb.w	r6, [r5], #1
 800a270:	ec53 2b19 	vmov	r2, r3, d9
 800a274:	4680      	mov	r8, r0
 800a276:	4689      	mov	r9, r1
 800a278:	f7f6 fc30 	bl	8000adc <__aeabi_dcmplt>
 800a27c:	2800      	cmp	r0, #0
 800a27e:	d164      	bne.n	800a34a <_dtoa_r+0x62a>
 800a280:	4642      	mov	r2, r8
 800a282:	464b      	mov	r3, r9
 800a284:	4937      	ldr	r1, [pc, #220]	; (800a364 <_dtoa_r+0x644>)
 800a286:	2000      	movs	r0, #0
 800a288:	f7f5 fffe 	bl	8000288 <__aeabi_dsub>
 800a28c:	ec53 2b19 	vmov	r2, r3, d9
 800a290:	f7f6 fc24 	bl	8000adc <__aeabi_dcmplt>
 800a294:	2800      	cmp	r0, #0
 800a296:	f040 80b6 	bne.w	800a406 <_dtoa_r+0x6e6>
 800a29a:	9b02      	ldr	r3, [sp, #8]
 800a29c:	429d      	cmp	r5, r3
 800a29e:	f43f af7c 	beq.w	800a19a <_dtoa_r+0x47a>
 800a2a2:	4b31      	ldr	r3, [pc, #196]	; (800a368 <_dtoa_r+0x648>)
 800a2a4:	ec51 0b19 	vmov	r0, r1, d9
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	f7f6 f9a5 	bl	80005f8 <__aeabi_dmul>
 800a2ae:	4b2e      	ldr	r3, [pc, #184]	; (800a368 <_dtoa_r+0x648>)
 800a2b0:	ec41 0b19 	vmov	d9, r0, r1
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	4640      	mov	r0, r8
 800a2b8:	4649      	mov	r1, r9
 800a2ba:	f7f6 f99d 	bl	80005f8 <__aeabi_dmul>
 800a2be:	4680      	mov	r8, r0
 800a2c0:	4689      	mov	r9, r1
 800a2c2:	e7c5      	b.n	800a250 <_dtoa_r+0x530>
 800a2c4:	ec51 0b17 	vmov	r0, r1, d7
 800a2c8:	f7f6 f996 	bl	80005f8 <__aeabi_dmul>
 800a2cc:	9b02      	ldr	r3, [sp, #8]
 800a2ce:	9d00      	ldr	r5, [sp, #0]
 800a2d0:	930f      	str	r3, [sp, #60]	; 0x3c
 800a2d2:	ec41 0b19 	vmov	d9, r0, r1
 800a2d6:	4649      	mov	r1, r9
 800a2d8:	4640      	mov	r0, r8
 800a2da:	f7f6 fc3d 	bl	8000b58 <__aeabi_d2iz>
 800a2de:	4606      	mov	r6, r0
 800a2e0:	f7f6 f920 	bl	8000524 <__aeabi_i2d>
 800a2e4:	3630      	adds	r6, #48	; 0x30
 800a2e6:	4602      	mov	r2, r0
 800a2e8:	460b      	mov	r3, r1
 800a2ea:	4640      	mov	r0, r8
 800a2ec:	4649      	mov	r1, r9
 800a2ee:	f7f5 ffcb 	bl	8000288 <__aeabi_dsub>
 800a2f2:	f805 6b01 	strb.w	r6, [r5], #1
 800a2f6:	9b02      	ldr	r3, [sp, #8]
 800a2f8:	429d      	cmp	r5, r3
 800a2fa:	4680      	mov	r8, r0
 800a2fc:	4689      	mov	r9, r1
 800a2fe:	f04f 0200 	mov.w	r2, #0
 800a302:	d124      	bne.n	800a34e <_dtoa_r+0x62e>
 800a304:	4b1b      	ldr	r3, [pc, #108]	; (800a374 <_dtoa_r+0x654>)
 800a306:	ec51 0b19 	vmov	r0, r1, d9
 800a30a:	f7f5 ffbf 	bl	800028c <__adddf3>
 800a30e:	4602      	mov	r2, r0
 800a310:	460b      	mov	r3, r1
 800a312:	4640      	mov	r0, r8
 800a314:	4649      	mov	r1, r9
 800a316:	f7f6 fbff 	bl	8000b18 <__aeabi_dcmpgt>
 800a31a:	2800      	cmp	r0, #0
 800a31c:	d173      	bne.n	800a406 <_dtoa_r+0x6e6>
 800a31e:	ec53 2b19 	vmov	r2, r3, d9
 800a322:	4914      	ldr	r1, [pc, #80]	; (800a374 <_dtoa_r+0x654>)
 800a324:	2000      	movs	r0, #0
 800a326:	f7f5 ffaf 	bl	8000288 <__aeabi_dsub>
 800a32a:	4602      	mov	r2, r0
 800a32c:	460b      	mov	r3, r1
 800a32e:	4640      	mov	r0, r8
 800a330:	4649      	mov	r1, r9
 800a332:	f7f6 fbd3 	bl	8000adc <__aeabi_dcmplt>
 800a336:	2800      	cmp	r0, #0
 800a338:	f43f af2f 	beq.w	800a19a <_dtoa_r+0x47a>
 800a33c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a33e:	1e6b      	subs	r3, r5, #1
 800a340:	930f      	str	r3, [sp, #60]	; 0x3c
 800a342:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a346:	2b30      	cmp	r3, #48	; 0x30
 800a348:	d0f8      	beq.n	800a33c <_dtoa_r+0x61c>
 800a34a:	46bb      	mov	fp, r7
 800a34c:	e04a      	b.n	800a3e4 <_dtoa_r+0x6c4>
 800a34e:	4b06      	ldr	r3, [pc, #24]	; (800a368 <_dtoa_r+0x648>)
 800a350:	f7f6 f952 	bl	80005f8 <__aeabi_dmul>
 800a354:	4680      	mov	r8, r0
 800a356:	4689      	mov	r9, r1
 800a358:	e7bd      	b.n	800a2d6 <_dtoa_r+0x5b6>
 800a35a:	bf00      	nop
 800a35c:	0800dce0 	.word	0x0800dce0
 800a360:	0800dcb8 	.word	0x0800dcb8
 800a364:	3ff00000 	.word	0x3ff00000
 800a368:	40240000 	.word	0x40240000
 800a36c:	401c0000 	.word	0x401c0000
 800a370:	40140000 	.word	0x40140000
 800a374:	3fe00000 	.word	0x3fe00000
 800a378:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a37c:	9d00      	ldr	r5, [sp, #0]
 800a37e:	4642      	mov	r2, r8
 800a380:	464b      	mov	r3, r9
 800a382:	4630      	mov	r0, r6
 800a384:	4639      	mov	r1, r7
 800a386:	f7f6 fa61 	bl	800084c <__aeabi_ddiv>
 800a38a:	f7f6 fbe5 	bl	8000b58 <__aeabi_d2iz>
 800a38e:	9001      	str	r0, [sp, #4]
 800a390:	f7f6 f8c8 	bl	8000524 <__aeabi_i2d>
 800a394:	4642      	mov	r2, r8
 800a396:	464b      	mov	r3, r9
 800a398:	f7f6 f92e 	bl	80005f8 <__aeabi_dmul>
 800a39c:	4602      	mov	r2, r0
 800a39e:	460b      	mov	r3, r1
 800a3a0:	4630      	mov	r0, r6
 800a3a2:	4639      	mov	r1, r7
 800a3a4:	f7f5 ff70 	bl	8000288 <__aeabi_dsub>
 800a3a8:	9e01      	ldr	r6, [sp, #4]
 800a3aa:	9f04      	ldr	r7, [sp, #16]
 800a3ac:	3630      	adds	r6, #48	; 0x30
 800a3ae:	f805 6b01 	strb.w	r6, [r5], #1
 800a3b2:	9e00      	ldr	r6, [sp, #0]
 800a3b4:	1bae      	subs	r6, r5, r6
 800a3b6:	42b7      	cmp	r7, r6
 800a3b8:	4602      	mov	r2, r0
 800a3ba:	460b      	mov	r3, r1
 800a3bc:	d134      	bne.n	800a428 <_dtoa_r+0x708>
 800a3be:	f7f5 ff65 	bl	800028c <__adddf3>
 800a3c2:	4642      	mov	r2, r8
 800a3c4:	464b      	mov	r3, r9
 800a3c6:	4606      	mov	r6, r0
 800a3c8:	460f      	mov	r7, r1
 800a3ca:	f7f6 fba5 	bl	8000b18 <__aeabi_dcmpgt>
 800a3ce:	b9c8      	cbnz	r0, 800a404 <_dtoa_r+0x6e4>
 800a3d0:	4642      	mov	r2, r8
 800a3d2:	464b      	mov	r3, r9
 800a3d4:	4630      	mov	r0, r6
 800a3d6:	4639      	mov	r1, r7
 800a3d8:	f7f6 fb76 	bl	8000ac8 <__aeabi_dcmpeq>
 800a3dc:	b110      	cbz	r0, 800a3e4 <_dtoa_r+0x6c4>
 800a3de:	9b01      	ldr	r3, [sp, #4]
 800a3e0:	07db      	lsls	r3, r3, #31
 800a3e2:	d40f      	bmi.n	800a404 <_dtoa_r+0x6e4>
 800a3e4:	4651      	mov	r1, sl
 800a3e6:	4620      	mov	r0, r4
 800a3e8:	f000 fbcc 	bl	800ab84 <_Bfree>
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a3f0:	702b      	strb	r3, [r5, #0]
 800a3f2:	f10b 0301 	add.w	r3, fp, #1
 800a3f6:	6013      	str	r3, [r2, #0]
 800a3f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	f43f ace2 	beq.w	8009dc4 <_dtoa_r+0xa4>
 800a400:	601d      	str	r5, [r3, #0]
 800a402:	e4df      	b.n	8009dc4 <_dtoa_r+0xa4>
 800a404:	465f      	mov	r7, fp
 800a406:	462b      	mov	r3, r5
 800a408:	461d      	mov	r5, r3
 800a40a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a40e:	2a39      	cmp	r2, #57	; 0x39
 800a410:	d106      	bne.n	800a420 <_dtoa_r+0x700>
 800a412:	9a00      	ldr	r2, [sp, #0]
 800a414:	429a      	cmp	r2, r3
 800a416:	d1f7      	bne.n	800a408 <_dtoa_r+0x6e8>
 800a418:	9900      	ldr	r1, [sp, #0]
 800a41a:	2230      	movs	r2, #48	; 0x30
 800a41c:	3701      	adds	r7, #1
 800a41e:	700a      	strb	r2, [r1, #0]
 800a420:	781a      	ldrb	r2, [r3, #0]
 800a422:	3201      	adds	r2, #1
 800a424:	701a      	strb	r2, [r3, #0]
 800a426:	e790      	b.n	800a34a <_dtoa_r+0x62a>
 800a428:	4ba3      	ldr	r3, [pc, #652]	; (800a6b8 <_dtoa_r+0x998>)
 800a42a:	2200      	movs	r2, #0
 800a42c:	f7f6 f8e4 	bl	80005f8 <__aeabi_dmul>
 800a430:	2200      	movs	r2, #0
 800a432:	2300      	movs	r3, #0
 800a434:	4606      	mov	r6, r0
 800a436:	460f      	mov	r7, r1
 800a438:	f7f6 fb46 	bl	8000ac8 <__aeabi_dcmpeq>
 800a43c:	2800      	cmp	r0, #0
 800a43e:	d09e      	beq.n	800a37e <_dtoa_r+0x65e>
 800a440:	e7d0      	b.n	800a3e4 <_dtoa_r+0x6c4>
 800a442:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a444:	2a00      	cmp	r2, #0
 800a446:	f000 80ca 	beq.w	800a5de <_dtoa_r+0x8be>
 800a44a:	9a07      	ldr	r2, [sp, #28]
 800a44c:	2a01      	cmp	r2, #1
 800a44e:	f300 80ad 	bgt.w	800a5ac <_dtoa_r+0x88c>
 800a452:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a454:	2a00      	cmp	r2, #0
 800a456:	f000 80a5 	beq.w	800a5a4 <_dtoa_r+0x884>
 800a45a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a45e:	9e08      	ldr	r6, [sp, #32]
 800a460:	9d05      	ldr	r5, [sp, #20]
 800a462:	9a05      	ldr	r2, [sp, #20]
 800a464:	441a      	add	r2, r3
 800a466:	9205      	str	r2, [sp, #20]
 800a468:	9a06      	ldr	r2, [sp, #24]
 800a46a:	2101      	movs	r1, #1
 800a46c:	441a      	add	r2, r3
 800a46e:	4620      	mov	r0, r4
 800a470:	9206      	str	r2, [sp, #24]
 800a472:	f000 fc3d 	bl	800acf0 <__i2b>
 800a476:	4607      	mov	r7, r0
 800a478:	b165      	cbz	r5, 800a494 <_dtoa_r+0x774>
 800a47a:	9b06      	ldr	r3, [sp, #24]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	dd09      	ble.n	800a494 <_dtoa_r+0x774>
 800a480:	42ab      	cmp	r3, r5
 800a482:	9a05      	ldr	r2, [sp, #20]
 800a484:	bfa8      	it	ge
 800a486:	462b      	movge	r3, r5
 800a488:	1ad2      	subs	r2, r2, r3
 800a48a:	9205      	str	r2, [sp, #20]
 800a48c:	9a06      	ldr	r2, [sp, #24]
 800a48e:	1aed      	subs	r5, r5, r3
 800a490:	1ad3      	subs	r3, r2, r3
 800a492:	9306      	str	r3, [sp, #24]
 800a494:	9b08      	ldr	r3, [sp, #32]
 800a496:	b1f3      	cbz	r3, 800a4d6 <_dtoa_r+0x7b6>
 800a498:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	f000 80a3 	beq.w	800a5e6 <_dtoa_r+0x8c6>
 800a4a0:	2e00      	cmp	r6, #0
 800a4a2:	dd10      	ble.n	800a4c6 <_dtoa_r+0x7a6>
 800a4a4:	4639      	mov	r1, r7
 800a4a6:	4632      	mov	r2, r6
 800a4a8:	4620      	mov	r0, r4
 800a4aa:	f000 fce1 	bl	800ae70 <__pow5mult>
 800a4ae:	4652      	mov	r2, sl
 800a4b0:	4601      	mov	r1, r0
 800a4b2:	4607      	mov	r7, r0
 800a4b4:	4620      	mov	r0, r4
 800a4b6:	f000 fc31 	bl	800ad1c <__multiply>
 800a4ba:	4651      	mov	r1, sl
 800a4bc:	4680      	mov	r8, r0
 800a4be:	4620      	mov	r0, r4
 800a4c0:	f000 fb60 	bl	800ab84 <_Bfree>
 800a4c4:	46c2      	mov	sl, r8
 800a4c6:	9b08      	ldr	r3, [sp, #32]
 800a4c8:	1b9a      	subs	r2, r3, r6
 800a4ca:	d004      	beq.n	800a4d6 <_dtoa_r+0x7b6>
 800a4cc:	4651      	mov	r1, sl
 800a4ce:	4620      	mov	r0, r4
 800a4d0:	f000 fcce 	bl	800ae70 <__pow5mult>
 800a4d4:	4682      	mov	sl, r0
 800a4d6:	2101      	movs	r1, #1
 800a4d8:	4620      	mov	r0, r4
 800a4da:	f000 fc09 	bl	800acf0 <__i2b>
 800a4de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	4606      	mov	r6, r0
 800a4e4:	f340 8081 	ble.w	800a5ea <_dtoa_r+0x8ca>
 800a4e8:	461a      	mov	r2, r3
 800a4ea:	4601      	mov	r1, r0
 800a4ec:	4620      	mov	r0, r4
 800a4ee:	f000 fcbf 	bl	800ae70 <__pow5mult>
 800a4f2:	9b07      	ldr	r3, [sp, #28]
 800a4f4:	2b01      	cmp	r3, #1
 800a4f6:	4606      	mov	r6, r0
 800a4f8:	dd7a      	ble.n	800a5f0 <_dtoa_r+0x8d0>
 800a4fa:	f04f 0800 	mov.w	r8, #0
 800a4fe:	6933      	ldr	r3, [r6, #16]
 800a500:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a504:	6918      	ldr	r0, [r3, #16]
 800a506:	f000 fba5 	bl	800ac54 <__hi0bits>
 800a50a:	f1c0 0020 	rsb	r0, r0, #32
 800a50e:	9b06      	ldr	r3, [sp, #24]
 800a510:	4418      	add	r0, r3
 800a512:	f010 001f 	ands.w	r0, r0, #31
 800a516:	f000 8094 	beq.w	800a642 <_dtoa_r+0x922>
 800a51a:	f1c0 0320 	rsb	r3, r0, #32
 800a51e:	2b04      	cmp	r3, #4
 800a520:	f340 8085 	ble.w	800a62e <_dtoa_r+0x90e>
 800a524:	9b05      	ldr	r3, [sp, #20]
 800a526:	f1c0 001c 	rsb	r0, r0, #28
 800a52a:	4403      	add	r3, r0
 800a52c:	9305      	str	r3, [sp, #20]
 800a52e:	9b06      	ldr	r3, [sp, #24]
 800a530:	4403      	add	r3, r0
 800a532:	4405      	add	r5, r0
 800a534:	9306      	str	r3, [sp, #24]
 800a536:	9b05      	ldr	r3, [sp, #20]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	dd05      	ble.n	800a548 <_dtoa_r+0x828>
 800a53c:	4651      	mov	r1, sl
 800a53e:	461a      	mov	r2, r3
 800a540:	4620      	mov	r0, r4
 800a542:	f000 fcef 	bl	800af24 <__lshift>
 800a546:	4682      	mov	sl, r0
 800a548:	9b06      	ldr	r3, [sp, #24]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	dd05      	ble.n	800a55a <_dtoa_r+0x83a>
 800a54e:	4631      	mov	r1, r6
 800a550:	461a      	mov	r2, r3
 800a552:	4620      	mov	r0, r4
 800a554:	f000 fce6 	bl	800af24 <__lshift>
 800a558:	4606      	mov	r6, r0
 800a55a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d072      	beq.n	800a646 <_dtoa_r+0x926>
 800a560:	4631      	mov	r1, r6
 800a562:	4650      	mov	r0, sl
 800a564:	f000 fd4a 	bl	800affc <__mcmp>
 800a568:	2800      	cmp	r0, #0
 800a56a:	da6c      	bge.n	800a646 <_dtoa_r+0x926>
 800a56c:	2300      	movs	r3, #0
 800a56e:	4651      	mov	r1, sl
 800a570:	220a      	movs	r2, #10
 800a572:	4620      	mov	r0, r4
 800a574:	f000 fb28 	bl	800abc8 <__multadd>
 800a578:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a57a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a57e:	4682      	mov	sl, r0
 800a580:	2b00      	cmp	r3, #0
 800a582:	f000 81b0 	beq.w	800a8e6 <_dtoa_r+0xbc6>
 800a586:	2300      	movs	r3, #0
 800a588:	4639      	mov	r1, r7
 800a58a:	220a      	movs	r2, #10
 800a58c:	4620      	mov	r0, r4
 800a58e:	f000 fb1b 	bl	800abc8 <__multadd>
 800a592:	9b01      	ldr	r3, [sp, #4]
 800a594:	2b00      	cmp	r3, #0
 800a596:	4607      	mov	r7, r0
 800a598:	f300 8096 	bgt.w	800a6c8 <_dtoa_r+0x9a8>
 800a59c:	9b07      	ldr	r3, [sp, #28]
 800a59e:	2b02      	cmp	r3, #2
 800a5a0:	dc59      	bgt.n	800a656 <_dtoa_r+0x936>
 800a5a2:	e091      	b.n	800a6c8 <_dtoa_r+0x9a8>
 800a5a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a5a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a5aa:	e758      	b.n	800a45e <_dtoa_r+0x73e>
 800a5ac:	9b04      	ldr	r3, [sp, #16]
 800a5ae:	1e5e      	subs	r6, r3, #1
 800a5b0:	9b08      	ldr	r3, [sp, #32]
 800a5b2:	42b3      	cmp	r3, r6
 800a5b4:	bfbf      	itttt	lt
 800a5b6:	9b08      	ldrlt	r3, [sp, #32]
 800a5b8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800a5ba:	9608      	strlt	r6, [sp, #32]
 800a5bc:	1af3      	sublt	r3, r6, r3
 800a5be:	bfb4      	ite	lt
 800a5c0:	18d2      	addlt	r2, r2, r3
 800a5c2:	1b9e      	subge	r6, r3, r6
 800a5c4:	9b04      	ldr	r3, [sp, #16]
 800a5c6:	bfbc      	itt	lt
 800a5c8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800a5ca:	2600      	movlt	r6, #0
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	bfb7      	itett	lt
 800a5d0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800a5d4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800a5d8:	1a9d      	sublt	r5, r3, r2
 800a5da:	2300      	movlt	r3, #0
 800a5dc:	e741      	b.n	800a462 <_dtoa_r+0x742>
 800a5de:	9e08      	ldr	r6, [sp, #32]
 800a5e0:	9d05      	ldr	r5, [sp, #20]
 800a5e2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a5e4:	e748      	b.n	800a478 <_dtoa_r+0x758>
 800a5e6:	9a08      	ldr	r2, [sp, #32]
 800a5e8:	e770      	b.n	800a4cc <_dtoa_r+0x7ac>
 800a5ea:	9b07      	ldr	r3, [sp, #28]
 800a5ec:	2b01      	cmp	r3, #1
 800a5ee:	dc19      	bgt.n	800a624 <_dtoa_r+0x904>
 800a5f0:	9b02      	ldr	r3, [sp, #8]
 800a5f2:	b9bb      	cbnz	r3, 800a624 <_dtoa_r+0x904>
 800a5f4:	9b03      	ldr	r3, [sp, #12]
 800a5f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a5fa:	b99b      	cbnz	r3, 800a624 <_dtoa_r+0x904>
 800a5fc:	9b03      	ldr	r3, [sp, #12]
 800a5fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a602:	0d1b      	lsrs	r3, r3, #20
 800a604:	051b      	lsls	r3, r3, #20
 800a606:	b183      	cbz	r3, 800a62a <_dtoa_r+0x90a>
 800a608:	9b05      	ldr	r3, [sp, #20]
 800a60a:	3301      	adds	r3, #1
 800a60c:	9305      	str	r3, [sp, #20]
 800a60e:	9b06      	ldr	r3, [sp, #24]
 800a610:	3301      	adds	r3, #1
 800a612:	9306      	str	r3, [sp, #24]
 800a614:	f04f 0801 	mov.w	r8, #1
 800a618:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	f47f af6f 	bne.w	800a4fe <_dtoa_r+0x7de>
 800a620:	2001      	movs	r0, #1
 800a622:	e774      	b.n	800a50e <_dtoa_r+0x7ee>
 800a624:	f04f 0800 	mov.w	r8, #0
 800a628:	e7f6      	b.n	800a618 <_dtoa_r+0x8f8>
 800a62a:	4698      	mov	r8, r3
 800a62c:	e7f4      	b.n	800a618 <_dtoa_r+0x8f8>
 800a62e:	d082      	beq.n	800a536 <_dtoa_r+0x816>
 800a630:	9a05      	ldr	r2, [sp, #20]
 800a632:	331c      	adds	r3, #28
 800a634:	441a      	add	r2, r3
 800a636:	9205      	str	r2, [sp, #20]
 800a638:	9a06      	ldr	r2, [sp, #24]
 800a63a:	441a      	add	r2, r3
 800a63c:	441d      	add	r5, r3
 800a63e:	9206      	str	r2, [sp, #24]
 800a640:	e779      	b.n	800a536 <_dtoa_r+0x816>
 800a642:	4603      	mov	r3, r0
 800a644:	e7f4      	b.n	800a630 <_dtoa_r+0x910>
 800a646:	9b04      	ldr	r3, [sp, #16]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	dc37      	bgt.n	800a6bc <_dtoa_r+0x99c>
 800a64c:	9b07      	ldr	r3, [sp, #28]
 800a64e:	2b02      	cmp	r3, #2
 800a650:	dd34      	ble.n	800a6bc <_dtoa_r+0x99c>
 800a652:	9b04      	ldr	r3, [sp, #16]
 800a654:	9301      	str	r3, [sp, #4]
 800a656:	9b01      	ldr	r3, [sp, #4]
 800a658:	b963      	cbnz	r3, 800a674 <_dtoa_r+0x954>
 800a65a:	4631      	mov	r1, r6
 800a65c:	2205      	movs	r2, #5
 800a65e:	4620      	mov	r0, r4
 800a660:	f000 fab2 	bl	800abc8 <__multadd>
 800a664:	4601      	mov	r1, r0
 800a666:	4606      	mov	r6, r0
 800a668:	4650      	mov	r0, sl
 800a66a:	f000 fcc7 	bl	800affc <__mcmp>
 800a66e:	2800      	cmp	r0, #0
 800a670:	f73f adbb 	bgt.w	800a1ea <_dtoa_r+0x4ca>
 800a674:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a676:	9d00      	ldr	r5, [sp, #0]
 800a678:	ea6f 0b03 	mvn.w	fp, r3
 800a67c:	f04f 0800 	mov.w	r8, #0
 800a680:	4631      	mov	r1, r6
 800a682:	4620      	mov	r0, r4
 800a684:	f000 fa7e 	bl	800ab84 <_Bfree>
 800a688:	2f00      	cmp	r7, #0
 800a68a:	f43f aeab 	beq.w	800a3e4 <_dtoa_r+0x6c4>
 800a68e:	f1b8 0f00 	cmp.w	r8, #0
 800a692:	d005      	beq.n	800a6a0 <_dtoa_r+0x980>
 800a694:	45b8      	cmp	r8, r7
 800a696:	d003      	beq.n	800a6a0 <_dtoa_r+0x980>
 800a698:	4641      	mov	r1, r8
 800a69a:	4620      	mov	r0, r4
 800a69c:	f000 fa72 	bl	800ab84 <_Bfree>
 800a6a0:	4639      	mov	r1, r7
 800a6a2:	4620      	mov	r0, r4
 800a6a4:	f000 fa6e 	bl	800ab84 <_Bfree>
 800a6a8:	e69c      	b.n	800a3e4 <_dtoa_r+0x6c4>
 800a6aa:	2600      	movs	r6, #0
 800a6ac:	4637      	mov	r7, r6
 800a6ae:	e7e1      	b.n	800a674 <_dtoa_r+0x954>
 800a6b0:	46bb      	mov	fp, r7
 800a6b2:	4637      	mov	r7, r6
 800a6b4:	e599      	b.n	800a1ea <_dtoa_r+0x4ca>
 800a6b6:	bf00      	nop
 800a6b8:	40240000 	.word	0x40240000
 800a6bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	f000 80c8 	beq.w	800a854 <_dtoa_r+0xb34>
 800a6c4:	9b04      	ldr	r3, [sp, #16]
 800a6c6:	9301      	str	r3, [sp, #4]
 800a6c8:	2d00      	cmp	r5, #0
 800a6ca:	dd05      	ble.n	800a6d8 <_dtoa_r+0x9b8>
 800a6cc:	4639      	mov	r1, r7
 800a6ce:	462a      	mov	r2, r5
 800a6d0:	4620      	mov	r0, r4
 800a6d2:	f000 fc27 	bl	800af24 <__lshift>
 800a6d6:	4607      	mov	r7, r0
 800a6d8:	f1b8 0f00 	cmp.w	r8, #0
 800a6dc:	d05b      	beq.n	800a796 <_dtoa_r+0xa76>
 800a6de:	6879      	ldr	r1, [r7, #4]
 800a6e0:	4620      	mov	r0, r4
 800a6e2:	f000 fa0f 	bl	800ab04 <_Balloc>
 800a6e6:	4605      	mov	r5, r0
 800a6e8:	b928      	cbnz	r0, 800a6f6 <_dtoa_r+0x9d6>
 800a6ea:	4b83      	ldr	r3, [pc, #524]	; (800a8f8 <_dtoa_r+0xbd8>)
 800a6ec:	4602      	mov	r2, r0
 800a6ee:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a6f2:	f7ff bb2e 	b.w	8009d52 <_dtoa_r+0x32>
 800a6f6:	693a      	ldr	r2, [r7, #16]
 800a6f8:	3202      	adds	r2, #2
 800a6fa:	0092      	lsls	r2, r2, #2
 800a6fc:	f107 010c 	add.w	r1, r7, #12
 800a700:	300c      	adds	r0, #12
 800a702:	f7ff fa56 	bl	8009bb2 <memcpy>
 800a706:	2201      	movs	r2, #1
 800a708:	4629      	mov	r1, r5
 800a70a:	4620      	mov	r0, r4
 800a70c:	f000 fc0a 	bl	800af24 <__lshift>
 800a710:	9b00      	ldr	r3, [sp, #0]
 800a712:	3301      	adds	r3, #1
 800a714:	9304      	str	r3, [sp, #16]
 800a716:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a71a:	4413      	add	r3, r2
 800a71c:	9308      	str	r3, [sp, #32]
 800a71e:	9b02      	ldr	r3, [sp, #8]
 800a720:	f003 0301 	and.w	r3, r3, #1
 800a724:	46b8      	mov	r8, r7
 800a726:	9306      	str	r3, [sp, #24]
 800a728:	4607      	mov	r7, r0
 800a72a:	9b04      	ldr	r3, [sp, #16]
 800a72c:	4631      	mov	r1, r6
 800a72e:	3b01      	subs	r3, #1
 800a730:	4650      	mov	r0, sl
 800a732:	9301      	str	r3, [sp, #4]
 800a734:	f7ff fa6a 	bl	8009c0c <quorem>
 800a738:	4641      	mov	r1, r8
 800a73a:	9002      	str	r0, [sp, #8]
 800a73c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a740:	4650      	mov	r0, sl
 800a742:	f000 fc5b 	bl	800affc <__mcmp>
 800a746:	463a      	mov	r2, r7
 800a748:	9005      	str	r0, [sp, #20]
 800a74a:	4631      	mov	r1, r6
 800a74c:	4620      	mov	r0, r4
 800a74e:	f000 fc71 	bl	800b034 <__mdiff>
 800a752:	68c2      	ldr	r2, [r0, #12]
 800a754:	4605      	mov	r5, r0
 800a756:	bb02      	cbnz	r2, 800a79a <_dtoa_r+0xa7a>
 800a758:	4601      	mov	r1, r0
 800a75a:	4650      	mov	r0, sl
 800a75c:	f000 fc4e 	bl	800affc <__mcmp>
 800a760:	4602      	mov	r2, r0
 800a762:	4629      	mov	r1, r5
 800a764:	4620      	mov	r0, r4
 800a766:	9209      	str	r2, [sp, #36]	; 0x24
 800a768:	f000 fa0c 	bl	800ab84 <_Bfree>
 800a76c:	9b07      	ldr	r3, [sp, #28]
 800a76e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a770:	9d04      	ldr	r5, [sp, #16]
 800a772:	ea43 0102 	orr.w	r1, r3, r2
 800a776:	9b06      	ldr	r3, [sp, #24]
 800a778:	4319      	orrs	r1, r3
 800a77a:	d110      	bne.n	800a79e <_dtoa_r+0xa7e>
 800a77c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a780:	d029      	beq.n	800a7d6 <_dtoa_r+0xab6>
 800a782:	9b05      	ldr	r3, [sp, #20]
 800a784:	2b00      	cmp	r3, #0
 800a786:	dd02      	ble.n	800a78e <_dtoa_r+0xa6e>
 800a788:	9b02      	ldr	r3, [sp, #8]
 800a78a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a78e:	9b01      	ldr	r3, [sp, #4]
 800a790:	f883 9000 	strb.w	r9, [r3]
 800a794:	e774      	b.n	800a680 <_dtoa_r+0x960>
 800a796:	4638      	mov	r0, r7
 800a798:	e7ba      	b.n	800a710 <_dtoa_r+0x9f0>
 800a79a:	2201      	movs	r2, #1
 800a79c:	e7e1      	b.n	800a762 <_dtoa_r+0xa42>
 800a79e:	9b05      	ldr	r3, [sp, #20]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	db04      	blt.n	800a7ae <_dtoa_r+0xa8e>
 800a7a4:	9907      	ldr	r1, [sp, #28]
 800a7a6:	430b      	orrs	r3, r1
 800a7a8:	9906      	ldr	r1, [sp, #24]
 800a7aa:	430b      	orrs	r3, r1
 800a7ac:	d120      	bne.n	800a7f0 <_dtoa_r+0xad0>
 800a7ae:	2a00      	cmp	r2, #0
 800a7b0:	dded      	ble.n	800a78e <_dtoa_r+0xa6e>
 800a7b2:	4651      	mov	r1, sl
 800a7b4:	2201      	movs	r2, #1
 800a7b6:	4620      	mov	r0, r4
 800a7b8:	f000 fbb4 	bl	800af24 <__lshift>
 800a7bc:	4631      	mov	r1, r6
 800a7be:	4682      	mov	sl, r0
 800a7c0:	f000 fc1c 	bl	800affc <__mcmp>
 800a7c4:	2800      	cmp	r0, #0
 800a7c6:	dc03      	bgt.n	800a7d0 <_dtoa_r+0xab0>
 800a7c8:	d1e1      	bne.n	800a78e <_dtoa_r+0xa6e>
 800a7ca:	f019 0f01 	tst.w	r9, #1
 800a7ce:	d0de      	beq.n	800a78e <_dtoa_r+0xa6e>
 800a7d0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a7d4:	d1d8      	bne.n	800a788 <_dtoa_r+0xa68>
 800a7d6:	9a01      	ldr	r2, [sp, #4]
 800a7d8:	2339      	movs	r3, #57	; 0x39
 800a7da:	7013      	strb	r3, [r2, #0]
 800a7dc:	462b      	mov	r3, r5
 800a7de:	461d      	mov	r5, r3
 800a7e0:	3b01      	subs	r3, #1
 800a7e2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a7e6:	2a39      	cmp	r2, #57	; 0x39
 800a7e8:	d06c      	beq.n	800a8c4 <_dtoa_r+0xba4>
 800a7ea:	3201      	adds	r2, #1
 800a7ec:	701a      	strb	r2, [r3, #0]
 800a7ee:	e747      	b.n	800a680 <_dtoa_r+0x960>
 800a7f0:	2a00      	cmp	r2, #0
 800a7f2:	dd07      	ble.n	800a804 <_dtoa_r+0xae4>
 800a7f4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a7f8:	d0ed      	beq.n	800a7d6 <_dtoa_r+0xab6>
 800a7fa:	9a01      	ldr	r2, [sp, #4]
 800a7fc:	f109 0301 	add.w	r3, r9, #1
 800a800:	7013      	strb	r3, [r2, #0]
 800a802:	e73d      	b.n	800a680 <_dtoa_r+0x960>
 800a804:	9b04      	ldr	r3, [sp, #16]
 800a806:	9a08      	ldr	r2, [sp, #32]
 800a808:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a80c:	4293      	cmp	r3, r2
 800a80e:	d043      	beq.n	800a898 <_dtoa_r+0xb78>
 800a810:	4651      	mov	r1, sl
 800a812:	2300      	movs	r3, #0
 800a814:	220a      	movs	r2, #10
 800a816:	4620      	mov	r0, r4
 800a818:	f000 f9d6 	bl	800abc8 <__multadd>
 800a81c:	45b8      	cmp	r8, r7
 800a81e:	4682      	mov	sl, r0
 800a820:	f04f 0300 	mov.w	r3, #0
 800a824:	f04f 020a 	mov.w	r2, #10
 800a828:	4641      	mov	r1, r8
 800a82a:	4620      	mov	r0, r4
 800a82c:	d107      	bne.n	800a83e <_dtoa_r+0xb1e>
 800a82e:	f000 f9cb 	bl	800abc8 <__multadd>
 800a832:	4680      	mov	r8, r0
 800a834:	4607      	mov	r7, r0
 800a836:	9b04      	ldr	r3, [sp, #16]
 800a838:	3301      	adds	r3, #1
 800a83a:	9304      	str	r3, [sp, #16]
 800a83c:	e775      	b.n	800a72a <_dtoa_r+0xa0a>
 800a83e:	f000 f9c3 	bl	800abc8 <__multadd>
 800a842:	4639      	mov	r1, r7
 800a844:	4680      	mov	r8, r0
 800a846:	2300      	movs	r3, #0
 800a848:	220a      	movs	r2, #10
 800a84a:	4620      	mov	r0, r4
 800a84c:	f000 f9bc 	bl	800abc8 <__multadd>
 800a850:	4607      	mov	r7, r0
 800a852:	e7f0      	b.n	800a836 <_dtoa_r+0xb16>
 800a854:	9b04      	ldr	r3, [sp, #16]
 800a856:	9301      	str	r3, [sp, #4]
 800a858:	9d00      	ldr	r5, [sp, #0]
 800a85a:	4631      	mov	r1, r6
 800a85c:	4650      	mov	r0, sl
 800a85e:	f7ff f9d5 	bl	8009c0c <quorem>
 800a862:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a866:	9b00      	ldr	r3, [sp, #0]
 800a868:	f805 9b01 	strb.w	r9, [r5], #1
 800a86c:	1aea      	subs	r2, r5, r3
 800a86e:	9b01      	ldr	r3, [sp, #4]
 800a870:	4293      	cmp	r3, r2
 800a872:	dd07      	ble.n	800a884 <_dtoa_r+0xb64>
 800a874:	4651      	mov	r1, sl
 800a876:	2300      	movs	r3, #0
 800a878:	220a      	movs	r2, #10
 800a87a:	4620      	mov	r0, r4
 800a87c:	f000 f9a4 	bl	800abc8 <__multadd>
 800a880:	4682      	mov	sl, r0
 800a882:	e7ea      	b.n	800a85a <_dtoa_r+0xb3a>
 800a884:	9b01      	ldr	r3, [sp, #4]
 800a886:	2b00      	cmp	r3, #0
 800a888:	bfc8      	it	gt
 800a88a:	461d      	movgt	r5, r3
 800a88c:	9b00      	ldr	r3, [sp, #0]
 800a88e:	bfd8      	it	le
 800a890:	2501      	movle	r5, #1
 800a892:	441d      	add	r5, r3
 800a894:	f04f 0800 	mov.w	r8, #0
 800a898:	4651      	mov	r1, sl
 800a89a:	2201      	movs	r2, #1
 800a89c:	4620      	mov	r0, r4
 800a89e:	f000 fb41 	bl	800af24 <__lshift>
 800a8a2:	4631      	mov	r1, r6
 800a8a4:	4682      	mov	sl, r0
 800a8a6:	f000 fba9 	bl	800affc <__mcmp>
 800a8aa:	2800      	cmp	r0, #0
 800a8ac:	dc96      	bgt.n	800a7dc <_dtoa_r+0xabc>
 800a8ae:	d102      	bne.n	800a8b6 <_dtoa_r+0xb96>
 800a8b0:	f019 0f01 	tst.w	r9, #1
 800a8b4:	d192      	bne.n	800a7dc <_dtoa_r+0xabc>
 800a8b6:	462b      	mov	r3, r5
 800a8b8:	461d      	mov	r5, r3
 800a8ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a8be:	2a30      	cmp	r2, #48	; 0x30
 800a8c0:	d0fa      	beq.n	800a8b8 <_dtoa_r+0xb98>
 800a8c2:	e6dd      	b.n	800a680 <_dtoa_r+0x960>
 800a8c4:	9a00      	ldr	r2, [sp, #0]
 800a8c6:	429a      	cmp	r2, r3
 800a8c8:	d189      	bne.n	800a7de <_dtoa_r+0xabe>
 800a8ca:	f10b 0b01 	add.w	fp, fp, #1
 800a8ce:	2331      	movs	r3, #49	; 0x31
 800a8d0:	e796      	b.n	800a800 <_dtoa_r+0xae0>
 800a8d2:	4b0a      	ldr	r3, [pc, #40]	; (800a8fc <_dtoa_r+0xbdc>)
 800a8d4:	f7ff ba99 	b.w	8009e0a <_dtoa_r+0xea>
 800a8d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	f47f aa6d 	bne.w	8009dba <_dtoa_r+0x9a>
 800a8e0:	4b07      	ldr	r3, [pc, #28]	; (800a900 <_dtoa_r+0xbe0>)
 800a8e2:	f7ff ba92 	b.w	8009e0a <_dtoa_r+0xea>
 800a8e6:	9b01      	ldr	r3, [sp, #4]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	dcb5      	bgt.n	800a858 <_dtoa_r+0xb38>
 800a8ec:	9b07      	ldr	r3, [sp, #28]
 800a8ee:	2b02      	cmp	r3, #2
 800a8f0:	f73f aeb1 	bgt.w	800a656 <_dtoa_r+0x936>
 800a8f4:	e7b0      	b.n	800a858 <_dtoa_r+0xb38>
 800a8f6:	bf00      	nop
 800a8f8:	0800dc4e 	.word	0x0800dc4e
 800a8fc:	0800db89 	.word	0x0800db89
 800a900:	0800dbe9 	.word	0x0800dbe9

0800a904 <_free_r>:
 800a904:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a906:	2900      	cmp	r1, #0
 800a908:	d044      	beq.n	800a994 <_free_r+0x90>
 800a90a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a90e:	9001      	str	r0, [sp, #4]
 800a910:	2b00      	cmp	r3, #0
 800a912:	f1a1 0404 	sub.w	r4, r1, #4
 800a916:	bfb8      	it	lt
 800a918:	18e4      	addlt	r4, r4, r3
 800a91a:	f000 f8e7 	bl	800aaec <__malloc_lock>
 800a91e:	4a1e      	ldr	r2, [pc, #120]	; (800a998 <_free_r+0x94>)
 800a920:	9801      	ldr	r0, [sp, #4]
 800a922:	6813      	ldr	r3, [r2, #0]
 800a924:	b933      	cbnz	r3, 800a934 <_free_r+0x30>
 800a926:	6063      	str	r3, [r4, #4]
 800a928:	6014      	str	r4, [r2, #0]
 800a92a:	b003      	add	sp, #12
 800a92c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a930:	f000 b8e2 	b.w	800aaf8 <__malloc_unlock>
 800a934:	42a3      	cmp	r3, r4
 800a936:	d908      	bls.n	800a94a <_free_r+0x46>
 800a938:	6825      	ldr	r5, [r4, #0]
 800a93a:	1961      	adds	r1, r4, r5
 800a93c:	428b      	cmp	r3, r1
 800a93e:	bf01      	itttt	eq
 800a940:	6819      	ldreq	r1, [r3, #0]
 800a942:	685b      	ldreq	r3, [r3, #4]
 800a944:	1949      	addeq	r1, r1, r5
 800a946:	6021      	streq	r1, [r4, #0]
 800a948:	e7ed      	b.n	800a926 <_free_r+0x22>
 800a94a:	461a      	mov	r2, r3
 800a94c:	685b      	ldr	r3, [r3, #4]
 800a94e:	b10b      	cbz	r3, 800a954 <_free_r+0x50>
 800a950:	42a3      	cmp	r3, r4
 800a952:	d9fa      	bls.n	800a94a <_free_r+0x46>
 800a954:	6811      	ldr	r1, [r2, #0]
 800a956:	1855      	adds	r5, r2, r1
 800a958:	42a5      	cmp	r5, r4
 800a95a:	d10b      	bne.n	800a974 <_free_r+0x70>
 800a95c:	6824      	ldr	r4, [r4, #0]
 800a95e:	4421      	add	r1, r4
 800a960:	1854      	adds	r4, r2, r1
 800a962:	42a3      	cmp	r3, r4
 800a964:	6011      	str	r1, [r2, #0]
 800a966:	d1e0      	bne.n	800a92a <_free_r+0x26>
 800a968:	681c      	ldr	r4, [r3, #0]
 800a96a:	685b      	ldr	r3, [r3, #4]
 800a96c:	6053      	str	r3, [r2, #4]
 800a96e:	440c      	add	r4, r1
 800a970:	6014      	str	r4, [r2, #0]
 800a972:	e7da      	b.n	800a92a <_free_r+0x26>
 800a974:	d902      	bls.n	800a97c <_free_r+0x78>
 800a976:	230c      	movs	r3, #12
 800a978:	6003      	str	r3, [r0, #0]
 800a97a:	e7d6      	b.n	800a92a <_free_r+0x26>
 800a97c:	6825      	ldr	r5, [r4, #0]
 800a97e:	1961      	adds	r1, r4, r5
 800a980:	428b      	cmp	r3, r1
 800a982:	bf04      	itt	eq
 800a984:	6819      	ldreq	r1, [r3, #0]
 800a986:	685b      	ldreq	r3, [r3, #4]
 800a988:	6063      	str	r3, [r4, #4]
 800a98a:	bf04      	itt	eq
 800a98c:	1949      	addeq	r1, r1, r5
 800a98e:	6021      	streq	r1, [r4, #0]
 800a990:	6054      	str	r4, [r2, #4]
 800a992:	e7ca      	b.n	800a92a <_free_r+0x26>
 800a994:	b003      	add	sp, #12
 800a996:	bd30      	pop	{r4, r5, pc}
 800a998:	20000c60 	.word	0x20000c60

0800a99c <malloc>:
 800a99c:	4b02      	ldr	r3, [pc, #8]	; (800a9a8 <malloc+0xc>)
 800a99e:	4601      	mov	r1, r0
 800a9a0:	6818      	ldr	r0, [r3, #0]
 800a9a2:	f000 b823 	b.w	800a9ec <_malloc_r>
 800a9a6:	bf00      	nop
 800a9a8:	20000088 	.word	0x20000088

0800a9ac <sbrk_aligned>:
 800a9ac:	b570      	push	{r4, r5, r6, lr}
 800a9ae:	4e0e      	ldr	r6, [pc, #56]	; (800a9e8 <sbrk_aligned+0x3c>)
 800a9b0:	460c      	mov	r4, r1
 800a9b2:	6831      	ldr	r1, [r6, #0]
 800a9b4:	4605      	mov	r5, r0
 800a9b6:	b911      	cbnz	r1, 800a9be <sbrk_aligned+0x12>
 800a9b8:	f000 fe52 	bl	800b660 <_sbrk_r>
 800a9bc:	6030      	str	r0, [r6, #0]
 800a9be:	4621      	mov	r1, r4
 800a9c0:	4628      	mov	r0, r5
 800a9c2:	f000 fe4d 	bl	800b660 <_sbrk_r>
 800a9c6:	1c43      	adds	r3, r0, #1
 800a9c8:	d00a      	beq.n	800a9e0 <sbrk_aligned+0x34>
 800a9ca:	1cc4      	adds	r4, r0, #3
 800a9cc:	f024 0403 	bic.w	r4, r4, #3
 800a9d0:	42a0      	cmp	r0, r4
 800a9d2:	d007      	beq.n	800a9e4 <sbrk_aligned+0x38>
 800a9d4:	1a21      	subs	r1, r4, r0
 800a9d6:	4628      	mov	r0, r5
 800a9d8:	f000 fe42 	bl	800b660 <_sbrk_r>
 800a9dc:	3001      	adds	r0, #1
 800a9de:	d101      	bne.n	800a9e4 <sbrk_aligned+0x38>
 800a9e0:	f04f 34ff 	mov.w	r4, #4294967295
 800a9e4:	4620      	mov	r0, r4
 800a9e6:	bd70      	pop	{r4, r5, r6, pc}
 800a9e8:	20000c64 	.word	0x20000c64

0800a9ec <_malloc_r>:
 800a9ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9f0:	1ccd      	adds	r5, r1, #3
 800a9f2:	f025 0503 	bic.w	r5, r5, #3
 800a9f6:	3508      	adds	r5, #8
 800a9f8:	2d0c      	cmp	r5, #12
 800a9fa:	bf38      	it	cc
 800a9fc:	250c      	movcc	r5, #12
 800a9fe:	2d00      	cmp	r5, #0
 800aa00:	4607      	mov	r7, r0
 800aa02:	db01      	blt.n	800aa08 <_malloc_r+0x1c>
 800aa04:	42a9      	cmp	r1, r5
 800aa06:	d905      	bls.n	800aa14 <_malloc_r+0x28>
 800aa08:	230c      	movs	r3, #12
 800aa0a:	603b      	str	r3, [r7, #0]
 800aa0c:	2600      	movs	r6, #0
 800aa0e:	4630      	mov	r0, r6
 800aa10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa14:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800aae8 <_malloc_r+0xfc>
 800aa18:	f000 f868 	bl	800aaec <__malloc_lock>
 800aa1c:	f8d8 3000 	ldr.w	r3, [r8]
 800aa20:	461c      	mov	r4, r3
 800aa22:	bb5c      	cbnz	r4, 800aa7c <_malloc_r+0x90>
 800aa24:	4629      	mov	r1, r5
 800aa26:	4638      	mov	r0, r7
 800aa28:	f7ff ffc0 	bl	800a9ac <sbrk_aligned>
 800aa2c:	1c43      	adds	r3, r0, #1
 800aa2e:	4604      	mov	r4, r0
 800aa30:	d155      	bne.n	800aade <_malloc_r+0xf2>
 800aa32:	f8d8 4000 	ldr.w	r4, [r8]
 800aa36:	4626      	mov	r6, r4
 800aa38:	2e00      	cmp	r6, #0
 800aa3a:	d145      	bne.n	800aac8 <_malloc_r+0xdc>
 800aa3c:	2c00      	cmp	r4, #0
 800aa3e:	d048      	beq.n	800aad2 <_malloc_r+0xe6>
 800aa40:	6823      	ldr	r3, [r4, #0]
 800aa42:	4631      	mov	r1, r6
 800aa44:	4638      	mov	r0, r7
 800aa46:	eb04 0903 	add.w	r9, r4, r3
 800aa4a:	f000 fe09 	bl	800b660 <_sbrk_r>
 800aa4e:	4581      	cmp	r9, r0
 800aa50:	d13f      	bne.n	800aad2 <_malloc_r+0xe6>
 800aa52:	6821      	ldr	r1, [r4, #0]
 800aa54:	1a6d      	subs	r5, r5, r1
 800aa56:	4629      	mov	r1, r5
 800aa58:	4638      	mov	r0, r7
 800aa5a:	f7ff ffa7 	bl	800a9ac <sbrk_aligned>
 800aa5e:	3001      	adds	r0, #1
 800aa60:	d037      	beq.n	800aad2 <_malloc_r+0xe6>
 800aa62:	6823      	ldr	r3, [r4, #0]
 800aa64:	442b      	add	r3, r5
 800aa66:	6023      	str	r3, [r4, #0]
 800aa68:	f8d8 3000 	ldr.w	r3, [r8]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d038      	beq.n	800aae2 <_malloc_r+0xf6>
 800aa70:	685a      	ldr	r2, [r3, #4]
 800aa72:	42a2      	cmp	r2, r4
 800aa74:	d12b      	bne.n	800aace <_malloc_r+0xe2>
 800aa76:	2200      	movs	r2, #0
 800aa78:	605a      	str	r2, [r3, #4]
 800aa7a:	e00f      	b.n	800aa9c <_malloc_r+0xb0>
 800aa7c:	6822      	ldr	r2, [r4, #0]
 800aa7e:	1b52      	subs	r2, r2, r5
 800aa80:	d41f      	bmi.n	800aac2 <_malloc_r+0xd6>
 800aa82:	2a0b      	cmp	r2, #11
 800aa84:	d917      	bls.n	800aab6 <_malloc_r+0xca>
 800aa86:	1961      	adds	r1, r4, r5
 800aa88:	42a3      	cmp	r3, r4
 800aa8a:	6025      	str	r5, [r4, #0]
 800aa8c:	bf18      	it	ne
 800aa8e:	6059      	strne	r1, [r3, #4]
 800aa90:	6863      	ldr	r3, [r4, #4]
 800aa92:	bf08      	it	eq
 800aa94:	f8c8 1000 	streq.w	r1, [r8]
 800aa98:	5162      	str	r2, [r4, r5]
 800aa9a:	604b      	str	r3, [r1, #4]
 800aa9c:	4638      	mov	r0, r7
 800aa9e:	f104 060b 	add.w	r6, r4, #11
 800aaa2:	f000 f829 	bl	800aaf8 <__malloc_unlock>
 800aaa6:	f026 0607 	bic.w	r6, r6, #7
 800aaaa:	1d23      	adds	r3, r4, #4
 800aaac:	1af2      	subs	r2, r6, r3
 800aaae:	d0ae      	beq.n	800aa0e <_malloc_r+0x22>
 800aab0:	1b9b      	subs	r3, r3, r6
 800aab2:	50a3      	str	r3, [r4, r2]
 800aab4:	e7ab      	b.n	800aa0e <_malloc_r+0x22>
 800aab6:	42a3      	cmp	r3, r4
 800aab8:	6862      	ldr	r2, [r4, #4]
 800aaba:	d1dd      	bne.n	800aa78 <_malloc_r+0x8c>
 800aabc:	f8c8 2000 	str.w	r2, [r8]
 800aac0:	e7ec      	b.n	800aa9c <_malloc_r+0xb0>
 800aac2:	4623      	mov	r3, r4
 800aac4:	6864      	ldr	r4, [r4, #4]
 800aac6:	e7ac      	b.n	800aa22 <_malloc_r+0x36>
 800aac8:	4634      	mov	r4, r6
 800aaca:	6876      	ldr	r6, [r6, #4]
 800aacc:	e7b4      	b.n	800aa38 <_malloc_r+0x4c>
 800aace:	4613      	mov	r3, r2
 800aad0:	e7cc      	b.n	800aa6c <_malloc_r+0x80>
 800aad2:	230c      	movs	r3, #12
 800aad4:	603b      	str	r3, [r7, #0]
 800aad6:	4638      	mov	r0, r7
 800aad8:	f000 f80e 	bl	800aaf8 <__malloc_unlock>
 800aadc:	e797      	b.n	800aa0e <_malloc_r+0x22>
 800aade:	6025      	str	r5, [r4, #0]
 800aae0:	e7dc      	b.n	800aa9c <_malloc_r+0xb0>
 800aae2:	605b      	str	r3, [r3, #4]
 800aae4:	deff      	udf	#255	; 0xff
 800aae6:	bf00      	nop
 800aae8:	20000c60 	.word	0x20000c60

0800aaec <__malloc_lock>:
 800aaec:	4801      	ldr	r0, [pc, #4]	; (800aaf4 <__malloc_lock+0x8>)
 800aaee:	f7ff b85e 	b.w	8009bae <__retarget_lock_acquire_recursive>
 800aaf2:	bf00      	nop
 800aaf4:	20000c5c 	.word	0x20000c5c

0800aaf8 <__malloc_unlock>:
 800aaf8:	4801      	ldr	r0, [pc, #4]	; (800ab00 <__malloc_unlock+0x8>)
 800aafa:	f7ff b859 	b.w	8009bb0 <__retarget_lock_release_recursive>
 800aafe:	bf00      	nop
 800ab00:	20000c5c 	.word	0x20000c5c

0800ab04 <_Balloc>:
 800ab04:	b570      	push	{r4, r5, r6, lr}
 800ab06:	69c6      	ldr	r6, [r0, #28]
 800ab08:	4604      	mov	r4, r0
 800ab0a:	460d      	mov	r5, r1
 800ab0c:	b976      	cbnz	r6, 800ab2c <_Balloc+0x28>
 800ab0e:	2010      	movs	r0, #16
 800ab10:	f7ff ff44 	bl	800a99c <malloc>
 800ab14:	4602      	mov	r2, r0
 800ab16:	61e0      	str	r0, [r4, #28]
 800ab18:	b920      	cbnz	r0, 800ab24 <_Balloc+0x20>
 800ab1a:	4b18      	ldr	r3, [pc, #96]	; (800ab7c <_Balloc+0x78>)
 800ab1c:	4818      	ldr	r0, [pc, #96]	; (800ab80 <_Balloc+0x7c>)
 800ab1e:	216b      	movs	r1, #107	; 0x6b
 800ab20:	f7ff f856 	bl	8009bd0 <__assert_func>
 800ab24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ab28:	6006      	str	r6, [r0, #0]
 800ab2a:	60c6      	str	r6, [r0, #12]
 800ab2c:	69e6      	ldr	r6, [r4, #28]
 800ab2e:	68f3      	ldr	r3, [r6, #12]
 800ab30:	b183      	cbz	r3, 800ab54 <_Balloc+0x50>
 800ab32:	69e3      	ldr	r3, [r4, #28]
 800ab34:	68db      	ldr	r3, [r3, #12]
 800ab36:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ab3a:	b9b8      	cbnz	r0, 800ab6c <_Balloc+0x68>
 800ab3c:	2101      	movs	r1, #1
 800ab3e:	fa01 f605 	lsl.w	r6, r1, r5
 800ab42:	1d72      	adds	r2, r6, #5
 800ab44:	0092      	lsls	r2, r2, #2
 800ab46:	4620      	mov	r0, r4
 800ab48:	f000 fda1 	bl	800b68e <_calloc_r>
 800ab4c:	b160      	cbz	r0, 800ab68 <_Balloc+0x64>
 800ab4e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ab52:	e00e      	b.n	800ab72 <_Balloc+0x6e>
 800ab54:	2221      	movs	r2, #33	; 0x21
 800ab56:	2104      	movs	r1, #4
 800ab58:	4620      	mov	r0, r4
 800ab5a:	f000 fd98 	bl	800b68e <_calloc_r>
 800ab5e:	69e3      	ldr	r3, [r4, #28]
 800ab60:	60f0      	str	r0, [r6, #12]
 800ab62:	68db      	ldr	r3, [r3, #12]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d1e4      	bne.n	800ab32 <_Balloc+0x2e>
 800ab68:	2000      	movs	r0, #0
 800ab6a:	bd70      	pop	{r4, r5, r6, pc}
 800ab6c:	6802      	ldr	r2, [r0, #0]
 800ab6e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ab72:	2300      	movs	r3, #0
 800ab74:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ab78:	e7f7      	b.n	800ab6a <_Balloc+0x66>
 800ab7a:	bf00      	nop
 800ab7c:	0800db0a 	.word	0x0800db0a
 800ab80:	0800dc5f 	.word	0x0800dc5f

0800ab84 <_Bfree>:
 800ab84:	b570      	push	{r4, r5, r6, lr}
 800ab86:	69c6      	ldr	r6, [r0, #28]
 800ab88:	4605      	mov	r5, r0
 800ab8a:	460c      	mov	r4, r1
 800ab8c:	b976      	cbnz	r6, 800abac <_Bfree+0x28>
 800ab8e:	2010      	movs	r0, #16
 800ab90:	f7ff ff04 	bl	800a99c <malloc>
 800ab94:	4602      	mov	r2, r0
 800ab96:	61e8      	str	r0, [r5, #28]
 800ab98:	b920      	cbnz	r0, 800aba4 <_Bfree+0x20>
 800ab9a:	4b09      	ldr	r3, [pc, #36]	; (800abc0 <_Bfree+0x3c>)
 800ab9c:	4809      	ldr	r0, [pc, #36]	; (800abc4 <_Bfree+0x40>)
 800ab9e:	218f      	movs	r1, #143	; 0x8f
 800aba0:	f7ff f816 	bl	8009bd0 <__assert_func>
 800aba4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aba8:	6006      	str	r6, [r0, #0]
 800abaa:	60c6      	str	r6, [r0, #12]
 800abac:	b13c      	cbz	r4, 800abbe <_Bfree+0x3a>
 800abae:	69eb      	ldr	r3, [r5, #28]
 800abb0:	6862      	ldr	r2, [r4, #4]
 800abb2:	68db      	ldr	r3, [r3, #12]
 800abb4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800abb8:	6021      	str	r1, [r4, #0]
 800abba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800abbe:	bd70      	pop	{r4, r5, r6, pc}
 800abc0:	0800db0a 	.word	0x0800db0a
 800abc4:	0800dc5f 	.word	0x0800dc5f

0800abc8 <__multadd>:
 800abc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abcc:	690d      	ldr	r5, [r1, #16]
 800abce:	4607      	mov	r7, r0
 800abd0:	460c      	mov	r4, r1
 800abd2:	461e      	mov	r6, r3
 800abd4:	f101 0c14 	add.w	ip, r1, #20
 800abd8:	2000      	movs	r0, #0
 800abda:	f8dc 3000 	ldr.w	r3, [ip]
 800abde:	b299      	uxth	r1, r3
 800abe0:	fb02 6101 	mla	r1, r2, r1, r6
 800abe4:	0c1e      	lsrs	r6, r3, #16
 800abe6:	0c0b      	lsrs	r3, r1, #16
 800abe8:	fb02 3306 	mla	r3, r2, r6, r3
 800abec:	b289      	uxth	r1, r1
 800abee:	3001      	adds	r0, #1
 800abf0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800abf4:	4285      	cmp	r5, r0
 800abf6:	f84c 1b04 	str.w	r1, [ip], #4
 800abfa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800abfe:	dcec      	bgt.n	800abda <__multadd+0x12>
 800ac00:	b30e      	cbz	r6, 800ac46 <__multadd+0x7e>
 800ac02:	68a3      	ldr	r3, [r4, #8]
 800ac04:	42ab      	cmp	r3, r5
 800ac06:	dc19      	bgt.n	800ac3c <__multadd+0x74>
 800ac08:	6861      	ldr	r1, [r4, #4]
 800ac0a:	4638      	mov	r0, r7
 800ac0c:	3101      	adds	r1, #1
 800ac0e:	f7ff ff79 	bl	800ab04 <_Balloc>
 800ac12:	4680      	mov	r8, r0
 800ac14:	b928      	cbnz	r0, 800ac22 <__multadd+0x5a>
 800ac16:	4602      	mov	r2, r0
 800ac18:	4b0c      	ldr	r3, [pc, #48]	; (800ac4c <__multadd+0x84>)
 800ac1a:	480d      	ldr	r0, [pc, #52]	; (800ac50 <__multadd+0x88>)
 800ac1c:	21ba      	movs	r1, #186	; 0xba
 800ac1e:	f7fe ffd7 	bl	8009bd0 <__assert_func>
 800ac22:	6922      	ldr	r2, [r4, #16]
 800ac24:	3202      	adds	r2, #2
 800ac26:	f104 010c 	add.w	r1, r4, #12
 800ac2a:	0092      	lsls	r2, r2, #2
 800ac2c:	300c      	adds	r0, #12
 800ac2e:	f7fe ffc0 	bl	8009bb2 <memcpy>
 800ac32:	4621      	mov	r1, r4
 800ac34:	4638      	mov	r0, r7
 800ac36:	f7ff ffa5 	bl	800ab84 <_Bfree>
 800ac3a:	4644      	mov	r4, r8
 800ac3c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ac40:	3501      	adds	r5, #1
 800ac42:	615e      	str	r6, [r3, #20]
 800ac44:	6125      	str	r5, [r4, #16]
 800ac46:	4620      	mov	r0, r4
 800ac48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac4c:	0800dc4e 	.word	0x0800dc4e
 800ac50:	0800dc5f 	.word	0x0800dc5f

0800ac54 <__hi0bits>:
 800ac54:	0c03      	lsrs	r3, r0, #16
 800ac56:	041b      	lsls	r3, r3, #16
 800ac58:	b9d3      	cbnz	r3, 800ac90 <__hi0bits+0x3c>
 800ac5a:	0400      	lsls	r0, r0, #16
 800ac5c:	2310      	movs	r3, #16
 800ac5e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ac62:	bf04      	itt	eq
 800ac64:	0200      	lsleq	r0, r0, #8
 800ac66:	3308      	addeq	r3, #8
 800ac68:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ac6c:	bf04      	itt	eq
 800ac6e:	0100      	lsleq	r0, r0, #4
 800ac70:	3304      	addeq	r3, #4
 800ac72:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ac76:	bf04      	itt	eq
 800ac78:	0080      	lsleq	r0, r0, #2
 800ac7a:	3302      	addeq	r3, #2
 800ac7c:	2800      	cmp	r0, #0
 800ac7e:	db05      	blt.n	800ac8c <__hi0bits+0x38>
 800ac80:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ac84:	f103 0301 	add.w	r3, r3, #1
 800ac88:	bf08      	it	eq
 800ac8a:	2320      	moveq	r3, #32
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	4770      	bx	lr
 800ac90:	2300      	movs	r3, #0
 800ac92:	e7e4      	b.n	800ac5e <__hi0bits+0xa>

0800ac94 <__lo0bits>:
 800ac94:	6803      	ldr	r3, [r0, #0]
 800ac96:	f013 0207 	ands.w	r2, r3, #7
 800ac9a:	d00c      	beq.n	800acb6 <__lo0bits+0x22>
 800ac9c:	07d9      	lsls	r1, r3, #31
 800ac9e:	d422      	bmi.n	800ace6 <__lo0bits+0x52>
 800aca0:	079a      	lsls	r2, r3, #30
 800aca2:	bf49      	itett	mi
 800aca4:	085b      	lsrmi	r3, r3, #1
 800aca6:	089b      	lsrpl	r3, r3, #2
 800aca8:	6003      	strmi	r3, [r0, #0]
 800acaa:	2201      	movmi	r2, #1
 800acac:	bf5c      	itt	pl
 800acae:	6003      	strpl	r3, [r0, #0]
 800acb0:	2202      	movpl	r2, #2
 800acb2:	4610      	mov	r0, r2
 800acb4:	4770      	bx	lr
 800acb6:	b299      	uxth	r1, r3
 800acb8:	b909      	cbnz	r1, 800acbe <__lo0bits+0x2a>
 800acba:	0c1b      	lsrs	r3, r3, #16
 800acbc:	2210      	movs	r2, #16
 800acbe:	b2d9      	uxtb	r1, r3
 800acc0:	b909      	cbnz	r1, 800acc6 <__lo0bits+0x32>
 800acc2:	3208      	adds	r2, #8
 800acc4:	0a1b      	lsrs	r3, r3, #8
 800acc6:	0719      	lsls	r1, r3, #28
 800acc8:	bf04      	itt	eq
 800acca:	091b      	lsreq	r3, r3, #4
 800accc:	3204      	addeq	r2, #4
 800acce:	0799      	lsls	r1, r3, #30
 800acd0:	bf04      	itt	eq
 800acd2:	089b      	lsreq	r3, r3, #2
 800acd4:	3202      	addeq	r2, #2
 800acd6:	07d9      	lsls	r1, r3, #31
 800acd8:	d403      	bmi.n	800ace2 <__lo0bits+0x4e>
 800acda:	085b      	lsrs	r3, r3, #1
 800acdc:	f102 0201 	add.w	r2, r2, #1
 800ace0:	d003      	beq.n	800acea <__lo0bits+0x56>
 800ace2:	6003      	str	r3, [r0, #0]
 800ace4:	e7e5      	b.n	800acb2 <__lo0bits+0x1e>
 800ace6:	2200      	movs	r2, #0
 800ace8:	e7e3      	b.n	800acb2 <__lo0bits+0x1e>
 800acea:	2220      	movs	r2, #32
 800acec:	e7e1      	b.n	800acb2 <__lo0bits+0x1e>
	...

0800acf0 <__i2b>:
 800acf0:	b510      	push	{r4, lr}
 800acf2:	460c      	mov	r4, r1
 800acf4:	2101      	movs	r1, #1
 800acf6:	f7ff ff05 	bl	800ab04 <_Balloc>
 800acfa:	4602      	mov	r2, r0
 800acfc:	b928      	cbnz	r0, 800ad0a <__i2b+0x1a>
 800acfe:	4b05      	ldr	r3, [pc, #20]	; (800ad14 <__i2b+0x24>)
 800ad00:	4805      	ldr	r0, [pc, #20]	; (800ad18 <__i2b+0x28>)
 800ad02:	f240 1145 	movw	r1, #325	; 0x145
 800ad06:	f7fe ff63 	bl	8009bd0 <__assert_func>
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	6144      	str	r4, [r0, #20]
 800ad0e:	6103      	str	r3, [r0, #16]
 800ad10:	bd10      	pop	{r4, pc}
 800ad12:	bf00      	nop
 800ad14:	0800dc4e 	.word	0x0800dc4e
 800ad18:	0800dc5f 	.word	0x0800dc5f

0800ad1c <__multiply>:
 800ad1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad20:	4691      	mov	r9, r2
 800ad22:	690a      	ldr	r2, [r1, #16]
 800ad24:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ad28:	429a      	cmp	r2, r3
 800ad2a:	bfb8      	it	lt
 800ad2c:	460b      	movlt	r3, r1
 800ad2e:	460c      	mov	r4, r1
 800ad30:	bfbc      	itt	lt
 800ad32:	464c      	movlt	r4, r9
 800ad34:	4699      	movlt	r9, r3
 800ad36:	6927      	ldr	r7, [r4, #16]
 800ad38:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ad3c:	68a3      	ldr	r3, [r4, #8]
 800ad3e:	6861      	ldr	r1, [r4, #4]
 800ad40:	eb07 060a 	add.w	r6, r7, sl
 800ad44:	42b3      	cmp	r3, r6
 800ad46:	b085      	sub	sp, #20
 800ad48:	bfb8      	it	lt
 800ad4a:	3101      	addlt	r1, #1
 800ad4c:	f7ff feda 	bl	800ab04 <_Balloc>
 800ad50:	b930      	cbnz	r0, 800ad60 <__multiply+0x44>
 800ad52:	4602      	mov	r2, r0
 800ad54:	4b44      	ldr	r3, [pc, #272]	; (800ae68 <__multiply+0x14c>)
 800ad56:	4845      	ldr	r0, [pc, #276]	; (800ae6c <__multiply+0x150>)
 800ad58:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800ad5c:	f7fe ff38 	bl	8009bd0 <__assert_func>
 800ad60:	f100 0514 	add.w	r5, r0, #20
 800ad64:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ad68:	462b      	mov	r3, r5
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	4543      	cmp	r3, r8
 800ad6e:	d321      	bcc.n	800adb4 <__multiply+0x98>
 800ad70:	f104 0314 	add.w	r3, r4, #20
 800ad74:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ad78:	f109 0314 	add.w	r3, r9, #20
 800ad7c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ad80:	9202      	str	r2, [sp, #8]
 800ad82:	1b3a      	subs	r2, r7, r4
 800ad84:	3a15      	subs	r2, #21
 800ad86:	f022 0203 	bic.w	r2, r2, #3
 800ad8a:	3204      	adds	r2, #4
 800ad8c:	f104 0115 	add.w	r1, r4, #21
 800ad90:	428f      	cmp	r7, r1
 800ad92:	bf38      	it	cc
 800ad94:	2204      	movcc	r2, #4
 800ad96:	9201      	str	r2, [sp, #4]
 800ad98:	9a02      	ldr	r2, [sp, #8]
 800ad9a:	9303      	str	r3, [sp, #12]
 800ad9c:	429a      	cmp	r2, r3
 800ad9e:	d80c      	bhi.n	800adba <__multiply+0x9e>
 800ada0:	2e00      	cmp	r6, #0
 800ada2:	dd03      	ble.n	800adac <__multiply+0x90>
 800ada4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d05b      	beq.n	800ae64 <__multiply+0x148>
 800adac:	6106      	str	r6, [r0, #16]
 800adae:	b005      	add	sp, #20
 800adb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adb4:	f843 2b04 	str.w	r2, [r3], #4
 800adb8:	e7d8      	b.n	800ad6c <__multiply+0x50>
 800adba:	f8b3 a000 	ldrh.w	sl, [r3]
 800adbe:	f1ba 0f00 	cmp.w	sl, #0
 800adc2:	d024      	beq.n	800ae0e <__multiply+0xf2>
 800adc4:	f104 0e14 	add.w	lr, r4, #20
 800adc8:	46a9      	mov	r9, r5
 800adca:	f04f 0c00 	mov.w	ip, #0
 800adce:	f85e 2b04 	ldr.w	r2, [lr], #4
 800add2:	f8d9 1000 	ldr.w	r1, [r9]
 800add6:	fa1f fb82 	uxth.w	fp, r2
 800adda:	b289      	uxth	r1, r1
 800addc:	fb0a 110b 	mla	r1, sl, fp, r1
 800ade0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ade4:	f8d9 2000 	ldr.w	r2, [r9]
 800ade8:	4461      	add	r1, ip
 800adea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800adee:	fb0a c20b 	mla	r2, sl, fp, ip
 800adf2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800adf6:	b289      	uxth	r1, r1
 800adf8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800adfc:	4577      	cmp	r7, lr
 800adfe:	f849 1b04 	str.w	r1, [r9], #4
 800ae02:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ae06:	d8e2      	bhi.n	800adce <__multiply+0xb2>
 800ae08:	9a01      	ldr	r2, [sp, #4]
 800ae0a:	f845 c002 	str.w	ip, [r5, r2]
 800ae0e:	9a03      	ldr	r2, [sp, #12]
 800ae10:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ae14:	3304      	adds	r3, #4
 800ae16:	f1b9 0f00 	cmp.w	r9, #0
 800ae1a:	d021      	beq.n	800ae60 <__multiply+0x144>
 800ae1c:	6829      	ldr	r1, [r5, #0]
 800ae1e:	f104 0c14 	add.w	ip, r4, #20
 800ae22:	46ae      	mov	lr, r5
 800ae24:	f04f 0a00 	mov.w	sl, #0
 800ae28:	f8bc b000 	ldrh.w	fp, [ip]
 800ae2c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ae30:	fb09 220b 	mla	r2, r9, fp, r2
 800ae34:	4452      	add	r2, sl
 800ae36:	b289      	uxth	r1, r1
 800ae38:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ae3c:	f84e 1b04 	str.w	r1, [lr], #4
 800ae40:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ae44:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ae48:	f8be 1000 	ldrh.w	r1, [lr]
 800ae4c:	fb09 110a 	mla	r1, r9, sl, r1
 800ae50:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800ae54:	4567      	cmp	r7, ip
 800ae56:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ae5a:	d8e5      	bhi.n	800ae28 <__multiply+0x10c>
 800ae5c:	9a01      	ldr	r2, [sp, #4]
 800ae5e:	50a9      	str	r1, [r5, r2]
 800ae60:	3504      	adds	r5, #4
 800ae62:	e799      	b.n	800ad98 <__multiply+0x7c>
 800ae64:	3e01      	subs	r6, #1
 800ae66:	e79b      	b.n	800ada0 <__multiply+0x84>
 800ae68:	0800dc4e 	.word	0x0800dc4e
 800ae6c:	0800dc5f 	.word	0x0800dc5f

0800ae70 <__pow5mult>:
 800ae70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae74:	4615      	mov	r5, r2
 800ae76:	f012 0203 	ands.w	r2, r2, #3
 800ae7a:	4606      	mov	r6, r0
 800ae7c:	460f      	mov	r7, r1
 800ae7e:	d007      	beq.n	800ae90 <__pow5mult+0x20>
 800ae80:	4c25      	ldr	r4, [pc, #148]	; (800af18 <__pow5mult+0xa8>)
 800ae82:	3a01      	subs	r2, #1
 800ae84:	2300      	movs	r3, #0
 800ae86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ae8a:	f7ff fe9d 	bl	800abc8 <__multadd>
 800ae8e:	4607      	mov	r7, r0
 800ae90:	10ad      	asrs	r5, r5, #2
 800ae92:	d03d      	beq.n	800af10 <__pow5mult+0xa0>
 800ae94:	69f4      	ldr	r4, [r6, #28]
 800ae96:	b97c      	cbnz	r4, 800aeb8 <__pow5mult+0x48>
 800ae98:	2010      	movs	r0, #16
 800ae9a:	f7ff fd7f 	bl	800a99c <malloc>
 800ae9e:	4602      	mov	r2, r0
 800aea0:	61f0      	str	r0, [r6, #28]
 800aea2:	b928      	cbnz	r0, 800aeb0 <__pow5mult+0x40>
 800aea4:	4b1d      	ldr	r3, [pc, #116]	; (800af1c <__pow5mult+0xac>)
 800aea6:	481e      	ldr	r0, [pc, #120]	; (800af20 <__pow5mult+0xb0>)
 800aea8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800aeac:	f7fe fe90 	bl	8009bd0 <__assert_func>
 800aeb0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aeb4:	6004      	str	r4, [r0, #0]
 800aeb6:	60c4      	str	r4, [r0, #12]
 800aeb8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800aebc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aec0:	b94c      	cbnz	r4, 800aed6 <__pow5mult+0x66>
 800aec2:	f240 2171 	movw	r1, #625	; 0x271
 800aec6:	4630      	mov	r0, r6
 800aec8:	f7ff ff12 	bl	800acf0 <__i2b>
 800aecc:	2300      	movs	r3, #0
 800aece:	f8c8 0008 	str.w	r0, [r8, #8]
 800aed2:	4604      	mov	r4, r0
 800aed4:	6003      	str	r3, [r0, #0]
 800aed6:	f04f 0900 	mov.w	r9, #0
 800aeda:	07eb      	lsls	r3, r5, #31
 800aedc:	d50a      	bpl.n	800aef4 <__pow5mult+0x84>
 800aede:	4639      	mov	r1, r7
 800aee0:	4622      	mov	r2, r4
 800aee2:	4630      	mov	r0, r6
 800aee4:	f7ff ff1a 	bl	800ad1c <__multiply>
 800aee8:	4639      	mov	r1, r7
 800aeea:	4680      	mov	r8, r0
 800aeec:	4630      	mov	r0, r6
 800aeee:	f7ff fe49 	bl	800ab84 <_Bfree>
 800aef2:	4647      	mov	r7, r8
 800aef4:	106d      	asrs	r5, r5, #1
 800aef6:	d00b      	beq.n	800af10 <__pow5mult+0xa0>
 800aef8:	6820      	ldr	r0, [r4, #0]
 800aefa:	b938      	cbnz	r0, 800af0c <__pow5mult+0x9c>
 800aefc:	4622      	mov	r2, r4
 800aefe:	4621      	mov	r1, r4
 800af00:	4630      	mov	r0, r6
 800af02:	f7ff ff0b 	bl	800ad1c <__multiply>
 800af06:	6020      	str	r0, [r4, #0]
 800af08:	f8c0 9000 	str.w	r9, [r0]
 800af0c:	4604      	mov	r4, r0
 800af0e:	e7e4      	b.n	800aeda <__pow5mult+0x6a>
 800af10:	4638      	mov	r0, r7
 800af12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af16:	bf00      	nop
 800af18:	0800dda8 	.word	0x0800dda8
 800af1c:	0800db0a 	.word	0x0800db0a
 800af20:	0800dc5f 	.word	0x0800dc5f

0800af24 <__lshift>:
 800af24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af28:	460c      	mov	r4, r1
 800af2a:	6849      	ldr	r1, [r1, #4]
 800af2c:	6923      	ldr	r3, [r4, #16]
 800af2e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800af32:	68a3      	ldr	r3, [r4, #8]
 800af34:	4607      	mov	r7, r0
 800af36:	4691      	mov	r9, r2
 800af38:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800af3c:	f108 0601 	add.w	r6, r8, #1
 800af40:	42b3      	cmp	r3, r6
 800af42:	db0b      	blt.n	800af5c <__lshift+0x38>
 800af44:	4638      	mov	r0, r7
 800af46:	f7ff fddd 	bl	800ab04 <_Balloc>
 800af4a:	4605      	mov	r5, r0
 800af4c:	b948      	cbnz	r0, 800af62 <__lshift+0x3e>
 800af4e:	4602      	mov	r2, r0
 800af50:	4b28      	ldr	r3, [pc, #160]	; (800aff4 <__lshift+0xd0>)
 800af52:	4829      	ldr	r0, [pc, #164]	; (800aff8 <__lshift+0xd4>)
 800af54:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800af58:	f7fe fe3a 	bl	8009bd0 <__assert_func>
 800af5c:	3101      	adds	r1, #1
 800af5e:	005b      	lsls	r3, r3, #1
 800af60:	e7ee      	b.n	800af40 <__lshift+0x1c>
 800af62:	2300      	movs	r3, #0
 800af64:	f100 0114 	add.w	r1, r0, #20
 800af68:	f100 0210 	add.w	r2, r0, #16
 800af6c:	4618      	mov	r0, r3
 800af6e:	4553      	cmp	r3, sl
 800af70:	db33      	blt.n	800afda <__lshift+0xb6>
 800af72:	6920      	ldr	r0, [r4, #16]
 800af74:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800af78:	f104 0314 	add.w	r3, r4, #20
 800af7c:	f019 091f 	ands.w	r9, r9, #31
 800af80:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800af84:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800af88:	d02b      	beq.n	800afe2 <__lshift+0xbe>
 800af8a:	f1c9 0e20 	rsb	lr, r9, #32
 800af8e:	468a      	mov	sl, r1
 800af90:	2200      	movs	r2, #0
 800af92:	6818      	ldr	r0, [r3, #0]
 800af94:	fa00 f009 	lsl.w	r0, r0, r9
 800af98:	4310      	orrs	r0, r2
 800af9a:	f84a 0b04 	str.w	r0, [sl], #4
 800af9e:	f853 2b04 	ldr.w	r2, [r3], #4
 800afa2:	459c      	cmp	ip, r3
 800afa4:	fa22 f20e 	lsr.w	r2, r2, lr
 800afa8:	d8f3      	bhi.n	800af92 <__lshift+0x6e>
 800afaa:	ebac 0304 	sub.w	r3, ip, r4
 800afae:	3b15      	subs	r3, #21
 800afb0:	f023 0303 	bic.w	r3, r3, #3
 800afb4:	3304      	adds	r3, #4
 800afb6:	f104 0015 	add.w	r0, r4, #21
 800afba:	4584      	cmp	ip, r0
 800afbc:	bf38      	it	cc
 800afbe:	2304      	movcc	r3, #4
 800afc0:	50ca      	str	r2, [r1, r3]
 800afc2:	b10a      	cbz	r2, 800afc8 <__lshift+0xa4>
 800afc4:	f108 0602 	add.w	r6, r8, #2
 800afc8:	3e01      	subs	r6, #1
 800afca:	4638      	mov	r0, r7
 800afcc:	612e      	str	r6, [r5, #16]
 800afce:	4621      	mov	r1, r4
 800afd0:	f7ff fdd8 	bl	800ab84 <_Bfree>
 800afd4:	4628      	mov	r0, r5
 800afd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afda:	f842 0f04 	str.w	r0, [r2, #4]!
 800afde:	3301      	adds	r3, #1
 800afe0:	e7c5      	b.n	800af6e <__lshift+0x4a>
 800afe2:	3904      	subs	r1, #4
 800afe4:	f853 2b04 	ldr.w	r2, [r3], #4
 800afe8:	f841 2f04 	str.w	r2, [r1, #4]!
 800afec:	459c      	cmp	ip, r3
 800afee:	d8f9      	bhi.n	800afe4 <__lshift+0xc0>
 800aff0:	e7ea      	b.n	800afc8 <__lshift+0xa4>
 800aff2:	bf00      	nop
 800aff4:	0800dc4e 	.word	0x0800dc4e
 800aff8:	0800dc5f 	.word	0x0800dc5f

0800affc <__mcmp>:
 800affc:	b530      	push	{r4, r5, lr}
 800affe:	6902      	ldr	r2, [r0, #16]
 800b000:	690c      	ldr	r4, [r1, #16]
 800b002:	1b12      	subs	r2, r2, r4
 800b004:	d10e      	bne.n	800b024 <__mcmp+0x28>
 800b006:	f100 0314 	add.w	r3, r0, #20
 800b00a:	3114      	adds	r1, #20
 800b00c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b010:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b014:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b018:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b01c:	42a5      	cmp	r5, r4
 800b01e:	d003      	beq.n	800b028 <__mcmp+0x2c>
 800b020:	d305      	bcc.n	800b02e <__mcmp+0x32>
 800b022:	2201      	movs	r2, #1
 800b024:	4610      	mov	r0, r2
 800b026:	bd30      	pop	{r4, r5, pc}
 800b028:	4283      	cmp	r3, r0
 800b02a:	d3f3      	bcc.n	800b014 <__mcmp+0x18>
 800b02c:	e7fa      	b.n	800b024 <__mcmp+0x28>
 800b02e:	f04f 32ff 	mov.w	r2, #4294967295
 800b032:	e7f7      	b.n	800b024 <__mcmp+0x28>

0800b034 <__mdiff>:
 800b034:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b038:	460c      	mov	r4, r1
 800b03a:	4606      	mov	r6, r0
 800b03c:	4611      	mov	r1, r2
 800b03e:	4620      	mov	r0, r4
 800b040:	4690      	mov	r8, r2
 800b042:	f7ff ffdb 	bl	800affc <__mcmp>
 800b046:	1e05      	subs	r5, r0, #0
 800b048:	d110      	bne.n	800b06c <__mdiff+0x38>
 800b04a:	4629      	mov	r1, r5
 800b04c:	4630      	mov	r0, r6
 800b04e:	f7ff fd59 	bl	800ab04 <_Balloc>
 800b052:	b930      	cbnz	r0, 800b062 <__mdiff+0x2e>
 800b054:	4b3a      	ldr	r3, [pc, #232]	; (800b140 <__mdiff+0x10c>)
 800b056:	4602      	mov	r2, r0
 800b058:	f240 2137 	movw	r1, #567	; 0x237
 800b05c:	4839      	ldr	r0, [pc, #228]	; (800b144 <__mdiff+0x110>)
 800b05e:	f7fe fdb7 	bl	8009bd0 <__assert_func>
 800b062:	2301      	movs	r3, #1
 800b064:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b068:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b06c:	bfa4      	itt	ge
 800b06e:	4643      	movge	r3, r8
 800b070:	46a0      	movge	r8, r4
 800b072:	4630      	mov	r0, r6
 800b074:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b078:	bfa6      	itte	ge
 800b07a:	461c      	movge	r4, r3
 800b07c:	2500      	movge	r5, #0
 800b07e:	2501      	movlt	r5, #1
 800b080:	f7ff fd40 	bl	800ab04 <_Balloc>
 800b084:	b920      	cbnz	r0, 800b090 <__mdiff+0x5c>
 800b086:	4b2e      	ldr	r3, [pc, #184]	; (800b140 <__mdiff+0x10c>)
 800b088:	4602      	mov	r2, r0
 800b08a:	f240 2145 	movw	r1, #581	; 0x245
 800b08e:	e7e5      	b.n	800b05c <__mdiff+0x28>
 800b090:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b094:	6926      	ldr	r6, [r4, #16]
 800b096:	60c5      	str	r5, [r0, #12]
 800b098:	f104 0914 	add.w	r9, r4, #20
 800b09c:	f108 0514 	add.w	r5, r8, #20
 800b0a0:	f100 0e14 	add.w	lr, r0, #20
 800b0a4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b0a8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b0ac:	f108 0210 	add.w	r2, r8, #16
 800b0b0:	46f2      	mov	sl, lr
 800b0b2:	2100      	movs	r1, #0
 800b0b4:	f859 3b04 	ldr.w	r3, [r9], #4
 800b0b8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b0bc:	fa11 f88b 	uxtah	r8, r1, fp
 800b0c0:	b299      	uxth	r1, r3
 800b0c2:	0c1b      	lsrs	r3, r3, #16
 800b0c4:	eba8 0801 	sub.w	r8, r8, r1
 800b0c8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b0cc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b0d0:	fa1f f888 	uxth.w	r8, r8
 800b0d4:	1419      	asrs	r1, r3, #16
 800b0d6:	454e      	cmp	r6, r9
 800b0d8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b0dc:	f84a 3b04 	str.w	r3, [sl], #4
 800b0e0:	d8e8      	bhi.n	800b0b4 <__mdiff+0x80>
 800b0e2:	1b33      	subs	r3, r6, r4
 800b0e4:	3b15      	subs	r3, #21
 800b0e6:	f023 0303 	bic.w	r3, r3, #3
 800b0ea:	3304      	adds	r3, #4
 800b0ec:	3415      	adds	r4, #21
 800b0ee:	42a6      	cmp	r6, r4
 800b0f0:	bf38      	it	cc
 800b0f2:	2304      	movcc	r3, #4
 800b0f4:	441d      	add	r5, r3
 800b0f6:	4473      	add	r3, lr
 800b0f8:	469e      	mov	lr, r3
 800b0fa:	462e      	mov	r6, r5
 800b0fc:	4566      	cmp	r6, ip
 800b0fe:	d30e      	bcc.n	800b11e <__mdiff+0xea>
 800b100:	f10c 0203 	add.w	r2, ip, #3
 800b104:	1b52      	subs	r2, r2, r5
 800b106:	f022 0203 	bic.w	r2, r2, #3
 800b10a:	3d03      	subs	r5, #3
 800b10c:	45ac      	cmp	ip, r5
 800b10e:	bf38      	it	cc
 800b110:	2200      	movcc	r2, #0
 800b112:	4413      	add	r3, r2
 800b114:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b118:	b17a      	cbz	r2, 800b13a <__mdiff+0x106>
 800b11a:	6107      	str	r7, [r0, #16]
 800b11c:	e7a4      	b.n	800b068 <__mdiff+0x34>
 800b11e:	f856 8b04 	ldr.w	r8, [r6], #4
 800b122:	fa11 f288 	uxtah	r2, r1, r8
 800b126:	1414      	asrs	r4, r2, #16
 800b128:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b12c:	b292      	uxth	r2, r2
 800b12e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b132:	f84e 2b04 	str.w	r2, [lr], #4
 800b136:	1421      	asrs	r1, r4, #16
 800b138:	e7e0      	b.n	800b0fc <__mdiff+0xc8>
 800b13a:	3f01      	subs	r7, #1
 800b13c:	e7ea      	b.n	800b114 <__mdiff+0xe0>
 800b13e:	bf00      	nop
 800b140:	0800dc4e 	.word	0x0800dc4e
 800b144:	0800dc5f 	.word	0x0800dc5f

0800b148 <__d2b>:
 800b148:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b14c:	460f      	mov	r7, r1
 800b14e:	2101      	movs	r1, #1
 800b150:	ec59 8b10 	vmov	r8, r9, d0
 800b154:	4616      	mov	r6, r2
 800b156:	f7ff fcd5 	bl	800ab04 <_Balloc>
 800b15a:	4604      	mov	r4, r0
 800b15c:	b930      	cbnz	r0, 800b16c <__d2b+0x24>
 800b15e:	4602      	mov	r2, r0
 800b160:	4b24      	ldr	r3, [pc, #144]	; (800b1f4 <__d2b+0xac>)
 800b162:	4825      	ldr	r0, [pc, #148]	; (800b1f8 <__d2b+0xb0>)
 800b164:	f240 310f 	movw	r1, #783	; 0x30f
 800b168:	f7fe fd32 	bl	8009bd0 <__assert_func>
 800b16c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b170:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b174:	bb2d      	cbnz	r5, 800b1c2 <__d2b+0x7a>
 800b176:	9301      	str	r3, [sp, #4]
 800b178:	f1b8 0300 	subs.w	r3, r8, #0
 800b17c:	d026      	beq.n	800b1cc <__d2b+0x84>
 800b17e:	4668      	mov	r0, sp
 800b180:	9300      	str	r3, [sp, #0]
 800b182:	f7ff fd87 	bl	800ac94 <__lo0bits>
 800b186:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b18a:	b1e8      	cbz	r0, 800b1c8 <__d2b+0x80>
 800b18c:	f1c0 0320 	rsb	r3, r0, #32
 800b190:	fa02 f303 	lsl.w	r3, r2, r3
 800b194:	430b      	orrs	r3, r1
 800b196:	40c2      	lsrs	r2, r0
 800b198:	6163      	str	r3, [r4, #20]
 800b19a:	9201      	str	r2, [sp, #4]
 800b19c:	9b01      	ldr	r3, [sp, #4]
 800b19e:	61a3      	str	r3, [r4, #24]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	bf14      	ite	ne
 800b1a4:	2202      	movne	r2, #2
 800b1a6:	2201      	moveq	r2, #1
 800b1a8:	6122      	str	r2, [r4, #16]
 800b1aa:	b1bd      	cbz	r5, 800b1dc <__d2b+0x94>
 800b1ac:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b1b0:	4405      	add	r5, r0
 800b1b2:	603d      	str	r5, [r7, #0]
 800b1b4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b1b8:	6030      	str	r0, [r6, #0]
 800b1ba:	4620      	mov	r0, r4
 800b1bc:	b003      	add	sp, #12
 800b1be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b1c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b1c6:	e7d6      	b.n	800b176 <__d2b+0x2e>
 800b1c8:	6161      	str	r1, [r4, #20]
 800b1ca:	e7e7      	b.n	800b19c <__d2b+0x54>
 800b1cc:	a801      	add	r0, sp, #4
 800b1ce:	f7ff fd61 	bl	800ac94 <__lo0bits>
 800b1d2:	9b01      	ldr	r3, [sp, #4]
 800b1d4:	6163      	str	r3, [r4, #20]
 800b1d6:	3020      	adds	r0, #32
 800b1d8:	2201      	movs	r2, #1
 800b1da:	e7e5      	b.n	800b1a8 <__d2b+0x60>
 800b1dc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b1e0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b1e4:	6038      	str	r0, [r7, #0]
 800b1e6:	6918      	ldr	r0, [r3, #16]
 800b1e8:	f7ff fd34 	bl	800ac54 <__hi0bits>
 800b1ec:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b1f0:	e7e2      	b.n	800b1b8 <__d2b+0x70>
 800b1f2:	bf00      	nop
 800b1f4:	0800dc4e 	.word	0x0800dc4e
 800b1f8:	0800dc5f 	.word	0x0800dc5f

0800b1fc <__ssputs_r>:
 800b1fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b200:	688e      	ldr	r6, [r1, #8]
 800b202:	461f      	mov	r7, r3
 800b204:	42be      	cmp	r6, r7
 800b206:	680b      	ldr	r3, [r1, #0]
 800b208:	4682      	mov	sl, r0
 800b20a:	460c      	mov	r4, r1
 800b20c:	4690      	mov	r8, r2
 800b20e:	d82c      	bhi.n	800b26a <__ssputs_r+0x6e>
 800b210:	898a      	ldrh	r2, [r1, #12]
 800b212:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b216:	d026      	beq.n	800b266 <__ssputs_r+0x6a>
 800b218:	6965      	ldr	r5, [r4, #20]
 800b21a:	6909      	ldr	r1, [r1, #16]
 800b21c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b220:	eba3 0901 	sub.w	r9, r3, r1
 800b224:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b228:	1c7b      	adds	r3, r7, #1
 800b22a:	444b      	add	r3, r9
 800b22c:	106d      	asrs	r5, r5, #1
 800b22e:	429d      	cmp	r5, r3
 800b230:	bf38      	it	cc
 800b232:	461d      	movcc	r5, r3
 800b234:	0553      	lsls	r3, r2, #21
 800b236:	d527      	bpl.n	800b288 <__ssputs_r+0x8c>
 800b238:	4629      	mov	r1, r5
 800b23a:	f7ff fbd7 	bl	800a9ec <_malloc_r>
 800b23e:	4606      	mov	r6, r0
 800b240:	b360      	cbz	r0, 800b29c <__ssputs_r+0xa0>
 800b242:	6921      	ldr	r1, [r4, #16]
 800b244:	464a      	mov	r2, r9
 800b246:	f7fe fcb4 	bl	8009bb2 <memcpy>
 800b24a:	89a3      	ldrh	r3, [r4, #12]
 800b24c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b250:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b254:	81a3      	strh	r3, [r4, #12]
 800b256:	6126      	str	r6, [r4, #16]
 800b258:	6165      	str	r5, [r4, #20]
 800b25a:	444e      	add	r6, r9
 800b25c:	eba5 0509 	sub.w	r5, r5, r9
 800b260:	6026      	str	r6, [r4, #0]
 800b262:	60a5      	str	r5, [r4, #8]
 800b264:	463e      	mov	r6, r7
 800b266:	42be      	cmp	r6, r7
 800b268:	d900      	bls.n	800b26c <__ssputs_r+0x70>
 800b26a:	463e      	mov	r6, r7
 800b26c:	6820      	ldr	r0, [r4, #0]
 800b26e:	4632      	mov	r2, r6
 800b270:	4641      	mov	r1, r8
 800b272:	f000 f9db 	bl	800b62c <memmove>
 800b276:	68a3      	ldr	r3, [r4, #8]
 800b278:	1b9b      	subs	r3, r3, r6
 800b27a:	60a3      	str	r3, [r4, #8]
 800b27c:	6823      	ldr	r3, [r4, #0]
 800b27e:	4433      	add	r3, r6
 800b280:	6023      	str	r3, [r4, #0]
 800b282:	2000      	movs	r0, #0
 800b284:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b288:	462a      	mov	r2, r5
 800b28a:	f000 fa28 	bl	800b6de <_realloc_r>
 800b28e:	4606      	mov	r6, r0
 800b290:	2800      	cmp	r0, #0
 800b292:	d1e0      	bne.n	800b256 <__ssputs_r+0x5a>
 800b294:	6921      	ldr	r1, [r4, #16]
 800b296:	4650      	mov	r0, sl
 800b298:	f7ff fb34 	bl	800a904 <_free_r>
 800b29c:	230c      	movs	r3, #12
 800b29e:	f8ca 3000 	str.w	r3, [sl]
 800b2a2:	89a3      	ldrh	r3, [r4, #12]
 800b2a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2a8:	81a3      	strh	r3, [r4, #12]
 800b2aa:	f04f 30ff 	mov.w	r0, #4294967295
 800b2ae:	e7e9      	b.n	800b284 <__ssputs_r+0x88>

0800b2b0 <_svfiprintf_r>:
 800b2b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2b4:	4698      	mov	r8, r3
 800b2b6:	898b      	ldrh	r3, [r1, #12]
 800b2b8:	061b      	lsls	r3, r3, #24
 800b2ba:	b09d      	sub	sp, #116	; 0x74
 800b2bc:	4607      	mov	r7, r0
 800b2be:	460d      	mov	r5, r1
 800b2c0:	4614      	mov	r4, r2
 800b2c2:	d50e      	bpl.n	800b2e2 <_svfiprintf_r+0x32>
 800b2c4:	690b      	ldr	r3, [r1, #16]
 800b2c6:	b963      	cbnz	r3, 800b2e2 <_svfiprintf_r+0x32>
 800b2c8:	2140      	movs	r1, #64	; 0x40
 800b2ca:	f7ff fb8f 	bl	800a9ec <_malloc_r>
 800b2ce:	6028      	str	r0, [r5, #0]
 800b2d0:	6128      	str	r0, [r5, #16]
 800b2d2:	b920      	cbnz	r0, 800b2de <_svfiprintf_r+0x2e>
 800b2d4:	230c      	movs	r3, #12
 800b2d6:	603b      	str	r3, [r7, #0]
 800b2d8:	f04f 30ff 	mov.w	r0, #4294967295
 800b2dc:	e0d0      	b.n	800b480 <_svfiprintf_r+0x1d0>
 800b2de:	2340      	movs	r3, #64	; 0x40
 800b2e0:	616b      	str	r3, [r5, #20]
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	9309      	str	r3, [sp, #36]	; 0x24
 800b2e6:	2320      	movs	r3, #32
 800b2e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b2ec:	f8cd 800c 	str.w	r8, [sp, #12]
 800b2f0:	2330      	movs	r3, #48	; 0x30
 800b2f2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b498 <_svfiprintf_r+0x1e8>
 800b2f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b2fa:	f04f 0901 	mov.w	r9, #1
 800b2fe:	4623      	mov	r3, r4
 800b300:	469a      	mov	sl, r3
 800b302:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b306:	b10a      	cbz	r2, 800b30c <_svfiprintf_r+0x5c>
 800b308:	2a25      	cmp	r2, #37	; 0x25
 800b30a:	d1f9      	bne.n	800b300 <_svfiprintf_r+0x50>
 800b30c:	ebba 0b04 	subs.w	fp, sl, r4
 800b310:	d00b      	beq.n	800b32a <_svfiprintf_r+0x7a>
 800b312:	465b      	mov	r3, fp
 800b314:	4622      	mov	r2, r4
 800b316:	4629      	mov	r1, r5
 800b318:	4638      	mov	r0, r7
 800b31a:	f7ff ff6f 	bl	800b1fc <__ssputs_r>
 800b31e:	3001      	adds	r0, #1
 800b320:	f000 80a9 	beq.w	800b476 <_svfiprintf_r+0x1c6>
 800b324:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b326:	445a      	add	r2, fp
 800b328:	9209      	str	r2, [sp, #36]	; 0x24
 800b32a:	f89a 3000 	ldrb.w	r3, [sl]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	f000 80a1 	beq.w	800b476 <_svfiprintf_r+0x1c6>
 800b334:	2300      	movs	r3, #0
 800b336:	f04f 32ff 	mov.w	r2, #4294967295
 800b33a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b33e:	f10a 0a01 	add.w	sl, sl, #1
 800b342:	9304      	str	r3, [sp, #16]
 800b344:	9307      	str	r3, [sp, #28]
 800b346:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b34a:	931a      	str	r3, [sp, #104]	; 0x68
 800b34c:	4654      	mov	r4, sl
 800b34e:	2205      	movs	r2, #5
 800b350:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b354:	4850      	ldr	r0, [pc, #320]	; (800b498 <_svfiprintf_r+0x1e8>)
 800b356:	f7f4 ff3b 	bl	80001d0 <memchr>
 800b35a:	9a04      	ldr	r2, [sp, #16]
 800b35c:	b9d8      	cbnz	r0, 800b396 <_svfiprintf_r+0xe6>
 800b35e:	06d0      	lsls	r0, r2, #27
 800b360:	bf44      	itt	mi
 800b362:	2320      	movmi	r3, #32
 800b364:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b368:	0711      	lsls	r1, r2, #28
 800b36a:	bf44      	itt	mi
 800b36c:	232b      	movmi	r3, #43	; 0x2b
 800b36e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b372:	f89a 3000 	ldrb.w	r3, [sl]
 800b376:	2b2a      	cmp	r3, #42	; 0x2a
 800b378:	d015      	beq.n	800b3a6 <_svfiprintf_r+0xf6>
 800b37a:	9a07      	ldr	r2, [sp, #28]
 800b37c:	4654      	mov	r4, sl
 800b37e:	2000      	movs	r0, #0
 800b380:	f04f 0c0a 	mov.w	ip, #10
 800b384:	4621      	mov	r1, r4
 800b386:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b38a:	3b30      	subs	r3, #48	; 0x30
 800b38c:	2b09      	cmp	r3, #9
 800b38e:	d94d      	bls.n	800b42c <_svfiprintf_r+0x17c>
 800b390:	b1b0      	cbz	r0, 800b3c0 <_svfiprintf_r+0x110>
 800b392:	9207      	str	r2, [sp, #28]
 800b394:	e014      	b.n	800b3c0 <_svfiprintf_r+0x110>
 800b396:	eba0 0308 	sub.w	r3, r0, r8
 800b39a:	fa09 f303 	lsl.w	r3, r9, r3
 800b39e:	4313      	orrs	r3, r2
 800b3a0:	9304      	str	r3, [sp, #16]
 800b3a2:	46a2      	mov	sl, r4
 800b3a4:	e7d2      	b.n	800b34c <_svfiprintf_r+0x9c>
 800b3a6:	9b03      	ldr	r3, [sp, #12]
 800b3a8:	1d19      	adds	r1, r3, #4
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	9103      	str	r1, [sp, #12]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	bfbb      	ittet	lt
 800b3b2:	425b      	neglt	r3, r3
 800b3b4:	f042 0202 	orrlt.w	r2, r2, #2
 800b3b8:	9307      	strge	r3, [sp, #28]
 800b3ba:	9307      	strlt	r3, [sp, #28]
 800b3bc:	bfb8      	it	lt
 800b3be:	9204      	strlt	r2, [sp, #16]
 800b3c0:	7823      	ldrb	r3, [r4, #0]
 800b3c2:	2b2e      	cmp	r3, #46	; 0x2e
 800b3c4:	d10c      	bne.n	800b3e0 <_svfiprintf_r+0x130>
 800b3c6:	7863      	ldrb	r3, [r4, #1]
 800b3c8:	2b2a      	cmp	r3, #42	; 0x2a
 800b3ca:	d134      	bne.n	800b436 <_svfiprintf_r+0x186>
 800b3cc:	9b03      	ldr	r3, [sp, #12]
 800b3ce:	1d1a      	adds	r2, r3, #4
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	9203      	str	r2, [sp, #12]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	bfb8      	it	lt
 800b3d8:	f04f 33ff 	movlt.w	r3, #4294967295
 800b3dc:	3402      	adds	r4, #2
 800b3de:	9305      	str	r3, [sp, #20]
 800b3e0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b4a8 <_svfiprintf_r+0x1f8>
 800b3e4:	7821      	ldrb	r1, [r4, #0]
 800b3e6:	2203      	movs	r2, #3
 800b3e8:	4650      	mov	r0, sl
 800b3ea:	f7f4 fef1 	bl	80001d0 <memchr>
 800b3ee:	b138      	cbz	r0, 800b400 <_svfiprintf_r+0x150>
 800b3f0:	9b04      	ldr	r3, [sp, #16]
 800b3f2:	eba0 000a 	sub.w	r0, r0, sl
 800b3f6:	2240      	movs	r2, #64	; 0x40
 800b3f8:	4082      	lsls	r2, r0
 800b3fa:	4313      	orrs	r3, r2
 800b3fc:	3401      	adds	r4, #1
 800b3fe:	9304      	str	r3, [sp, #16]
 800b400:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b404:	4825      	ldr	r0, [pc, #148]	; (800b49c <_svfiprintf_r+0x1ec>)
 800b406:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b40a:	2206      	movs	r2, #6
 800b40c:	f7f4 fee0 	bl	80001d0 <memchr>
 800b410:	2800      	cmp	r0, #0
 800b412:	d038      	beq.n	800b486 <_svfiprintf_r+0x1d6>
 800b414:	4b22      	ldr	r3, [pc, #136]	; (800b4a0 <_svfiprintf_r+0x1f0>)
 800b416:	bb1b      	cbnz	r3, 800b460 <_svfiprintf_r+0x1b0>
 800b418:	9b03      	ldr	r3, [sp, #12]
 800b41a:	3307      	adds	r3, #7
 800b41c:	f023 0307 	bic.w	r3, r3, #7
 800b420:	3308      	adds	r3, #8
 800b422:	9303      	str	r3, [sp, #12]
 800b424:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b426:	4433      	add	r3, r6
 800b428:	9309      	str	r3, [sp, #36]	; 0x24
 800b42a:	e768      	b.n	800b2fe <_svfiprintf_r+0x4e>
 800b42c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b430:	460c      	mov	r4, r1
 800b432:	2001      	movs	r0, #1
 800b434:	e7a6      	b.n	800b384 <_svfiprintf_r+0xd4>
 800b436:	2300      	movs	r3, #0
 800b438:	3401      	adds	r4, #1
 800b43a:	9305      	str	r3, [sp, #20]
 800b43c:	4619      	mov	r1, r3
 800b43e:	f04f 0c0a 	mov.w	ip, #10
 800b442:	4620      	mov	r0, r4
 800b444:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b448:	3a30      	subs	r2, #48	; 0x30
 800b44a:	2a09      	cmp	r2, #9
 800b44c:	d903      	bls.n	800b456 <_svfiprintf_r+0x1a6>
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d0c6      	beq.n	800b3e0 <_svfiprintf_r+0x130>
 800b452:	9105      	str	r1, [sp, #20]
 800b454:	e7c4      	b.n	800b3e0 <_svfiprintf_r+0x130>
 800b456:	fb0c 2101 	mla	r1, ip, r1, r2
 800b45a:	4604      	mov	r4, r0
 800b45c:	2301      	movs	r3, #1
 800b45e:	e7f0      	b.n	800b442 <_svfiprintf_r+0x192>
 800b460:	ab03      	add	r3, sp, #12
 800b462:	9300      	str	r3, [sp, #0]
 800b464:	462a      	mov	r2, r5
 800b466:	4b0f      	ldr	r3, [pc, #60]	; (800b4a4 <_svfiprintf_r+0x1f4>)
 800b468:	a904      	add	r1, sp, #16
 800b46a:	4638      	mov	r0, r7
 800b46c:	f7fd fe36 	bl	80090dc <_printf_float>
 800b470:	1c42      	adds	r2, r0, #1
 800b472:	4606      	mov	r6, r0
 800b474:	d1d6      	bne.n	800b424 <_svfiprintf_r+0x174>
 800b476:	89ab      	ldrh	r3, [r5, #12]
 800b478:	065b      	lsls	r3, r3, #25
 800b47a:	f53f af2d 	bmi.w	800b2d8 <_svfiprintf_r+0x28>
 800b47e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b480:	b01d      	add	sp, #116	; 0x74
 800b482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b486:	ab03      	add	r3, sp, #12
 800b488:	9300      	str	r3, [sp, #0]
 800b48a:	462a      	mov	r2, r5
 800b48c:	4b05      	ldr	r3, [pc, #20]	; (800b4a4 <_svfiprintf_r+0x1f4>)
 800b48e:	a904      	add	r1, sp, #16
 800b490:	4638      	mov	r0, r7
 800b492:	f7fe f8c7 	bl	8009624 <_printf_i>
 800b496:	e7eb      	b.n	800b470 <_svfiprintf_r+0x1c0>
 800b498:	0800ddb4 	.word	0x0800ddb4
 800b49c:	0800ddbe 	.word	0x0800ddbe
 800b4a0:	080090dd 	.word	0x080090dd
 800b4a4:	0800b1fd 	.word	0x0800b1fd
 800b4a8:	0800ddba 	.word	0x0800ddba

0800b4ac <__sflush_r>:
 800b4ac:	898a      	ldrh	r2, [r1, #12]
 800b4ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4b2:	4605      	mov	r5, r0
 800b4b4:	0710      	lsls	r0, r2, #28
 800b4b6:	460c      	mov	r4, r1
 800b4b8:	d458      	bmi.n	800b56c <__sflush_r+0xc0>
 800b4ba:	684b      	ldr	r3, [r1, #4]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	dc05      	bgt.n	800b4cc <__sflush_r+0x20>
 800b4c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	dc02      	bgt.n	800b4cc <__sflush_r+0x20>
 800b4c6:	2000      	movs	r0, #0
 800b4c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b4ce:	2e00      	cmp	r6, #0
 800b4d0:	d0f9      	beq.n	800b4c6 <__sflush_r+0x1a>
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b4d8:	682f      	ldr	r7, [r5, #0]
 800b4da:	6a21      	ldr	r1, [r4, #32]
 800b4dc:	602b      	str	r3, [r5, #0]
 800b4de:	d032      	beq.n	800b546 <__sflush_r+0x9a>
 800b4e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b4e2:	89a3      	ldrh	r3, [r4, #12]
 800b4e4:	075a      	lsls	r2, r3, #29
 800b4e6:	d505      	bpl.n	800b4f4 <__sflush_r+0x48>
 800b4e8:	6863      	ldr	r3, [r4, #4]
 800b4ea:	1ac0      	subs	r0, r0, r3
 800b4ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b4ee:	b10b      	cbz	r3, 800b4f4 <__sflush_r+0x48>
 800b4f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b4f2:	1ac0      	subs	r0, r0, r3
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	4602      	mov	r2, r0
 800b4f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b4fa:	6a21      	ldr	r1, [r4, #32]
 800b4fc:	4628      	mov	r0, r5
 800b4fe:	47b0      	blx	r6
 800b500:	1c43      	adds	r3, r0, #1
 800b502:	89a3      	ldrh	r3, [r4, #12]
 800b504:	d106      	bne.n	800b514 <__sflush_r+0x68>
 800b506:	6829      	ldr	r1, [r5, #0]
 800b508:	291d      	cmp	r1, #29
 800b50a:	d82b      	bhi.n	800b564 <__sflush_r+0xb8>
 800b50c:	4a29      	ldr	r2, [pc, #164]	; (800b5b4 <__sflush_r+0x108>)
 800b50e:	410a      	asrs	r2, r1
 800b510:	07d6      	lsls	r6, r2, #31
 800b512:	d427      	bmi.n	800b564 <__sflush_r+0xb8>
 800b514:	2200      	movs	r2, #0
 800b516:	6062      	str	r2, [r4, #4]
 800b518:	04d9      	lsls	r1, r3, #19
 800b51a:	6922      	ldr	r2, [r4, #16]
 800b51c:	6022      	str	r2, [r4, #0]
 800b51e:	d504      	bpl.n	800b52a <__sflush_r+0x7e>
 800b520:	1c42      	adds	r2, r0, #1
 800b522:	d101      	bne.n	800b528 <__sflush_r+0x7c>
 800b524:	682b      	ldr	r3, [r5, #0]
 800b526:	b903      	cbnz	r3, 800b52a <__sflush_r+0x7e>
 800b528:	6560      	str	r0, [r4, #84]	; 0x54
 800b52a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b52c:	602f      	str	r7, [r5, #0]
 800b52e:	2900      	cmp	r1, #0
 800b530:	d0c9      	beq.n	800b4c6 <__sflush_r+0x1a>
 800b532:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b536:	4299      	cmp	r1, r3
 800b538:	d002      	beq.n	800b540 <__sflush_r+0x94>
 800b53a:	4628      	mov	r0, r5
 800b53c:	f7ff f9e2 	bl	800a904 <_free_r>
 800b540:	2000      	movs	r0, #0
 800b542:	6360      	str	r0, [r4, #52]	; 0x34
 800b544:	e7c0      	b.n	800b4c8 <__sflush_r+0x1c>
 800b546:	2301      	movs	r3, #1
 800b548:	4628      	mov	r0, r5
 800b54a:	47b0      	blx	r6
 800b54c:	1c41      	adds	r1, r0, #1
 800b54e:	d1c8      	bne.n	800b4e2 <__sflush_r+0x36>
 800b550:	682b      	ldr	r3, [r5, #0]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d0c5      	beq.n	800b4e2 <__sflush_r+0x36>
 800b556:	2b1d      	cmp	r3, #29
 800b558:	d001      	beq.n	800b55e <__sflush_r+0xb2>
 800b55a:	2b16      	cmp	r3, #22
 800b55c:	d101      	bne.n	800b562 <__sflush_r+0xb6>
 800b55e:	602f      	str	r7, [r5, #0]
 800b560:	e7b1      	b.n	800b4c6 <__sflush_r+0x1a>
 800b562:	89a3      	ldrh	r3, [r4, #12]
 800b564:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b568:	81a3      	strh	r3, [r4, #12]
 800b56a:	e7ad      	b.n	800b4c8 <__sflush_r+0x1c>
 800b56c:	690f      	ldr	r7, [r1, #16]
 800b56e:	2f00      	cmp	r7, #0
 800b570:	d0a9      	beq.n	800b4c6 <__sflush_r+0x1a>
 800b572:	0793      	lsls	r3, r2, #30
 800b574:	680e      	ldr	r6, [r1, #0]
 800b576:	bf08      	it	eq
 800b578:	694b      	ldreq	r3, [r1, #20]
 800b57a:	600f      	str	r7, [r1, #0]
 800b57c:	bf18      	it	ne
 800b57e:	2300      	movne	r3, #0
 800b580:	eba6 0807 	sub.w	r8, r6, r7
 800b584:	608b      	str	r3, [r1, #8]
 800b586:	f1b8 0f00 	cmp.w	r8, #0
 800b58a:	dd9c      	ble.n	800b4c6 <__sflush_r+0x1a>
 800b58c:	6a21      	ldr	r1, [r4, #32]
 800b58e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b590:	4643      	mov	r3, r8
 800b592:	463a      	mov	r2, r7
 800b594:	4628      	mov	r0, r5
 800b596:	47b0      	blx	r6
 800b598:	2800      	cmp	r0, #0
 800b59a:	dc06      	bgt.n	800b5aa <__sflush_r+0xfe>
 800b59c:	89a3      	ldrh	r3, [r4, #12]
 800b59e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5a2:	81a3      	strh	r3, [r4, #12]
 800b5a4:	f04f 30ff 	mov.w	r0, #4294967295
 800b5a8:	e78e      	b.n	800b4c8 <__sflush_r+0x1c>
 800b5aa:	4407      	add	r7, r0
 800b5ac:	eba8 0800 	sub.w	r8, r8, r0
 800b5b0:	e7e9      	b.n	800b586 <__sflush_r+0xda>
 800b5b2:	bf00      	nop
 800b5b4:	dfbffffe 	.word	0xdfbffffe

0800b5b8 <_fflush_r>:
 800b5b8:	b538      	push	{r3, r4, r5, lr}
 800b5ba:	690b      	ldr	r3, [r1, #16]
 800b5bc:	4605      	mov	r5, r0
 800b5be:	460c      	mov	r4, r1
 800b5c0:	b913      	cbnz	r3, 800b5c8 <_fflush_r+0x10>
 800b5c2:	2500      	movs	r5, #0
 800b5c4:	4628      	mov	r0, r5
 800b5c6:	bd38      	pop	{r3, r4, r5, pc}
 800b5c8:	b118      	cbz	r0, 800b5d2 <_fflush_r+0x1a>
 800b5ca:	6a03      	ldr	r3, [r0, #32]
 800b5cc:	b90b      	cbnz	r3, 800b5d2 <_fflush_r+0x1a>
 800b5ce:	f7fe f9d7 	bl	8009980 <__sinit>
 800b5d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d0f3      	beq.n	800b5c2 <_fflush_r+0xa>
 800b5da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b5dc:	07d0      	lsls	r0, r2, #31
 800b5de:	d404      	bmi.n	800b5ea <_fflush_r+0x32>
 800b5e0:	0599      	lsls	r1, r3, #22
 800b5e2:	d402      	bmi.n	800b5ea <_fflush_r+0x32>
 800b5e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b5e6:	f7fe fae2 	bl	8009bae <__retarget_lock_acquire_recursive>
 800b5ea:	4628      	mov	r0, r5
 800b5ec:	4621      	mov	r1, r4
 800b5ee:	f7ff ff5d 	bl	800b4ac <__sflush_r>
 800b5f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b5f4:	07da      	lsls	r2, r3, #31
 800b5f6:	4605      	mov	r5, r0
 800b5f8:	d4e4      	bmi.n	800b5c4 <_fflush_r+0xc>
 800b5fa:	89a3      	ldrh	r3, [r4, #12]
 800b5fc:	059b      	lsls	r3, r3, #22
 800b5fe:	d4e1      	bmi.n	800b5c4 <_fflush_r+0xc>
 800b600:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b602:	f7fe fad5 	bl	8009bb0 <__retarget_lock_release_recursive>
 800b606:	e7dd      	b.n	800b5c4 <_fflush_r+0xc>

0800b608 <fiprintf>:
 800b608:	b40e      	push	{r1, r2, r3}
 800b60a:	b503      	push	{r0, r1, lr}
 800b60c:	4601      	mov	r1, r0
 800b60e:	ab03      	add	r3, sp, #12
 800b610:	4805      	ldr	r0, [pc, #20]	; (800b628 <fiprintf+0x20>)
 800b612:	f853 2b04 	ldr.w	r2, [r3], #4
 800b616:	6800      	ldr	r0, [r0, #0]
 800b618:	9301      	str	r3, [sp, #4]
 800b61a:	f000 f8c5 	bl	800b7a8 <_vfiprintf_r>
 800b61e:	b002      	add	sp, #8
 800b620:	f85d eb04 	ldr.w	lr, [sp], #4
 800b624:	b003      	add	sp, #12
 800b626:	4770      	bx	lr
 800b628:	20000088 	.word	0x20000088

0800b62c <memmove>:
 800b62c:	4288      	cmp	r0, r1
 800b62e:	b510      	push	{r4, lr}
 800b630:	eb01 0402 	add.w	r4, r1, r2
 800b634:	d902      	bls.n	800b63c <memmove+0x10>
 800b636:	4284      	cmp	r4, r0
 800b638:	4623      	mov	r3, r4
 800b63a:	d807      	bhi.n	800b64c <memmove+0x20>
 800b63c:	1e43      	subs	r3, r0, #1
 800b63e:	42a1      	cmp	r1, r4
 800b640:	d008      	beq.n	800b654 <memmove+0x28>
 800b642:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b646:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b64a:	e7f8      	b.n	800b63e <memmove+0x12>
 800b64c:	4402      	add	r2, r0
 800b64e:	4601      	mov	r1, r0
 800b650:	428a      	cmp	r2, r1
 800b652:	d100      	bne.n	800b656 <memmove+0x2a>
 800b654:	bd10      	pop	{r4, pc}
 800b656:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b65a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b65e:	e7f7      	b.n	800b650 <memmove+0x24>

0800b660 <_sbrk_r>:
 800b660:	b538      	push	{r3, r4, r5, lr}
 800b662:	4d06      	ldr	r5, [pc, #24]	; (800b67c <_sbrk_r+0x1c>)
 800b664:	2300      	movs	r3, #0
 800b666:	4604      	mov	r4, r0
 800b668:	4608      	mov	r0, r1
 800b66a:	602b      	str	r3, [r5, #0]
 800b66c:	f7f5 fbd4 	bl	8000e18 <_sbrk>
 800b670:	1c43      	adds	r3, r0, #1
 800b672:	d102      	bne.n	800b67a <_sbrk_r+0x1a>
 800b674:	682b      	ldr	r3, [r5, #0]
 800b676:	b103      	cbz	r3, 800b67a <_sbrk_r+0x1a>
 800b678:	6023      	str	r3, [r4, #0]
 800b67a:	bd38      	pop	{r3, r4, r5, pc}
 800b67c:	20000c58 	.word	0x20000c58

0800b680 <abort>:
 800b680:	b508      	push	{r3, lr}
 800b682:	2006      	movs	r0, #6
 800b684:	f000 fa68 	bl	800bb58 <raise>
 800b688:	2001      	movs	r0, #1
 800b68a:	f7f5 fb4d 	bl	8000d28 <_exit>

0800b68e <_calloc_r>:
 800b68e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b690:	fba1 2402 	umull	r2, r4, r1, r2
 800b694:	b94c      	cbnz	r4, 800b6aa <_calloc_r+0x1c>
 800b696:	4611      	mov	r1, r2
 800b698:	9201      	str	r2, [sp, #4]
 800b69a:	f7ff f9a7 	bl	800a9ec <_malloc_r>
 800b69e:	9a01      	ldr	r2, [sp, #4]
 800b6a0:	4605      	mov	r5, r0
 800b6a2:	b930      	cbnz	r0, 800b6b2 <_calloc_r+0x24>
 800b6a4:	4628      	mov	r0, r5
 800b6a6:	b003      	add	sp, #12
 800b6a8:	bd30      	pop	{r4, r5, pc}
 800b6aa:	220c      	movs	r2, #12
 800b6ac:	6002      	str	r2, [r0, #0]
 800b6ae:	2500      	movs	r5, #0
 800b6b0:	e7f8      	b.n	800b6a4 <_calloc_r+0x16>
 800b6b2:	4621      	mov	r1, r4
 800b6b4:	f7fe f9fe 	bl	8009ab4 <memset>
 800b6b8:	e7f4      	b.n	800b6a4 <_calloc_r+0x16>

0800b6ba <__ascii_mbtowc>:
 800b6ba:	b082      	sub	sp, #8
 800b6bc:	b901      	cbnz	r1, 800b6c0 <__ascii_mbtowc+0x6>
 800b6be:	a901      	add	r1, sp, #4
 800b6c0:	b142      	cbz	r2, 800b6d4 <__ascii_mbtowc+0x1a>
 800b6c2:	b14b      	cbz	r3, 800b6d8 <__ascii_mbtowc+0x1e>
 800b6c4:	7813      	ldrb	r3, [r2, #0]
 800b6c6:	600b      	str	r3, [r1, #0]
 800b6c8:	7812      	ldrb	r2, [r2, #0]
 800b6ca:	1e10      	subs	r0, r2, #0
 800b6cc:	bf18      	it	ne
 800b6ce:	2001      	movne	r0, #1
 800b6d0:	b002      	add	sp, #8
 800b6d2:	4770      	bx	lr
 800b6d4:	4610      	mov	r0, r2
 800b6d6:	e7fb      	b.n	800b6d0 <__ascii_mbtowc+0x16>
 800b6d8:	f06f 0001 	mvn.w	r0, #1
 800b6dc:	e7f8      	b.n	800b6d0 <__ascii_mbtowc+0x16>

0800b6de <_realloc_r>:
 800b6de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6e2:	4680      	mov	r8, r0
 800b6e4:	4614      	mov	r4, r2
 800b6e6:	460e      	mov	r6, r1
 800b6e8:	b921      	cbnz	r1, 800b6f4 <_realloc_r+0x16>
 800b6ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b6ee:	4611      	mov	r1, r2
 800b6f0:	f7ff b97c 	b.w	800a9ec <_malloc_r>
 800b6f4:	b92a      	cbnz	r2, 800b702 <_realloc_r+0x24>
 800b6f6:	f7ff f905 	bl	800a904 <_free_r>
 800b6fa:	4625      	mov	r5, r4
 800b6fc:	4628      	mov	r0, r5
 800b6fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b702:	f000 fa45 	bl	800bb90 <_malloc_usable_size_r>
 800b706:	4284      	cmp	r4, r0
 800b708:	4607      	mov	r7, r0
 800b70a:	d802      	bhi.n	800b712 <_realloc_r+0x34>
 800b70c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b710:	d812      	bhi.n	800b738 <_realloc_r+0x5a>
 800b712:	4621      	mov	r1, r4
 800b714:	4640      	mov	r0, r8
 800b716:	f7ff f969 	bl	800a9ec <_malloc_r>
 800b71a:	4605      	mov	r5, r0
 800b71c:	2800      	cmp	r0, #0
 800b71e:	d0ed      	beq.n	800b6fc <_realloc_r+0x1e>
 800b720:	42bc      	cmp	r4, r7
 800b722:	4622      	mov	r2, r4
 800b724:	4631      	mov	r1, r6
 800b726:	bf28      	it	cs
 800b728:	463a      	movcs	r2, r7
 800b72a:	f7fe fa42 	bl	8009bb2 <memcpy>
 800b72e:	4631      	mov	r1, r6
 800b730:	4640      	mov	r0, r8
 800b732:	f7ff f8e7 	bl	800a904 <_free_r>
 800b736:	e7e1      	b.n	800b6fc <_realloc_r+0x1e>
 800b738:	4635      	mov	r5, r6
 800b73a:	e7df      	b.n	800b6fc <_realloc_r+0x1e>

0800b73c <__ascii_wctomb>:
 800b73c:	b149      	cbz	r1, 800b752 <__ascii_wctomb+0x16>
 800b73e:	2aff      	cmp	r2, #255	; 0xff
 800b740:	bf85      	ittet	hi
 800b742:	238a      	movhi	r3, #138	; 0x8a
 800b744:	6003      	strhi	r3, [r0, #0]
 800b746:	700a      	strbls	r2, [r1, #0]
 800b748:	f04f 30ff 	movhi.w	r0, #4294967295
 800b74c:	bf98      	it	ls
 800b74e:	2001      	movls	r0, #1
 800b750:	4770      	bx	lr
 800b752:	4608      	mov	r0, r1
 800b754:	4770      	bx	lr

0800b756 <__sfputc_r>:
 800b756:	6893      	ldr	r3, [r2, #8]
 800b758:	3b01      	subs	r3, #1
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	b410      	push	{r4}
 800b75e:	6093      	str	r3, [r2, #8]
 800b760:	da08      	bge.n	800b774 <__sfputc_r+0x1e>
 800b762:	6994      	ldr	r4, [r2, #24]
 800b764:	42a3      	cmp	r3, r4
 800b766:	db01      	blt.n	800b76c <__sfputc_r+0x16>
 800b768:	290a      	cmp	r1, #10
 800b76a:	d103      	bne.n	800b774 <__sfputc_r+0x1e>
 800b76c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b770:	f000 b934 	b.w	800b9dc <__swbuf_r>
 800b774:	6813      	ldr	r3, [r2, #0]
 800b776:	1c58      	adds	r0, r3, #1
 800b778:	6010      	str	r0, [r2, #0]
 800b77a:	7019      	strb	r1, [r3, #0]
 800b77c:	4608      	mov	r0, r1
 800b77e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b782:	4770      	bx	lr

0800b784 <__sfputs_r>:
 800b784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b786:	4606      	mov	r6, r0
 800b788:	460f      	mov	r7, r1
 800b78a:	4614      	mov	r4, r2
 800b78c:	18d5      	adds	r5, r2, r3
 800b78e:	42ac      	cmp	r4, r5
 800b790:	d101      	bne.n	800b796 <__sfputs_r+0x12>
 800b792:	2000      	movs	r0, #0
 800b794:	e007      	b.n	800b7a6 <__sfputs_r+0x22>
 800b796:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b79a:	463a      	mov	r2, r7
 800b79c:	4630      	mov	r0, r6
 800b79e:	f7ff ffda 	bl	800b756 <__sfputc_r>
 800b7a2:	1c43      	adds	r3, r0, #1
 800b7a4:	d1f3      	bne.n	800b78e <__sfputs_r+0xa>
 800b7a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b7a8 <_vfiprintf_r>:
 800b7a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7ac:	460d      	mov	r5, r1
 800b7ae:	b09d      	sub	sp, #116	; 0x74
 800b7b0:	4614      	mov	r4, r2
 800b7b2:	4698      	mov	r8, r3
 800b7b4:	4606      	mov	r6, r0
 800b7b6:	b118      	cbz	r0, 800b7c0 <_vfiprintf_r+0x18>
 800b7b8:	6a03      	ldr	r3, [r0, #32]
 800b7ba:	b90b      	cbnz	r3, 800b7c0 <_vfiprintf_r+0x18>
 800b7bc:	f7fe f8e0 	bl	8009980 <__sinit>
 800b7c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b7c2:	07d9      	lsls	r1, r3, #31
 800b7c4:	d405      	bmi.n	800b7d2 <_vfiprintf_r+0x2a>
 800b7c6:	89ab      	ldrh	r3, [r5, #12]
 800b7c8:	059a      	lsls	r2, r3, #22
 800b7ca:	d402      	bmi.n	800b7d2 <_vfiprintf_r+0x2a>
 800b7cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b7ce:	f7fe f9ee 	bl	8009bae <__retarget_lock_acquire_recursive>
 800b7d2:	89ab      	ldrh	r3, [r5, #12]
 800b7d4:	071b      	lsls	r3, r3, #28
 800b7d6:	d501      	bpl.n	800b7dc <_vfiprintf_r+0x34>
 800b7d8:	692b      	ldr	r3, [r5, #16]
 800b7da:	b99b      	cbnz	r3, 800b804 <_vfiprintf_r+0x5c>
 800b7dc:	4629      	mov	r1, r5
 800b7de:	4630      	mov	r0, r6
 800b7e0:	f000 f93a 	bl	800ba58 <__swsetup_r>
 800b7e4:	b170      	cbz	r0, 800b804 <_vfiprintf_r+0x5c>
 800b7e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b7e8:	07dc      	lsls	r4, r3, #31
 800b7ea:	d504      	bpl.n	800b7f6 <_vfiprintf_r+0x4e>
 800b7ec:	f04f 30ff 	mov.w	r0, #4294967295
 800b7f0:	b01d      	add	sp, #116	; 0x74
 800b7f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7f6:	89ab      	ldrh	r3, [r5, #12]
 800b7f8:	0598      	lsls	r0, r3, #22
 800b7fa:	d4f7      	bmi.n	800b7ec <_vfiprintf_r+0x44>
 800b7fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b7fe:	f7fe f9d7 	bl	8009bb0 <__retarget_lock_release_recursive>
 800b802:	e7f3      	b.n	800b7ec <_vfiprintf_r+0x44>
 800b804:	2300      	movs	r3, #0
 800b806:	9309      	str	r3, [sp, #36]	; 0x24
 800b808:	2320      	movs	r3, #32
 800b80a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b80e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b812:	2330      	movs	r3, #48	; 0x30
 800b814:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b9c8 <_vfiprintf_r+0x220>
 800b818:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b81c:	f04f 0901 	mov.w	r9, #1
 800b820:	4623      	mov	r3, r4
 800b822:	469a      	mov	sl, r3
 800b824:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b828:	b10a      	cbz	r2, 800b82e <_vfiprintf_r+0x86>
 800b82a:	2a25      	cmp	r2, #37	; 0x25
 800b82c:	d1f9      	bne.n	800b822 <_vfiprintf_r+0x7a>
 800b82e:	ebba 0b04 	subs.w	fp, sl, r4
 800b832:	d00b      	beq.n	800b84c <_vfiprintf_r+0xa4>
 800b834:	465b      	mov	r3, fp
 800b836:	4622      	mov	r2, r4
 800b838:	4629      	mov	r1, r5
 800b83a:	4630      	mov	r0, r6
 800b83c:	f7ff ffa2 	bl	800b784 <__sfputs_r>
 800b840:	3001      	adds	r0, #1
 800b842:	f000 80a9 	beq.w	800b998 <_vfiprintf_r+0x1f0>
 800b846:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b848:	445a      	add	r2, fp
 800b84a:	9209      	str	r2, [sp, #36]	; 0x24
 800b84c:	f89a 3000 	ldrb.w	r3, [sl]
 800b850:	2b00      	cmp	r3, #0
 800b852:	f000 80a1 	beq.w	800b998 <_vfiprintf_r+0x1f0>
 800b856:	2300      	movs	r3, #0
 800b858:	f04f 32ff 	mov.w	r2, #4294967295
 800b85c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b860:	f10a 0a01 	add.w	sl, sl, #1
 800b864:	9304      	str	r3, [sp, #16]
 800b866:	9307      	str	r3, [sp, #28]
 800b868:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b86c:	931a      	str	r3, [sp, #104]	; 0x68
 800b86e:	4654      	mov	r4, sl
 800b870:	2205      	movs	r2, #5
 800b872:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b876:	4854      	ldr	r0, [pc, #336]	; (800b9c8 <_vfiprintf_r+0x220>)
 800b878:	f7f4 fcaa 	bl	80001d0 <memchr>
 800b87c:	9a04      	ldr	r2, [sp, #16]
 800b87e:	b9d8      	cbnz	r0, 800b8b8 <_vfiprintf_r+0x110>
 800b880:	06d1      	lsls	r1, r2, #27
 800b882:	bf44      	itt	mi
 800b884:	2320      	movmi	r3, #32
 800b886:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b88a:	0713      	lsls	r3, r2, #28
 800b88c:	bf44      	itt	mi
 800b88e:	232b      	movmi	r3, #43	; 0x2b
 800b890:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b894:	f89a 3000 	ldrb.w	r3, [sl]
 800b898:	2b2a      	cmp	r3, #42	; 0x2a
 800b89a:	d015      	beq.n	800b8c8 <_vfiprintf_r+0x120>
 800b89c:	9a07      	ldr	r2, [sp, #28]
 800b89e:	4654      	mov	r4, sl
 800b8a0:	2000      	movs	r0, #0
 800b8a2:	f04f 0c0a 	mov.w	ip, #10
 800b8a6:	4621      	mov	r1, r4
 800b8a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b8ac:	3b30      	subs	r3, #48	; 0x30
 800b8ae:	2b09      	cmp	r3, #9
 800b8b0:	d94d      	bls.n	800b94e <_vfiprintf_r+0x1a6>
 800b8b2:	b1b0      	cbz	r0, 800b8e2 <_vfiprintf_r+0x13a>
 800b8b4:	9207      	str	r2, [sp, #28]
 800b8b6:	e014      	b.n	800b8e2 <_vfiprintf_r+0x13a>
 800b8b8:	eba0 0308 	sub.w	r3, r0, r8
 800b8bc:	fa09 f303 	lsl.w	r3, r9, r3
 800b8c0:	4313      	orrs	r3, r2
 800b8c2:	9304      	str	r3, [sp, #16]
 800b8c4:	46a2      	mov	sl, r4
 800b8c6:	e7d2      	b.n	800b86e <_vfiprintf_r+0xc6>
 800b8c8:	9b03      	ldr	r3, [sp, #12]
 800b8ca:	1d19      	adds	r1, r3, #4
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	9103      	str	r1, [sp, #12]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	bfbb      	ittet	lt
 800b8d4:	425b      	neglt	r3, r3
 800b8d6:	f042 0202 	orrlt.w	r2, r2, #2
 800b8da:	9307      	strge	r3, [sp, #28]
 800b8dc:	9307      	strlt	r3, [sp, #28]
 800b8de:	bfb8      	it	lt
 800b8e0:	9204      	strlt	r2, [sp, #16]
 800b8e2:	7823      	ldrb	r3, [r4, #0]
 800b8e4:	2b2e      	cmp	r3, #46	; 0x2e
 800b8e6:	d10c      	bne.n	800b902 <_vfiprintf_r+0x15a>
 800b8e8:	7863      	ldrb	r3, [r4, #1]
 800b8ea:	2b2a      	cmp	r3, #42	; 0x2a
 800b8ec:	d134      	bne.n	800b958 <_vfiprintf_r+0x1b0>
 800b8ee:	9b03      	ldr	r3, [sp, #12]
 800b8f0:	1d1a      	adds	r2, r3, #4
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	9203      	str	r2, [sp, #12]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	bfb8      	it	lt
 800b8fa:	f04f 33ff 	movlt.w	r3, #4294967295
 800b8fe:	3402      	adds	r4, #2
 800b900:	9305      	str	r3, [sp, #20]
 800b902:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b9d8 <_vfiprintf_r+0x230>
 800b906:	7821      	ldrb	r1, [r4, #0]
 800b908:	2203      	movs	r2, #3
 800b90a:	4650      	mov	r0, sl
 800b90c:	f7f4 fc60 	bl	80001d0 <memchr>
 800b910:	b138      	cbz	r0, 800b922 <_vfiprintf_r+0x17a>
 800b912:	9b04      	ldr	r3, [sp, #16]
 800b914:	eba0 000a 	sub.w	r0, r0, sl
 800b918:	2240      	movs	r2, #64	; 0x40
 800b91a:	4082      	lsls	r2, r0
 800b91c:	4313      	orrs	r3, r2
 800b91e:	3401      	adds	r4, #1
 800b920:	9304      	str	r3, [sp, #16]
 800b922:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b926:	4829      	ldr	r0, [pc, #164]	; (800b9cc <_vfiprintf_r+0x224>)
 800b928:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b92c:	2206      	movs	r2, #6
 800b92e:	f7f4 fc4f 	bl	80001d0 <memchr>
 800b932:	2800      	cmp	r0, #0
 800b934:	d03f      	beq.n	800b9b6 <_vfiprintf_r+0x20e>
 800b936:	4b26      	ldr	r3, [pc, #152]	; (800b9d0 <_vfiprintf_r+0x228>)
 800b938:	bb1b      	cbnz	r3, 800b982 <_vfiprintf_r+0x1da>
 800b93a:	9b03      	ldr	r3, [sp, #12]
 800b93c:	3307      	adds	r3, #7
 800b93e:	f023 0307 	bic.w	r3, r3, #7
 800b942:	3308      	adds	r3, #8
 800b944:	9303      	str	r3, [sp, #12]
 800b946:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b948:	443b      	add	r3, r7
 800b94a:	9309      	str	r3, [sp, #36]	; 0x24
 800b94c:	e768      	b.n	800b820 <_vfiprintf_r+0x78>
 800b94e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b952:	460c      	mov	r4, r1
 800b954:	2001      	movs	r0, #1
 800b956:	e7a6      	b.n	800b8a6 <_vfiprintf_r+0xfe>
 800b958:	2300      	movs	r3, #0
 800b95a:	3401      	adds	r4, #1
 800b95c:	9305      	str	r3, [sp, #20]
 800b95e:	4619      	mov	r1, r3
 800b960:	f04f 0c0a 	mov.w	ip, #10
 800b964:	4620      	mov	r0, r4
 800b966:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b96a:	3a30      	subs	r2, #48	; 0x30
 800b96c:	2a09      	cmp	r2, #9
 800b96e:	d903      	bls.n	800b978 <_vfiprintf_r+0x1d0>
 800b970:	2b00      	cmp	r3, #0
 800b972:	d0c6      	beq.n	800b902 <_vfiprintf_r+0x15a>
 800b974:	9105      	str	r1, [sp, #20]
 800b976:	e7c4      	b.n	800b902 <_vfiprintf_r+0x15a>
 800b978:	fb0c 2101 	mla	r1, ip, r1, r2
 800b97c:	4604      	mov	r4, r0
 800b97e:	2301      	movs	r3, #1
 800b980:	e7f0      	b.n	800b964 <_vfiprintf_r+0x1bc>
 800b982:	ab03      	add	r3, sp, #12
 800b984:	9300      	str	r3, [sp, #0]
 800b986:	462a      	mov	r2, r5
 800b988:	4b12      	ldr	r3, [pc, #72]	; (800b9d4 <_vfiprintf_r+0x22c>)
 800b98a:	a904      	add	r1, sp, #16
 800b98c:	4630      	mov	r0, r6
 800b98e:	f7fd fba5 	bl	80090dc <_printf_float>
 800b992:	4607      	mov	r7, r0
 800b994:	1c78      	adds	r0, r7, #1
 800b996:	d1d6      	bne.n	800b946 <_vfiprintf_r+0x19e>
 800b998:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b99a:	07d9      	lsls	r1, r3, #31
 800b99c:	d405      	bmi.n	800b9aa <_vfiprintf_r+0x202>
 800b99e:	89ab      	ldrh	r3, [r5, #12]
 800b9a0:	059a      	lsls	r2, r3, #22
 800b9a2:	d402      	bmi.n	800b9aa <_vfiprintf_r+0x202>
 800b9a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b9a6:	f7fe f903 	bl	8009bb0 <__retarget_lock_release_recursive>
 800b9aa:	89ab      	ldrh	r3, [r5, #12]
 800b9ac:	065b      	lsls	r3, r3, #25
 800b9ae:	f53f af1d 	bmi.w	800b7ec <_vfiprintf_r+0x44>
 800b9b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b9b4:	e71c      	b.n	800b7f0 <_vfiprintf_r+0x48>
 800b9b6:	ab03      	add	r3, sp, #12
 800b9b8:	9300      	str	r3, [sp, #0]
 800b9ba:	462a      	mov	r2, r5
 800b9bc:	4b05      	ldr	r3, [pc, #20]	; (800b9d4 <_vfiprintf_r+0x22c>)
 800b9be:	a904      	add	r1, sp, #16
 800b9c0:	4630      	mov	r0, r6
 800b9c2:	f7fd fe2f 	bl	8009624 <_printf_i>
 800b9c6:	e7e4      	b.n	800b992 <_vfiprintf_r+0x1ea>
 800b9c8:	0800ddb4 	.word	0x0800ddb4
 800b9cc:	0800ddbe 	.word	0x0800ddbe
 800b9d0:	080090dd 	.word	0x080090dd
 800b9d4:	0800b785 	.word	0x0800b785
 800b9d8:	0800ddba 	.word	0x0800ddba

0800b9dc <__swbuf_r>:
 800b9dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9de:	460e      	mov	r6, r1
 800b9e0:	4614      	mov	r4, r2
 800b9e2:	4605      	mov	r5, r0
 800b9e4:	b118      	cbz	r0, 800b9ee <__swbuf_r+0x12>
 800b9e6:	6a03      	ldr	r3, [r0, #32]
 800b9e8:	b90b      	cbnz	r3, 800b9ee <__swbuf_r+0x12>
 800b9ea:	f7fd ffc9 	bl	8009980 <__sinit>
 800b9ee:	69a3      	ldr	r3, [r4, #24]
 800b9f0:	60a3      	str	r3, [r4, #8]
 800b9f2:	89a3      	ldrh	r3, [r4, #12]
 800b9f4:	071a      	lsls	r2, r3, #28
 800b9f6:	d525      	bpl.n	800ba44 <__swbuf_r+0x68>
 800b9f8:	6923      	ldr	r3, [r4, #16]
 800b9fa:	b31b      	cbz	r3, 800ba44 <__swbuf_r+0x68>
 800b9fc:	6823      	ldr	r3, [r4, #0]
 800b9fe:	6922      	ldr	r2, [r4, #16]
 800ba00:	1a98      	subs	r0, r3, r2
 800ba02:	6963      	ldr	r3, [r4, #20]
 800ba04:	b2f6      	uxtb	r6, r6
 800ba06:	4283      	cmp	r3, r0
 800ba08:	4637      	mov	r7, r6
 800ba0a:	dc04      	bgt.n	800ba16 <__swbuf_r+0x3a>
 800ba0c:	4621      	mov	r1, r4
 800ba0e:	4628      	mov	r0, r5
 800ba10:	f7ff fdd2 	bl	800b5b8 <_fflush_r>
 800ba14:	b9e0      	cbnz	r0, 800ba50 <__swbuf_r+0x74>
 800ba16:	68a3      	ldr	r3, [r4, #8]
 800ba18:	3b01      	subs	r3, #1
 800ba1a:	60a3      	str	r3, [r4, #8]
 800ba1c:	6823      	ldr	r3, [r4, #0]
 800ba1e:	1c5a      	adds	r2, r3, #1
 800ba20:	6022      	str	r2, [r4, #0]
 800ba22:	701e      	strb	r6, [r3, #0]
 800ba24:	6962      	ldr	r2, [r4, #20]
 800ba26:	1c43      	adds	r3, r0, #1
 800ba28:	429a      	cmp	r2, r3
 800ba2a:	d004      	beq.n	800ba36 <__swbuf_r+0x5a>
 800ba2c:	89a3      	ldrh	r3, [r4, #12]
 800ba2e:	07db      	lsls	r3, r3, #31
 800ba30:	d506      	bpl.n	800ba40 <__swbuf_r+0x64>
 800ba32:	2e0a      	cmp	r6, #10
 800ba34:	d104      	bne.n	800ba40 <__swbuf_r+0x64>
 800ba36:	4621      	mov	r1, r4
 800ba38:	4628      	mov	r0, r5
 800ba3a:	f7ff fdbd 	bl	800b5b8 <_fflush_r>
 800ba3e:	b938      	cbnz	r0, 800ba50 <__swbuf_r+0x74>
 800ba40:	4638      	mov	r0, r7
 800ba42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba44:	4621      	mov	r1, r4
 800ba46:	4628      	mov	r0, r5
 800ba48:	f000 f806 	bl	800ba58 <__swsetup_r>
 800ba4c:	2800      	cmp	r0, #0
 800ba4e:	d0d5      	beq.n	800b9fc <__swbuf_r+0x20>
 800ba50:	f04f 37ff 	mov.w	r7, #4294967295
 800ba54:	e7f4      	b.n	800ba40 <__swbuf_r+0x64>
	...

0800ba58 <__swsetup_r>:
 800ba58:	b538      	push	{r3, r4, r5, lr}
 800ba5a:	4b2a      	ldr	r3, [pc, #168]	; (800bb04 <__swsetup_r+0xac>)
 800ba5c:	4605      	mov	r5, r0
 800ba5e:	6818      	ldr	r0, [r3, #0]
 800ba60:	460c      	mov	r4, r1
 800ba62:	b118      	cbz	r0, 800ba6c <__swsetup_r+0x14>
 800ba64:	6a03      	ldr	r3, [r0, #32]
 800ba66:	b90b      	cbnz	r3, 800ba6c <__swsetup_r+0x14>
 800ba68:	f7fd ff8a 	bl	8009980 <__sinit>
 800ba6c:	89a3      	ldrh	r3, [r4, #12]
 800ba6e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ba72:	0718      	lsls	r0, r3, #28
 800ba74:	d422      	bmi.n	800babc <__swsetup_r+0x64>
 800ba76:	06d9      	lsls	r1, r3, #27
 800ba78:	d407      	bmi.n	800ba8a <__swsetup_r+0x32>
 800ba7a:	2309      	movs	r3, #9
 800ba7c:	602b      	str	r3, [r5, #0]
 800ba7e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ba82:	81a3      	strh	r3, [r4, #12]
 800ba84:	f04f 30ff 	mov.w	r0, #4294967295
 800ba88:	e034      	b.n	800baf4 <__swsetup_r+0x9c>
 800ba8a:	0758      	lsls	r0, r3, #29
 800ba8c:	d512      	bpl.n	800bab4 <__swsetup_r+0x5c>
 800ba8e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ba90:	b141      	cbz	r1, 800baa4 <__swsetup_r+0x4c>
 800ba92:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ba96:	4299      	cmp	r1, r3
 800ba98:	d002      	beq.n	800baa0 <__swsetup_r+0x48>
 800ba9a:	4628      	mov	r0, r5
 800ba9c:	f7fe ff32 	bl	800a904 <_free_r>
 800baa0:	2300      	movs	r3, #0
 800baa2:	6363      	str	r3, [r4, #52]	; 0x34
 800baa4:	89a3      	ldrh	r3, [r4, #12]
 800baa6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800baaa:	81a3      	strh	r3, [r4, #12]
 800baac:	2300      	movs	r3, #0
 800baae:	6063      	str	r3, [r4, #4]
 800bab0:	6923      	ldr	r3, [r4, #16]
 800bab2:	6023      	str	r3, [r4, #0]
 800bab4:	89a3      	ldrh	r3, [r4, #12]
 800bab6:	f043 0308 	orr.w	r3, r3, #8
 800baba:	81a3      	strh	r3, [r4, #12]
 800babc:	6923      	ldr	r3, [r4, #16]
 800babe:	b94b      	cbnz	r3, 800bad4 <__swsetup_r+0x7c>
 800bac0:	89a3      	ldrh	r3, [r4, #12]
 800bac2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bac6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800baca:	d003      	beq.n	800bad4 <__swsetup_r+0x7c>
 800bacc:	4621      	mov	r1, r4
 800bace:	4628      	mov	r0, r5
 800bad0:	f000 f88c 	bl	800bbec <__smakebuf_r>
 800bad4:	89a0      	ldrh	r0, [r4, #12]
 800bad6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bada:	f010 0301 	ands.w	r3, r0, #1
 800bade:	d00a      	beq.n	800baf6 <__swsetup_r+0x9e>
 800bae0:	2300      	movs	r3, #0
 800bae2:	60a3      	str	r3, [r4, #8]
 800bae4:	6963      	ldr	r3, [r4, #20]
 800bae6:	425b      	negs	r3, r3
 800bae8:	61a3      	str	r3, [r4, #24]
 800baea:	6923      	ldr	r3, [r4, #16]
 800baec:	b943      	cbnz	r3, 800bb00 <__swsetup_r+0xa8>
 800baee:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800baf2:	d1c4      	bne.n	800ba7e <__swsetup_r+0x26>
 800baf4:	bd38      	pop	{r3, r4, r5, pc}
 800baf6:	0781      	lsls	r1, r0, #30
 800baf8:	bf58      	it	pl
 800bafa:	6963      	ldrpl	r3, [r4, #20]
 800bafc:	60a3      	str	r3, [r4, #8]
 800bafe:	e7f4      	b.n	800baea <__swsetup_r+0x92>
 800bb00:	2000      	movs	r0, #0
 800bb02:	e7f7      	b.n	800baf4 <__swsetup_r+0x9c>
 800bb04:	20000088 	.word	0x20000088

0800bb08 <_raise_r>:
 800bb08:	291f      	cmp	r1, #31
 800bb0a:	b538      	push	{r3, r4, r5, lr}
 800bb0c:	4604      	mov	r4, r0
 800bb0e:	460d      	mov	r5, r1
 800bb10:	d904      	bls.n	800bb1c <_raise_r+0x14>
 800bb12:	2316      	movs	r3, #22
 800bb14:	6003      	str	r3, [r0, #0]
 800bb16:	f04f 30ff 	mov.w	r0, #4294967295
 800bb1a:	bd38      	pop	{r3, r4, r5, pc}
 800bb1c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800bb1e:	b112      	cbz	r2, 800bb26 <_raise_r+0x1e>
 800bb20:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bb24:	b94b      	cbnz	r3, 800bb3a <_raise_r+0x32>
 800bb26:	4620      	mov	r0, r4
 800bb28:	f000 f830 	bl	800bb8c <_getpid_r>
 800bb2c:	462a      	mov	r2, r5
 800bb2e:	4601      	mov	r1, r0
 800bb30:	4620      	mov	r0, r4
 800bb32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb36:	f000 b817 	b.w	800bb68 <_kill_r>
 800bb3a:	2b01      	cmp	r3, #1
 800bb3c:	d00a      	beq.n	800bb54 <_raise_r+0x4c>
 800bb3e:	1c59      	adds	r1, r3, #1
 800bb40:	d103      	bne.n	800bb4a <_raise_r+0x42>
 800bb42:	2316      	movs	r3, #22
 800bb44:	6003      	str	r3, [r0, #0]
 800bb46:	2001      	movs	r0, #1
 800bb48:	e7e7      	b.n	800bb1a <_raise_r+0x12>
 800bb4a:	2400      	movs	r4, #0
 800bb4c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bb50:	4628      	mov	r0, r5
 800bb52:	4798      	blx	r3
 800bb54:	2000      	movs	r0, #0
 800bb56:	e7e0      	b.n	800bb1a <_raise_r+0x12>

0800bb58 <raise>:
 800bb58:	4b02      	ldr	r3, [pc, #8]	; (800bb64 <raise+0xc>)
 800bb5a:	4601      	mov	r1, r0
 800bb5c:	6818      	ldr	r0, [r3, #0]
 800bb5e:	f7ff bfd3 	b.w	800bb08 <_raise_r>
 800bb62:	bf00      	nop
 800bb64:	20000088 	.word	0x20000088

0800bb68 <_kill_r>:
 800bb68:	b538      	push	{r3, r4, r5, lr}
 800bb6a:	4d07      	ldr	r5, [pc, #28]	; (800bb88 <_kill_r+0x20>)
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	4604      	mov	r4, r0
 800bb70:	4608      	mov	r0, r1
 800bb72:	4611      	mov	r1, r2
 800bb74:	602b      	str	r3, [r5, #0]
 800bb76:	f7f5 f8c7 	bl	8000d08 <_kill>
 800bb7a:	1c43      	adds	r3, r0, #1
 800bb7c:	d102      	bne.n	800bb84 <_kill_r+0x1c>
 800bb7e:	682b      	ldr	r3, [r5, #0]
 800bb80:	b103      	cbz	r3, 800bb84 <_kill_r+0x1c>
 800bb82:	6023      	str	r3, [r4, #0]
 800bb84:	bd38      	pop	{r3, r4, r5, pc}
 800bb86:	bf00      	nop
 800bb88:	20000c58 	.word	0x20000c58

0800bb8c <_getpid_r>:
 800bb8c:	f7f5 b8b4 	b.w	8000cf8 <_getpid>

0800bb90 <_malloc_usable_size_r>:
 800bb90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb94:	1f18      	subs	r0, r3, #4
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	bfbc      	itt	lt
 800bb9a:	580b      	ldrlt	r3, [r1, r0]
 800bb9c:	18c0      	addlt	r0, r0, r3
 800bb9e:	4770      	bx	lr

0800bba0 <__swhatbuf_r>:
 800bba0:	b570      	push	{r4, r5, r6, lr}
 800bba2:	460c      	mov	r4, r1
 800bba4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bba8:	2900      	cmp	r1, #0
 800bbaa:	b096      	sub	sp, #88	; 0x58
 800bbac:	4615      	mov	r5, r2
 800bbae:	461e      	mov	r6, r3
 800bbb0:	da0d      	bge.n	800bbce <__swhatbuf_r+0x2e>
 800bbb2:	89a3      	ldrh	r3, [r4, #12]
 800bbb4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800bbb8:	f04f 0100 	mov.w	r1, #0
 800bbbc:	bf0c      	ite	eq
 800bbbe:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800bbc2:	2340      	movne	r3, #64	; 0x40
 800bbc4:	2000      	movs	r0, #0
 800bbc6:	6031      	str	r1, [r6, #0]
 800bbc8:	602b      	str	r3, [r5, #0]
 800bbca:	b016      	add	sp, #88	; 0x58
 800bbcc:	bd70      	pop	{r4, r5, r6, pc}
 800bbce:	466a      	mov	r2, sp
 800bbd0:	f000 f848 	bl	800bc64 <_fstat_r>
 800bbd4:	2800      	cmp	r0, #0
 800bbd6:	dbec      	blt.n	800bbb2 <__swhatbuf_r+0x12>
 800bbd8:	9901      	ldr	r1, [sp, #4]
 800bbda:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800bbde:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800bbe2:	4259      	negs	r1, r3
 800bbe4:	4159      	adcs	r1, r3
 800bbe6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bbea:	e7eb      	b.n	800bbc4 <__swhatbuf_r+0x24>

0800bbec <__smakebuf_r>:
 800bbec:	898b      	ldrh	r3, [r1, #12]
 800bbee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bbf0:	079d      	lsls	r5, r3, #30
 800bbf2:	4606      	mov	r6, r0
 800bbf4:	460c      	mov	r4, r1
 800bbf6:	d507      	bpl.n	800bc08 <__smakebuf_r+0x1c>
 800bbf8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bbfc:	6023      	str	r3, [r4, #0]
 800bbfe:	6123      	str	r3, [r4, #16]
 800bc00:	2301      	movs	r3, #1
 800bc02:	6163      	str	r3, [r4, #20]
 800bc04:	b002      	add	sp, #8
 800bc06:	bd70      	pop	{r4, r5, r6, pc}
 800bc08:	ab01      	add	r3, sp, #4
 800bc0a:	466a      	mov	r2, sp
 800bc0c:	f7ff ffc8 	bl	800bba0 <__swhatbuf_r>
 800bc10:	9900      	ldr	r1, [sp, #0]
 800bc12:	4605      	mov	r5, r0
 800bc14:	4630      	mov	r0, r6
 800bc16:	f7fe fee9 	bl	800a9ec <_malloc_r>
 800bc1a:	b948      	cbnz	r0, 800bc30 <__smakebuf_r+0x44>
 800bc1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc20:	059a      	lsls	r2, r3, #22
 800bc22:	d4ef      	bmi.n	800bc04 <__smakebuf_r+0x18>
 800bc24:	f023 0303 	bic.w	r3, r3, #3
 800bc28:	f043 0302 	orr.w	r3, r3, #2
 800bc2c:	81a3      	strh	r3, [r4, #12]
 800bc2e:	e7e3      	b.n	800bbf8 <__smakebuf_r+0xc>
 800bc30:	89a3      	ldrh	r3, [r4, #12]
 800bc32:	6020      	str	r0, [r4, #0]
 800bc34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc38:	81a3      	strh	r3, [r4, #12]
 800bc3a:	9b00      	ldr	r3, [sp, #0]
 800bc3c:	6163      	str	r3, [r4, #20]
 800bc3e:	9b01      	ldr	r3, [sp, #4]
 800bc40:	6120      	str	r0, [r4, #16]
 800bc42:	b15b      	cbz	r3, 800bc5c <__smakebuf_r+0x70>
 800bc44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc48:	4630      	mov	r0, r6
 800bc4a:	f000 f81d 	bl	800bc88 <_isatty_r>
 800bc4e:	b128      	cbz	r0, 800bc5c <__smakebuf_r+0x70>
 800bc50:	89a3      	ldrh	r3, [r4, #12]
 800bc52:	f023 0303 	bic.w	r3, r3, #3
 800bc56:	f043 0301 	orr.w	r3, r3, #1
 800bc5a:	81a3      	strh	r3, [r4, #12]
 800bc5c:	89a3      	ldrh	r3, [r4, #12]
 800bc5e:	431d      	orrs	r5, r3
 800bc60:	81a5      	strh	r5, [r4, #12]
 800bc62:	e7cf      	b.n	800bc04 <__smakebuf_r+0x18>

0800bc64 <_fstat_r>:
 800bc64:	b538      	push	{r3, r4, r5, lr}
 800bc66:	4d07      	ldr	r5, [pc, #28]	; (800bc84 <_fstat_r+0x20>)
 800bc68:	2300      	movs	r3, #0
 800bc6a:	4604      	mov	r4, r0
 800bc6c:	4608      	mov	r0, r1
 800bc6e:	4611      	mov	r1, r2
 800bc70:	602b      	str	r3, [r5, #0]
 800bc72:	f7f5 f8a8 	bl	8000dc6 <_fstat>
 800bc76:	1c43      	adds	r3, r0, #1
 800bc78:	d102      	bne.n	800bc80 <_fstat_r+0x1c>
 800bc7a:	682b      	ldr	r3, [r5, #0]
 800bc7c:	b103      	cbz	r3, 800bc80 <_fstat_r+0x1c>
 800bc7e:	6023      	str	r3, [r4, #0]
 800bc80:	bd38      	pop	{r3, r4, r5, pc}
 800bc82:	bf00      	nop
 800bc84:	20000c58 	.word	0x20000c58

0800bc88 <_isatty_r>:
 800bc88:	b538      	push	{r3, r4, r5, lr}
 800bc8a:	4d06      	ldr	r5, [pc, #24]	; (800bca4 <_isatty_r+0x1c>)
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	4604      	mov	r4, r0
 800bc90:	4608      	mov	r0, r1
 800bc92:	602b      	str	r3, [r5, #0]
 800bc94:	f7f5 f8a7 	bl	8000de6 <_isatty>
 800bc98:	1c43      	adds	r3, r0, #1
 800bc9a:	d102      	bne.n	800bca2 <_isatty_r+0x1a>
 800bc9c:	682b      	ldr	r3, [r5, #0]
 800bc9e:	b103      	cbz	r3, 800bca2 <_isatty_r+0x1a>
 800bca0:	6023      	str	r3, [r4, #0]
 800bca2:	bd38      	pop	{r3, r4, r5, pc}
 800bca4:	20000c58 	.word	0x20000c58

0800bca8 <_init>:
 800bca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcaa:	bf00      	nop
 800bcac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcae:	bc08      	pop	{r3}
 800bcb0:	469e      	mov	lr, r3
 800bcb2:	4770      	bx	lr

0800bcb4 <_fini>:
 800bcb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcb6:	bf00      	nop
 800bcb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcba:	bc08      	pop	{r3}
 800bcbc:	469e      	mov	lr, r3
 800bcbe:	4770      	bx	lr
